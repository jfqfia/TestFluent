/*******************************
 ** Cogito / Functions
 *******************************/

integer	CogitoStart() 
{
	LOutput loutput = (LMode:'relation',TField:'welcome');
	BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);

	$MINDBOARD@Setup.DialogueState = 'run';

	return 1;
}

integer	CogitoContinuation() 
{
	LOutput loutput = (LMode:'relation',TField:'continuation');
	BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);

	$MINDBOARD@Setup.DialogueState = 'cont';

	return 1;
}

integer	CogitoContinuationFromNoInput() 
{
	LOutput loutput = (LMode:'relation',TField:'continuation-no-input');
	BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);

	$MINDBOARD@Setup.DialogueState = 'cont';

	return 1;
}

integer	CogitoHello() 
{
	LOutput loutput = (LMode:'relation',TField:'hello');
	BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);

	$MINDBOARD@Setup.DialogueState = 'run';
	
	return 1;
}

integer	CogitoInterPardon() 
{
	LOutput loutput = (LMode:'relation',TField:'pardon');
	BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);


	$MINDBOARD@Setup.DialogueState = 'run';

	return 1;
}

integer	CogitoRecover(Task activeTaskItem) 
{
	LOutput loutput = (LMode:'relation',TField:'recover');
	loutput.IContext = activeTaskItem;
	BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);

	$MINDBOARD@Setup.DialogueState = 'run';

	return 1;
}

integer	CogitoNew() 
{
	LOutput loutput = (LMode:'relation',TField:'new');
	BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);

	$MINDBOARD@Setup.DialogueState = 'run';

	return 1;
}

integer	CogitoRep() 
{
	LOutput loutput = (LMode:'relation',TField:'rep');
	BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);

	$MINDBOARD@Setup.DialogueState = 'run';

	return 1;
}

integer	CogitoNewFromNoInput() 
{
	LOutput loutput = (LMode:'relation',TField:'new-no-input');
	BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);

	$MINDBOARD@Setup.DialogueState = 'run';

	return 1;
}

integer	CogitoClose() 
{
	LOutput loutput = (LMode:'relation',TField:'close');
	BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);

	$MINDBOARD@Setup.DialogueState = 'close';

	return 1;
}

integer	CogitoStop() 
{
	LOutput loutput = (LMode:'relation',TField:'goodbye');
	BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);

	CloseDialogue();

	return 1;
}

Task	ProcessActionLine(Task activeTaskItem_in)
{
	Task	activeTaskItem_proc;
	integer cycle;
	commandStage	prev_astage;

	SpyMessage("ProcessActionLine");
	SpyMessage(activeTaskItem_in);

	if (!!activeTaskItem_in.commandStage) {
		activeTaskItem_in.commandStage = 'starting';
	}

	activeTaskItem_proc = activeTaskItem_in;

	cycle = 1;
	while (cycle == 1) {
		prev_astage = activeTaskItem_proc.commandStage;
		switch (activeTaskItem_proc.commandStage) {
			case 'starting' {
				activeTaskItem_proc = AnalyzeOperPurpose(activeTaskItem_proc);
			}
			case 'purposeOk' {
				activeTaskItem_proc = AnalyzeActScope(activeTaskItem_proc);
			}
			case 'scopeOk' {
				activeTaskItem_proc = ExecuteTask(activeTaskItem_proc);
			}
		}
		if (prev_astage == activeTaskItem_proc.commandStage) {
			cycle = 0;
		}
	}

	return activeTaskItem_proc;
}

Task	AnalyzeOperPurpose(Task activeTaskItem)
{
	if (!!activeTaskItem.ActiveCommand.OperPurpose.OperPurposeDescriptor) {
		if (!!activeTaskItem.ActiveCommand) {
			LOutput loutput = (LMode:'ask',TField:'operPurpose');
			loutput.IContext = activeTaskItem;
			BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);
		} else {
			if (activeTaskItem.ActiveCommand.OperPurpose.OperPurposeDescriptor) {
				activeTaskItem.commandStage = 'purposeOk';
			} else {
				LOutput loutput = (LMode:'ask',TField:'operPurpose');
				loutput.IContext = activeTaskItem;
				BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);
			}
		}
	} else {
		activeTaskItem.commandStage = 'purposeOk';
	}

	return activeTaskItem;
}

Task	AnalyzeActScope(Task activeTaskItem)
{
	if (!!activeTaskItem.ActiveCommand.ActScope.ActScopeDescriptor) {
		if (activeTaskItem.ActiveCommand.ActScope.ActScopeDescriptor) {
			activeTaskItem.commandStage = 'scopeOk';
		} else {
			LOutput loutput = (LMode:'ask',TField:'actScope');
			loutput.IContext = activeTaskItem;
			BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);
		}
	} else {
		activeTaskItem.commandStage = 'scopeOk';
	}

	return activeTaskItem;
}

Task	ExecuteTask(Task activeTaskItem)
{
	SpyMessage("ExecuteTask");
	SpyMessage(activeTaskItem);

	switch (activeTaskItem.ActiveCommand.OperPurpose.OperPurposeDescriptor) {
		case 'activate' 	ExecuteTaskActivate(activeTaskItem);
		case 'deactivate' 	ExecuteTaskDeactivate(activeTaskItem);
		case 'open' 		ExecuteTaskOpen(activeTaskItem);
		case 'close' 		ExecuteTaskClose(activeTaskItem);
	}

	activeTaskItem.commandStage = 'done';

	return activeTaskItem;
}

integer	ExecuteTaskActivate(Task activeTaskItem)
{
	SpyMessage("ExecuteTaskActivate");
	SpyMessage(activeTaskItem);

	LOutput loutput = (LMode:'inform',TField:'task');
	loutput.Command <- activeTaskItem.ActiveCommand;

	BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);

	return 1;
}

integer	ExecuteTaskDeactivate(Task activeTaskItem)
{
	SpyMessage("ExecuteTaskDeactivate");
	SpyMessage(activeTaskItem);

	LOutput loutput = (LMode:'inform',TField:'task');
	loutput.Command <- activeTaskItem.ActiveCommand;

	BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);

	return 1;
}

integer	ExecuteTaskOpen(Task activeTaskItem)
{
	SpyMessage("ExecuteTaskOpen");
	SpyMessage(activeTaskItem);

	LOutput loutput = (LMode:'inform',TField:'task');
	loutput.Command <- activeTaskItem.ActiveCommand;

	BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);

	return 1;
}

integer	ExecuteTaskClose(Task activeTaskItem)
{
	SpyMessage("ExecuteTaskClose");
	SpyMessage(activeTaskItem);

	LOutput loutput = (LMode:'inform',TField:'task');
	loutput.Command <- activeTaskItem.ActiveCommand;

	BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);

	return 1;
}

