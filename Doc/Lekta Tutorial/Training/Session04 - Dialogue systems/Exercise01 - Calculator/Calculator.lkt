// ****************************************************************************
//
// Session 04
//
// Exercise 01: Integer calculator
// 
// ****************************************************************************

lektaProject

        projectHead
                projectDescriptor	: "English Numbers"
		projectLanguageScope	: [ en ]
		projectOperationScope	: [ test ]
		projectInterfaceScope   : [ dialogue ]
		projectCompileOutput	: ".Calculator.olk"

	projectSetup
		setupParserRoots = Expression

	classModel
		#Include "NumberTypes.lkt"
		#Include "LexicalNumberTypes.lkt"
		
	functionModel
	
	lexicalModel forLanguage en
		setupTokenizerIntegerClass (lexNumberDigits, "")
		// If you want to separate "two+two" proferences
		setupTokenizerPunctuation   ("+", lexAdd)
		setupTokenizerPunctuation   ("-", lexSubstract)
		setupTokenizerPunctuation   ("*", lexMultiply)
		setupTokenizerPunctuation   ("/", lexDivide)
		setupTokenizerPunctuation   ("^", lexPow)
		setupTokenizerPunctuation   ("(", lexLeftParenthesis)
		setupTokenizerPunctuation   (")", lexRightParenthesis)
		setupTokenizerPunctuation   ("[", lexLeftParenthesis)
		setupTokenizerPunctuation   ("]", lexRightParenthesis)
		setupTokenizerPunctuation   ("{", lexLeftParenthesis)
		setupTokenizerPunctuation   ("}", lexRightParenthesis)
		setupTokenizerPunctuation   ("!", lexFactorial)

		#Include "NumberEnglishLexicon.lkt"

	grammaticalModel forLanguage en
		#Include "NumberEnglishGrammar.lkt"
		
	// conversationalModel
		
	// ColligoSchemata
		
	// SensoSchemata

	// CogitoSchemata

	// RespondoSchemata

	// LocutioSchemata
		
	// scriboModel forLanguage en



