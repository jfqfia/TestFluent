/***************************************************************************

 ***************************************************************************/

(CogitoScheme CogitoStart :
	CogitoCapture 
	{
		$MINDBOARD@Control.Position == 'start'
	}
	CogitoAction
	{
		InitializeContext();

		Answer answer;

		answer.AnswerType <- 'welcome';
		BatchInsertEnd($MINDBOARD@Output.Answers, answer);

		$MINDBOARD@Control.Position <- 'waitingTask';
	}
)

(CogitoScheme CogitoWaitSuccess :
	CogitoCapture 
	{
		$MINDBOARD@Control.Position == 'waitingTask' &&
		BatchSize($MINDBOARD@Input.UserProferences) > 0		
	}
	CogitoAction
	{
		NormalizeProferences();

		$MINDBOARD@Control.Position <- 'executingTask';
	}
)

(CogitoScheme CogitoWaitFail :
	CogitoCapture 
	{
		$MINDBOARD@Control.Position == 'waitingTask' &&
		BatchSize($MINDBOARD@Input.UserProferences) == 0		
	}
	CogitoAction
	{
		Answer answer;

		answer.AnswerType <- 'apologize';
		BatchInsertEnd($MINDBOARD@Output.Answers, answer);

		$MINDBOARD@Control.Position <- 'finalizingTurn';
	}
)

(CogitoScheme CogitoExecuting :
	CogitoCapture 
	{
		$MINDBOARD@Control.Position == 'executingTask' &&
		BatchSize($MINDBOARD@Input.UserProferences) > 0		
	}
	CogitoAction
	{
		boolean end <- ExecuteTasks();

		$MINDBOARD@Control.Position <- 'finalizingTurn';
		if(end)
		{
			$MINDBOARD@Control.Position <- 'exit';
		}
	}
)

(CogitoScheme CogitoFinalizing :
	CogitoCapture 
	{
		$MINDBOARD@Control.Position == 'finalizingTurn'
	}
	CogitoAction
	{
		ResetInput();
		Answer answer;

		answer.AnswerType <- 'askTask';
		BatchInsertEnd($MINDBOARD@Output.Answers, answer);
		$MINDBOARD@Control.Position <- 'waitingTask';
	}
)

(CogitoScheme CogitoExit :
	CogitoCapture 
	{
		$MINDBOARD@Control.Position == 'exit'
	}
	CogitoAction
	{
		CloseDialogue();
	}
)

