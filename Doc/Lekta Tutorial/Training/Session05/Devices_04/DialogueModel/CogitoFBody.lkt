/*******************************
 ** Cogito / Functions
 *******************************/

integer	CogitoStart() 
{
	OutItem loutput = (OutFunction:'relation',OutParameter:'welcome');
	BatchInsertEnd($MINDBOARD@OutModel.OutFrame,loutput);

	$MINDBOARD@Setup.DialogueState = 'run';
	$MINDBOARD@Setup.DevicesFileInfo = 'Devices.info';

	return 1;
}

integer	CogitoContinuation() 
{
	OutItem loutput = (OutFunction:'relation',OutParameter:'continuation');
	BatchInsertEnd($MINDBOARD@OutModel.OutFrame,loutput);

	$MINDBOARD@Setup.DialogueState = 'cont';

	return 1;
}

integer	CogitoContinuationFromNoInput() 
{
	OutItem loutput = (OutFunction:'relation',OutParameter:'continuation-no-input');
	BatchInsertEnd($MINDBOARD@OutModel.OutFrame,loutput);

	$MINDBOARD@Setup.DialogueState = 'cont';

	return 1;
}

integer	CogitoHello() 
{
	OutItem loutput = (OutFunction:'relation',OutParameter:'hello');
	BatchInsertEnd($MINDBOARD@OutModel.OutFrame,loutput);

	$MINDBOARD@Setup.DialogueState = 'run';
	
	return 1;
}

integer	CogitoInterPardon() 
{
	OutItem loutput = (OutFunction:'relation',OutParameter:'pardon');
	BatchInsertEnd($MINDBOARD@OutModel.OutFrame,loutput);


	$MINDBOARD@Setup.DialogueState = 'run';

	return 1;
}

integer	CogitoRecover(Task activeTaskItem) 
{
	OutItem loutput = (OutFunction:'relation',OutParameter:'recover');
	loutput.IContext = activeTaskItem;
	BatchInsertEnd($MINDBOARD@OutModel.OutFrame,loutput);

	$MINDBOARD@Setup.DialogueState = 'run';

	return 1;
}

integer	CogitoNew() 
{
	OutItem loutput = (OutFunction:'relation',OutParameter:'new');
	BatchInsertEnd($MINDBOARD@OutModel.OutFrame,loutput);

	$MINDBOARD@Setup.DialogueState = 'run';

	return 1;
}

integer	CogitoRep() 
{
	OutItem loutput = (OutFunction:'relation',OutParameter:'rep');
	BatchInsertEnd($MINDBOARD@OutModel.OutFrame,loutput);

	$MINDBOARD@Setup.DialogueState = 'run';

	return 1;
}

integer	CogitoNewFromNoInput() 
{
	OutItem loutput = (OutFunction:'relation',OutParameter:'new-no-input');
	BatchInsertEnd($MINDBOARD@OutModel.OutFrame,loutput);

	$MINDBOARD@Setup.DialogueState = 'run';

	return 1;
}

integer	CogitoClose() 
{
	OutItem loutput = (OutFunction:'relation',OutParameter:'close');
	BatchInsertEnd($MINDBOARD@OutModel.OutFrame,loutput);

	$MINDBOARD@Setup.DialogueState = 'close';

	return 1;
}

integer	CogitoStop() 
{
	OutItem loutput = (OutFunction:'relation',OutParameter:'goodbye');
	BatchInsertEnd($MINDBOARD@OutModel.OutFrame,loutput);

	CloseDialogue();

	return 1;
}

Task	ProcessActionLine(Task activeTaskItem_in)
{
	Task	activeTaskItem_proc;
	integer cycle;
	commandStage	prev_astage;

	SpyMessage("ProcessActionLine");
	SpyMessage(activeTaskItem_in);

	if (!!activeTaskItem_in.commandStage) {
		activeTaskItem_in.commandStage = 'starting';
	}

	activeTaskItem_proc = activeTaskItem_in;

	cycle = 1;
	while (cycle == 1) {
		prev_astage = activeTaskItem_proc.commandStage;
		switch (activeTaskItem_proc.commandStage) {
			case 'starting' {
				activeTaskItem_proc = AnalyzeOperPurpose(activeTaskItem_proc);
			}
			case 'purposeOk' {
				activeTaskItem_proc = AnalyzeActScope(activeTaskItem_proc);
			}
			case 'scopeOk' {
				activeTaskItem_proc = ExecuteTask(activeTaskItem_proc);
			}
		}
		if (prev_astage == activeTaskItem_proc.commandStage) {
			cycle = 0;
		}
	}

	return activeTaskItem_proc;
}

Task	AnalyzeOperPurpose(Task activeTaskItem)
{
	if (!!activeTaskItem.ActiveCommand.OperPurpose.OperPurposeDescriptor) {
		if (!!activeTaskItem.ActiveCommand) {
			OutItem loutput = (OutFunction:'ask',OutParameter:'operPurpose');
			loutput.IContext = activeTaskItem;
			BatchInsertEnd($MINDBOARD@OutModel.OutFrame,loutput);
		} else {
			if (activeTaskItem.ActiveCommand.OperPurpose.OperPurposeDescriptor) {
				activeTaskItem.commandStage = 'purposeOk';
			} else {
				OutItem loutput = (OutFunction:'ask',OutParameter:'operPurpose');
				loutput.IContext = activeTaskItem;
				BatchInsertEnd($MINDBOARD@OutModel.OutFrame,loutput);
			}
		}
	} else {
		activeTaskItem.commandStage = 'purposeOk';
	}

	return activeTaskItem;
}

Task	AnalyzeActScope(Task activeTaskItem)
{
	if (!!activeTaskItem.ActiveCommand.ActScope.ActScopeDescriptor) {
		if (activeTaskItem.ActiveCommand.ActScope.ActScopeDescriptor) {
			activeTaskItem.commandStage = 'scopeOk';
		} else {
			OutItem loutput = (OutFunction:'ask',OutParameter:'actScope');
			loutput.IContext = activeTaskItem;
			BatchInsertEnd($MINDBOARD@OutModel.OutFrame,loutput);
		}
	} else {
		activeTaskItem.commandStage = 'scopeOk';
	}

	return activeTaskItem;
}

Task	ExecuteTask(Task activeTaskItem)
{
	SpyMessage("ExecuteTask");
	SpyMessage(activeTaskItem);

	switch (activeTaskItem.ActiveCommand.OperPurpose.OperPurposeDescriptor) {
		case 'activate' 	ExecuteTaskActivate(activeTaskItem);
		case 'deactivate' 	ExecuteTaskDeactivate(activeTaskItem);
		case 'open' 		ExecuteTaskOpen(activeTaskItem);
		case 'close' 		ExecuteTaskClose(activeTaskItem);
	}

	activeTaskItem.commandStage = 'done';

	return activeTaskItem;
}

integer	ExecuteTaskActivate(Task activeTaskItem)
{
	string	state;
	OutItem loutput;

	SpyMessage("ExecuteTaskActivate");
	SpyMessage(activeTaskItem);

	state <- ShapeToLiteral(
			LiveStoreObtainContentFromAttribute($MINDBOARD@Setup.DevicesFileInfo,
				activeTaskItem.ActiveCommand.ActScope.ActScopeDescriptor));

	SpyMessage("    State: ",state);

	if (state == 'on') {
	       	loutput <- (OutFunction:'inform',OutParameter:'already');
		loutput.Command <- activeTaskItem.ActiveCommand;
		BatchInsertEnd($MINDBOARD@OutModel.OutFrame,loutput);
	} else {
	       	loutput <- (OutFunction:'inform',OutParameter:'task');
		loutput.Command <- activeTaskItem.ActiveCommand;
		BatchInsertEnd($MINDBOARD@OutModel.OutFrame,loutput);

		LiveStoreSetItem($MINDBOARD@Setup.DevicesFileInfo,
				activeTaskItem.ActiveCommand.ActScope.ActScopeDescriptor,
				'on');
	}

	return 1;
}

integer	ExecuteTaskDeactivate(Task activeTaskItem)
{
	string	state;
	OutItem loutput;

	SpyMessage("ExecuteTaskDeactivate");
	SpyMessage(activeTaskItem);

	state <- ShapeToLiteral(
			LiveStoreObtainContentFromAttribute($MINDBOARD@Setup.DevicesFileInfo,
				activeTaskItem.ActiveCommand.ActScope.ActScopeDescriptor));

	SpyMessage("    State: ",state);

	if (state == 'off') {
	       	loutput <- (OutFunction:'inform',OutParameter:'already');
		loutput.Command <- activeTaskItem.ActiveCommand;
		BatchInsertEnd($MINDBOARD@OutModel.OutFrame,loutput);
	} else {
	       	loutput <- (OutFunction:'inform',OutParameter:'task');
		loutput.Command <- activeTaskItem.ActiveCommand;
		BatchInsertEnd($MINDBOARD@OutModel.OutFrame,loutput);

		LiveStoreSetItem($MINDBOARD@Setup.DevicesFileInfo,
				activeTaskItem.ActiveCommand.ActScope.ActScopeDescriptor,
				'off');
	}

	return 1;
}

integer	ExecuteTaskOpen(Task activeTaskItem)
{
	string	state;
	OutItem loutput;

	SpyMessage("ExecuteTaskOpen");
	SpyMessage(activeTaskItem);

	state <- ShapeToLiteral(
			LiveStoreObtainContentFromAttribute($MINDBOARD@Setup.DevicesFileInfo,
				activeTaskItem.ActiveCommand.ActScope.ActScopeDescriptor));

	SpyMessage("    State: ",state);

	if (state == 'open') {
	       	loutput <- (OutFunction:'inform',OutParameter:'already');
		loutput.Command <- activeTaskItem.ActiveCommand;
		BatchInsertEnd($MINDBOARD@OutModel.OutFrame,loutput);
	} else {
	       	loutput <- (OutFunction:'inform',OutParameter:'task');
		loutput.Command <- activeTaskItem.ActiveCommand;
		BatchInsertEnd($MINDBOARD@OutModel.OutFrame,loutput);

		LiveStoreSetItem($MINDBOARD@Setup.DevicesFileInfo,
				activeTaskItem.ActiveCommand.ActScope.ActScopeDescriptor,
				'open');
	}

	return 1;
}

integer	ExecuteTaskClose(Task activeTaskItem)
{
	string	state;
	OutItem loutput;

	SpyMessage("ExecuteTaskClose");
	SpyMessage(activeTaskItem);

	state <- ShapeToLiteral(
			LiveStoreObtainContentFromAttribute($MINDBOARD@Setup.DevicesFileInfo,
				activeTaskItem.ActiveCommand.ActScope.ActScopeDescriptor));

	SpyMessage("    State: ",state);

	if (state == 'closed') {
	       	loutput <- (OutFunction:'inform',OutParameter:'already');
		loutput.Command <- activeTaskItem.ActiveCommand;
		BatchInsertEnd($MINDBOARD@OutModel.OutFrame,loutput);
	} else {
	       	loutput <- (OutFunction:'inform',OutParameter:'task');
		loutput.Command <- activeTaskItem.ActiveCommand;
		BatchInsertEnd($MINDBOARD@OutModel.OutFrame,loutput);

		LiveStoreSetItem($MINDBOARD@Setup.DevicesFileInfo,
				activeTaskItem.ActiveCommand.ActScope.ActScopeDescriptor,
				'closed');
	}

	return 1;
}

integer CogitoCMap()
{
	integer	lang;
	integer	search;
	real	score;
	string	header;
	string	subject;
	string	reply;

	OutItem	loutput;

	lang <- GetHeadPropertyLanguage();

	// Fase 1 - INDEXING AREA - USERSAMPLES - COMPLETE
	SpyMessage("CALLING CONCEPTUAL SCHEME - USERSAMPLES");
	ConceptualSchemeSetIndexingArea('DevicesCMap',
		lang,
		'UserSamples');
	ConceptualSchemeExplore('DevicesCMap',lang);

	search <- ConceptualSchemeGetCompleteFoundItems('DevicesCMap',lang);
	SpyMessage("Results: ", search);

	for (integer result <- 1;
			result <= search;
			result ++) {
		header <- ConceptualSchemeAccessCompleteHeader('DevicesCMap',lang,result);
		score <- ConceptualSchemeAccessCompleteScore('DevicesCMap',lang,result);
		SpyMessage("   (",result,") [",score,"] => ", header);
	}

	if (search >= 1) {
		header <- ConceptualSchemeAccessCompleteHeader('DevicesCMap',lang,1);
		subject <- ConceptualSchemeAccessCompleteSubject('DevicesCMap',lang,1);

		reply <- LiteralConcat(header, '. ');
		reply <- LiteralConcat(reply,subject);
		reply <- LiteralConcat(reply, '. ');

		loutput.OutFunction <- 'cmap';
		loutput.OutParameter <- reply;
		BatchInsertEnd($MINDBOARD@OutModel.OutFrame,loutput);

		return 1;
	}

	// Fase 2 - INDEXING AREA - MAININDEX - UNIFIED
	SpyMessage("CALLING CONCEPTUAL SCHEME - MAININDEX");
	ConceptualSchemeSetIndexingArea('DevicesCMap',
		lang,
		'MainIndex');
	ConceptualSchemeExplore('DevicesCMap',lang);

	search <- ConceptualSchemeGetUnifiedFoundItems('DevicesCMap',lang);
	SpyMessage("Results: ", search);

	for (integer result <- 1;
			result <= search;
			result ++) {
		header <- ConceptualSchemeAccessUnifiedHeader('DevicesCMap',lang,result);
		score <- ConceptualSchemeAccessUnifiedScore('DevicesCMap',lang,result);
		SpyMessage("   (",result,") [",score,"] => ", header);
	}

	if (search >= 1) {
		header <- ConceptualSchemeAccessUnifiedHeader('DevicesCMap',lang,1);
		subject <- ConceptualSchemeAccessUnifiedSubject('DevicesCMap',lang,1);

		reply <- LiteralConcat(header, '. ');
		reply <- LiteralConcat(reply,subject);
		reply <- LiteralConcat(reply, '. ');

		loutput.OutFunction <- 'cmap';
		loutput.OutParameter <- reply;
		BatchInsertEnd($MINDBOARD@OutModel.OutFrame,loutput);
	}

	if (search == 0)
		CogitoContinuation();

	return 1;
}
