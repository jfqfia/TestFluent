/*******************************
 ** Open / Functions
 *******************************/

integer	coherentCommands(Command commandprev, 
		Command commandnew) 
{
	string operPurposeDescriptor;

	if (commandprev.OperPurpose.OperPurposeDescriptor =:=
			commandnew.OperPurpose.OperPurposeDescriptor) {
		if (commandprev.OperPurpose.OperPurposeDescriptor)
			operPurposeDescriptor <- commandprev.OperPurpose.OperPurposeDescriptor;
		else
			operPurposeDescriptor <- commandnew.OperPurpose.OperPurposeDescriptor;

		return coherentCommandsScope(operPurposeDescriptor,commandprev,commandnew);

	} else 
		return 0;
}

integer	coherentCommandsScope(string operPurposeDescriptor,
		Command commandprev, 
		Command commandnew) 
{
	string actScopeDescriptor;

	if (commandprev.ActScope.ActScopeDescriptor =:=
			commandnew.ActScope.ActScopeDescriptor) {

		if (commandprev.ActScope.ActScopeDescriptor)
			actScopeDescriptor <- commandprev.ActScope.ActScopeDescriptor;
		else
			actScopeDescriptor <- commandnew.ActScope.ActScopeDescriptor;

		if (operPurposeDescriptor && actScopeDescriptor) {
			if (!!AnalyzeOperPurposeActScopeCoherence(operPurposeDescriptor,
						actScopeDescriptor))
				return 0;
		}

		return coherentCommandsInfo(operPurposeDescriptor,actScopeDescriptor,commandprev,commandnew);
	} else 
		return 0;

	return 1;
}

integer	coherentCommandsInfo(string operPurposeDescriptor,
		string actScopeDescriptor,
		Command commandprev, 
		Command commandnew) 
{
	string linkedInfoDescriptor;

	if (commandprev.LinkedInfo.LinkedInfoDescriptor =:=
			commandnew.LinkedInfo.LinkedInfoDescriptor) {

		if (commandprev.LinkedInfo.LinkedInfoDescriptor)
			linkedInfoDescriptor <- commandprev.LinkedInfo.LinkedInfoDescriptor;
		else
			linkedInfoDescriptor <- commandnew.LinkedInfo.LinkedInfoDescriptor;

		if (operPurposeDescriptor && linkedInfoDescriptor) {
			if (!!AnalyzeOperPurposeLinkedInfoCoherence(operPurposeDescriptor,
						linkedInfoDescriptor))
				return 0;
		}

		if (actScopeDescriptor && linkedInfoDescriptor) {
			if (!!AnalyzeActScopeLinkedInfoCoherence(actScopeDescriptor,
						linkedInfoDescriptor))
				return 0;
		}
	} else 
		return 0;

	return 1;
}

integer	addOpenActionModel(Command command) 
{
	Task newTaskItem;
	integer profNumber;

	profNumber = DialogueInteractionCounter();

	newTaskItem.ActiveCommand = command;
	newTaskItem.profNumber = profNumber;

	BatchInsertInit($MINDBOARD@Open.ActiveTasks,newTaskItem);

	return 1;
}

integer	addWaitingTasksModel(Command command) 
{
	Task newTaskItem;
	integer profNumber;

	profNumber = DialogueInteractionCounter();

	newTaskItem.ActiveCommand = command;
	newTaskItem.profNumber = profNumber;

	BatchInsertEnd($MINDBOARD@Open.WaitingTasks,newTaskItem);

	return 1;
}

integer	fusionOpenActionModel(Task activeTaskItem,
		Command command,
		integer taskpos)
{
	integer profNumber;

	profNumber = DialogueInteractionCounter();

	activeTaskItem.ActiveCommand <& command;
	activeTaskItem.profNumber = profNumber;

	BatchAssignPosition($MINDBOARD@Open.ActiveTasks,taskpos,activeTaskItem);
	if (taskpos > 1) {
		BatchExchange($MINDBOARD@Open.ActiveTasks,1,taskpos);
	}

	return 1;
}
