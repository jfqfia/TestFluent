/*******************************
 ** Scribo / Person / Functions
 *******************************/

string	GenerateVerifyPerson(Person person,integer upper,OperPurposeDescriptor igoaltype)
{
	string res;

	switch (person.VerifyType) {
		case 'infer' {
			if (igoaltype == 'consult') {
				if (upper == 1) {
					if (PersonContract(person)) {
						res <- '¿Sería d';
					} else {
						res <- '¿Sería de ';
					}
				} else {
					if (PersonContract(person)) {
						res <- '. ¿Sería d';
					} else {
						res <- '. ¿Sería de ';
					}
				}
			} else {
				if (upper == 1) {
					res <- '¿Sería para ';
				} else {
					res <- '. ¿Sería para ';
				}
			}
		}
		case 'repeat' {
			if (igoaltype == 'consult') {
				if (upper == 1) {
					if (PersonContract(person)) {
						res <- '¿Sería también d';
					} else {
						res <- '¿Sería también de ';
					}
				} else {
					if (PersonContract(person)) {
						res <- '. ¿Sería también d';
					} else {
						res <- '. ¿Sería también de ';
					}
				}
			} else {
				if (upper == 1) {
					res <- '¿Sería también para ';
				} else {
					res <- '. ¿Sería también para ';
				}
			}
		}
		case 'raise' {
			if (igoaltype == 'consult') {
				if (upper == 1) {
					if (PersonContract(person)) {
						res <- 'D';
					} else {
						res <- 'De ';
					}
				} else {
					if (PersonContract(person)) {
						res <- ' d';
					} else {
						res <- ' de ';
					}
				}
			} else {
				if (upper == 1) {
					res <- 'Para ';
				} else {
					res <- ' para ';
				}
			}
		}
	}
	
	res <- LiteralConcat(res, Person2String(person));

	if ((person.VerifyType == 'infer') || (person.VerifyType == 'repeat')) {
		res <- LiteralConcat(res,'? ');
	} else {
		res <- LiteralConcat(res,'. ');
	}

	return res;
}

string	GenerateVerifyPerson(Person person,OperPurposeDescriptor igoaltype)
{
	string res;

	if (igoaltype == 'consult') {
		if (PersonContract(person)) {
			res <- '¿D';
		} else {
			res <- '¿De ';
		}
	} else {
		res <- '¿Para ';
	}

	res <- LiteralConcat(res, Person2String(person));

	res <- LiteralConcat(res,'? ');

	return res;
}

string	GenerateAskPerson(OperPurposeDescriptor igoaltype)
{
	if (igoaltype == 'consult') {
		return 'Por favor, me puede indicar de quién es la cita.';
	} else {
		return 'Por favor, me puede indicar para quién es la cita.';
	}
}

string	Person2String(Person person)
{
	string str_person;
	string str_relative;

	if (person.PersonRelative) {
		str_relative <- Person2String(person.PersonRelative);
		if (PersonContract(person)) {
			str_relative <- LiteralConcat(' d',str_relative);
		} else {
			str_relative <- LiteralConcat(' de ',str_relative);
		}
		str_person <- PersonDegree2String(person);
		if (person.PersonGenre == 'masc') {
			str_person <- LiteralConcat('el ',str_person,str_relative);
		} else {
			str_person <- LiteralConcat('la ',str_person,str_relative);
		}
	} else {
		str_person <- PersonDegree2String(person);
		if (person.PersonDegree == 'ped') {
			str_person <- LiteralConcat('el ',str_person);
		} else {
			if (person.PersonDegree =!= 'self') {
				str_person <- LiteralConcat('su ',str_person);
			}
		}
	}

	return str_person;
}

string	Person2StringD(Person person)
{
	string	str_person;

	if (person.PersonDegree != 'ped') {
		str_person <- Person2String(person);
		if (PersonContract(person)) {
			str_person <- LiteralConcat(' d',str_person);
		} else {
			str_person <- LiteralConcat(' de ',str_person);
		} 
	} else {
		str_person <- 'del niño';
	}

	return str_person;
}
	
string	Person2StringAskPersonalId(Person person)
{
	string	str_person;

	if (DirectChildren(person)) {
		str_person <- ' de usted';
	} else {
		if (person.PersonDegree != 'ped') {
			str_person <- Person2String(person);
			if (PersonContract(person)) {
				str_person <- LiteralConcat(' d',str_person);
			} else {
				str_person <- LiteralConcat(' de ',str_person);
			}
		} else {
			str_person <- '';
		}
	
		if (person.PersonHasPersonalId == 'no') {
			if (LiteralSize(str_person) > 0) {
				if (PersonContract(person)) {
					str_person <- LiteralConcat(' del padre o la madre ',
								str_person);
				} else {
					str_person <- LiteralConcat(' del padre o la madre ',
								str_person);
				}
			} else {
				str_person <- ' del padre o la madre del niño';
			}
		}
	}

	return str_person;
}

integer	PersonContract(Person person)
{
	if (person.PersonRelative) {
		if (person.PersonRelative.PersonGenre == 'masc') {
			if (person.PersonRelative.PersonDegree != 'self') {
				if (person.PersonRelative.PersonRelative) {
					return 1;
				}
			}
		}
	}

	return 0;
}

string	PersonDegree2String(Person person) 
{
	switch (person.PersonDegree) {
		case 'self'		{ return 'usted'; }
		case 'ped'		{ return 'pediatra'; }
		case 'grand-father'	{ return 'abuelo'; }
		case 'grand-mother'	{ return 'abuela'; }
		case 'father'		{ return 'padre'; }
		case 'mother'		{ return 'madre'; }
		case 'brother'		{ return 'hermano'; }
		case 'sister'		{ return 'hermana'; }
		case 'husband'		{ return 'marido'; }
		case 'wife'		{ return 'esposa'; }
		case 'son'		{ return 'hijo'; }
		case 'daughter'		{ return 'hija'; }
		case 'grand-son'	{ return 'nieto'; }
		case 'grand-daughter'	{ return 'nieta'; }
		case 'nephew'		{ return 'sobrino'; }
		case 'niece'		{ return 'sobrina'; }
		case 'uncle'		{ return 'tío'; }
		case 'aunt'		{ return 'tía'; }
		case 'brother-in-law'	{ return 'cuñado'; }
		case 'sister-in-law'	{ return 'cuñada'; }
		case 'son-in-law'	{ return 'yerno'; }
		case 'daughter-in-law'	{ return 'nuera'; }
		case 'father-in-law'	{ return 'suegro'; }
		case 'mother-in-law'	{ return 'suegra'; }
		case 'cousin'		{ if (person.PersonGenre == 'masc') {
						return 'primo'; 
					  } else {
						return 'prima'; } }
	}
}
