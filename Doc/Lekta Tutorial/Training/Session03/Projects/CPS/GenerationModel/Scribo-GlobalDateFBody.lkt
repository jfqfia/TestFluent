/*******************************
 ** Scribo / GlobalDate / Functions
 *******************************/

string	GlobalDate2String(GlobalDate date)
{
	string res;

	res <- LiteralConcat('el día ',
			ShapeToString(date.DRef.AbsPeriodDay),
			' de ',
			PeriodPeriodMonthDesc(date.DRef.AbsPeriodMonth));

	if (date.DRef.AbsPeriodYear =!= ClockAskYear()) {
		res <- LiteralConcat(res,
				' de ',
				ShapeToString(date.DRef.AbsPeriodYear));
	}

	return res;
}

string	GlobalDateInput2String(GlobalDate date)
{
	string res;

	if (date.PeriodDay) {
		cond {
			(date.PeriodDay.PeriodPeriodDayRelative) {
				switch (date.PeriodDay.PeriodPeriodDayRelative) {
					case -1 { return 'ayer'; }
					case 0  { return 'hoy'; }
					case 1  { return 'mañana'; }
				}
			}
			(date.PeriodDay.AbsPeriodDay) {
				res <- LiteralConcat('el día ',ShapeToString(date.PeriodDay.AbsPeriodDay));
				if (date.PeriodMonth) {
					cond {
						(date.PeriodMonth.AbsPeriodMonth) {
							res <- LiteralConcat(res,' de ',PeriodPeriodMonthDesc(date.PeriodMonth.AbsPeriodMonth)); }
					}
				}
			}
		}
	}

	return res;
}
				
string	PeriodPeriodMonthDesc(integer monthnumber)
{
	switch (monthnumber) {
		case  1 { return 'enero'; }
		case  2 { return 'febrero'; }
		case  3 { return 'marzo'; }
		case  4 { return 'abril'; }
		case  5 { return 'mayo'; }
		case  6 { return 'junio'; }
		case  7 { return 'julio'; }
		case  8 { return 'agosto'; }
		case  9 { return 'septiembre'; }
		case 10 { return 'octubre'; }
		case 11 { return 'noviembre'; }
		case 12 { return 'diciembre'; }
	}

	return ' ';
}

string	PeriodHourName(integer hour)
{
	switch (hour) {
		case  1 { return 'una'; }
		case  2 { return 'dos'; }
		case  3 { return 'tres'; }
		case  4 { return 'cuatro'; }
		case  5 { return 'cinco'; }
		case  6 { return 'seis'; }
		case  7 { return 'siete'; }
		case  8 { return 'ocho'; }
		case  9 { return 'nueve'; }
		case 10 { return 'diez'; }
		case 11 { return 'once'; }
		case 12 { return 'doce'; }
	}
}

string	PeriodMinuteName(integer min)
{
	cond {
		(min ==  0) {	return ''; }
		(min ==  5) {	return 'y cinco'; }
		(min == 10) {	return 'y diez'; }
		(min == 15) {	return 'y cuarto'; }
		(min == 20) {	return 'y veinte'; }
		(min == 25) {	return 'y veinticinco'; }
		(min == 30) {	return 'y media'; }
		(min == 35) {	return 'menos veinticinco'; }
		(min == 40) {	return 'menos veinte'; }
		(min == 45) {	return 'menos cuarto'; }
		(min == 50) {	return 'menos diez'; }
		(min == 55) {	return 'menos cinco'; }
	}
}

string	TimeName(integer hour, integer min) 
{
	integer n_hour;
	string  time;
	string	s_min;

	n_hour <- hour;

	if (min > 30) {
		n_hour <- n_hour + 1;
	}

	if (n_hour > 12) {
		n_hour <- n_hour - 12;
	}

	if (n_hour == 1) {
		time <- ' la ';
	} else {
		time <- ' las ';
	}

	time <- LiteralConcat(time,PeriodHourName(n_hour),' ',PeriodMinuteName(min),' ');

	cond {
		(hour < 11) { time <- LiteralConcat(time,'de la mañana'); }
		(hour < 14) { time <- LiteralConcat(time,'del mediodía'); }
		(hour < 20) { time <- LiteralConcat(time,'de la tarde'); }
		(hour < 24) { time <- LiteralConcat(time,'de la noche'); }
	}

	return time;
}



integer	TimeFormatRandom()
{
	// 1 -> Formato "HH:MM"
	// 2 -> Formato "HH horas MM minutos"

	return Random(1,2);
}

string	Time2Text(string HH, string MM, integer timeformat)
{
	if (SubLiteral(HH,1,1) =:= '0') {
		HH <- SubLiteral(HH,2,2);
	}

	switch (timeformat) {
		case 1 { // 1 -> Formato "HH:MM"
			return LiteralConcat(HH,':',MM); }
		case 2 { // 2 -> Formato "HH horas MM minutos"
			if (SubLiteral(MM,1,2) =:= '00') {
				return LiteralConcat(HH,' horas'); 
			} 
			if (SubLiteral(MM,1,1) =:= '0') {
				MM <- SubLiteral(MM,2,2);
			}
			return LiteralConcat(HH,' horas ',MM,' minutos'); }
	}

	return ' ';
}

string	DRef2Text(DRef dref,DRef today)
{
	string text;

	switch (dref.Distance) {
		case 0 {
			text <- 'hoy, ';
		}
		case 1 {
			text <- 'mañana, ';
		}
		case 2 {
			text <- 'pasado mañana, ';
		}
		default {
			text <- 'el ';
		}
	}

	text <- LiteralConcat(text,'día ',ShapeToString(dref.AbsPeriodDay));

	if (dref.AbsPeriodMonth != today.AbsPeriodMonth) {
		text <- LiteralConcat(text,' de ',PeriodPeriodMonthDesc(dref.AbsPeriodMonth));
	}

	if (dref.AbsPeriodYear != today.AbsPeriodYear) {
		text <- LiteralConcat(text,' de',ShapeToString(dref.AbsPeriodYear));
	}

	return text;
}

string	DRef2TextOverDRef(DRef dref,DRef over)
{
	integer dist;
	string text;

	dist <- over.AbsPeriodDay - dref.AbsPeriodDay;

	switch (dist) {
		case 1 {
			text <- 'mañana, ';
		}
		case 2 {
			text <- 'pasado mañana, ';
		}
		default {
			text <- 'el ';
		}
	}

	text <- LiteralConcat(text,'día ',ShapeToString(dref.AbsPeriodDay));

	if (dref.AbsPeriodMonth != over.AbsPeriodMonth) {
		text <- LiteralConcat(text,' de ',PeriodPeriodMonthDesc(over.AbsPeriodMonth));
	}

	return text;
}
