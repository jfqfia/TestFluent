/*******************************
 ** Strategies / Verify
 *******************************/

(ScriboScheme NLG_Verify: [LOutput]
    ScriboCapture {
        #OBJLOCUTIO-1 =:= (LMode:'confirm')
    }

    ScriboAction {
	string	output;

	if ((#OBJLOCUTIO-1.TContext.CModel.OperPurpose) || (#OBJLOCUTIO-1.TContext.CModel.ActScope)) {
		SetMainAnswerTextRandom("Muy bien, ",
					"De acuerdo, ",
					"Veamos, ");
		SetMainAnswerTextRandom("para ",
					"se trataría de ");

		cond {
			((#OBJLOCUTIO-1.TContext.CModel.OperPurpose) && (#OBJLOCUTIO-1.TContext.CModel.ActScope)) {
				output <- GenerateAnalyzeOperPurposeActScope(#OBJLOCUTIO-1.TContext.CModel.OperPurpose.OperPurposeDescriptor,
							#OBJLOCUTIO-1.TContext.CModel.ActScope.ActScopeDescriptor);
				SetMainAnswer(output);
				$MINDBOARD@fOpen.Strat.SConf <& ['igoal','cdomain'];
				SetActiveExpectation('Start');
			}
			(#OBJLOCUTIO-1.TContext.CModel.OperPurpose) {
				output <- GenerateAnalyzeOperPurposeActScope(#OBJLOCUTIO-1.TContext.CModel.OperPurpose.OperPurposeDescriptor,
							#OBJLOCUTIO-1.TContext.GModel.ActScope.ActScopeDescriptor);
				SetMainAnswer(output);
				$MINDBOARD@fOpen.Strat.SConf <& ['igoal'];
				SetActiveExpectation('Start');
			}
			(#OBJLOCUTIO-1.TContext.CModel.ActScope) {
				output <- GenerateAnalyzeOperPurposeActScope(#OBJLOCUTIO-1.TContext.GModel.OperPurpose.OperPurposeDescriptor,
							#OBJLOCUTIO-1.TContext.CModel.ActScope.ActScopeDescriptor);
				SetMainAnswer(output);
				$MINDBOARD@fOpen.Strat.SConf <& ['cdomain'];
				SetActiveExpectation('Start');
			}
		} 

		if (#OBJLOCUTIO-1.TContext.CModel.LinkedInfo.Person) {
			if (#OBJLOCUTIO-1.TContext.CModel.OperPurpose) {
				output <- GenerateVerifyPerson(#OBJLOCUTIO-1.TContext.CModel.LinkedInfo.Person,
							0,
							#OBJLOCUTIO-1.TContext.CModel.OperPurpose.OperPurposeDescriptor);
			} else {
				output <- GenerateVerifyPerson(#OBJLOCUTIO-1.TContext.CModel.LinkedInfo.Person,
							0,
							#OBJLOCUTIO-1.TContext.GModel.OperPurpose.OperPurposeDescriptor);
			}
			SetMainAnswer(output);
			$MINDBOARD@fOpen.Strat.SConf <& ['person'];
			if (#OBJLOCUTIO-1.TContext.CModel.LinkedInfo.Person.VerifyType == 'infer') {
				SetActiveExpectation('Conversation');
			} else {
				SetActiveExpectation('Person');
			}
		} else {
			SetMainAnswerTextRandom(". ");
		}
	/**/
	} else {
		if (#OBJLOCUTIO-1.TContext.CModel.LinkedInfo.Person) {
			if (#OBJLOCUTIO-1.TContext.CModel.OperPurpose) {
				if (#OBJLOCUTIO-1.TContext.CModel.LinkedInfo.Person.VerifyType == 'clash') {
					output <- GenerateAskPerson(#OBJLOCUTIO-1.TContext.CModel.OperPurpose.OperPurposeDescriptor);
					SetActiveExpectation('Person');
				} else {
					output <- GenerateVerifyPerson(#OBJLOCUTIO-1.TContext.CModel.LinkedInfo.Person,
								#OBJLOCUTIO-1.TContext.CModel.OperPurpose.OperPurposeDescriptor);
					SetActiveExpectation('Person');
					SetActiveExpectation('Conversation');
				}
			} else {
				if (#OBJLOCUTIO-1.TContext.CModel.LinkedInfo.Person.VerifyType == 'clash') {
					output <- GenerateAskPerson(#OBJLOCUTIO-1.TContext.GModel.OperPurpose.OperPurposeDescriptor);
					SetActiveExpectation('Person');
				} else {
					output <- GenerateVerifyPerson(#OBJLOCUTIO-1.TContext.CModel.LinkedInfo.Person,
								#OBJLOCUTIO-1.TContext.GModel.OperPurpose.OperPurposeDescriptor);
					SetActiveExpectation('Person');
					SetActiveExpectation('Conversation');
				}
			}
			SetMainAnswer(output);
			$MINDBOARD@fOpen.Strat.SConf <& ['person'];
		}
	/**/
	}
    }
)

(ScriboScheme NLG_Verify_Recover: [LOutput]
    ScriboCapture {
        #OBJLOCUTIO-1 =:= (LMode:'confirm_rec')
    }

    ScriboAction {
	string	output;

	if ((#OBJLOCUTIO-1.TContext.CModel.OperPurpose) || (#OBJLOCUTIO-1.TContext.CModel.ActScope)) {
		SetMainAnswerTextRandom("Previamente había indicado que quería ",
					"Recuerdo que indicó que también quería ",
					"Así mismo indicó que quería ");

		cond {
			((#OBJLOCUTIO-1.TContext.CModel.OperPurpose) && (#OBJLOCUTIO-1.TContext.CModel.ActScope)) {
				output <- GenerateAnalyzeOperPurposeActScope(#OBJLOCUTIO-1.TContext.CModel.OperPurpose.OperPurposeDescriptor,
							#OBJLOCUTIO-1.TContext.CModel.ActScope.ActScopeDescriptor);
				SetMainAnswer(output);
				$MINDBOARD@fOpen.Strat.SConf <& ['igoal','cdomain'];
				SetActiveExpectation('Start');
			}
			(#OBJLOCUTIO-1.TContext.CModel.OperPurpose) {
				output <- GenerateAnalyzeOperPurposeActScope(#OBJLOCUTIO-1.TContext.CModel.OperPurpose.OperPurposeDescriptor,
							#OBJLOCUTIO-1.TContext.GModel.ActScope.ActScopeDescriptor);
				SetMainAnswer(output);
				$MINDBOARD@fOpen.Strat.SConf <& ['igoal'];
				SetActiveExpectation('Start');
			}
			(#OBJLOCUTIO-1.TContext.CModel.ActScope) {
				output <- GenerateAnalyzeOperPurposeActScope(#OBJLOCUTIO-1.TContext.GModel.OperPurpose.OperPurposeDescriptor,
							#OBJLOCUTIO-1.TContext.CModel.ActScope.ActScopeDescriptor);
				SetMainAnswer(output);
				$MINDBOARD@fOpen.Strat.SConf <& ['cdomain'];
				SetActiveExpectation('Start');
			}
		} 

		if (#OBJLOCUTIO-1.TContext.CModel.LinkedInfo.Person) {
			if (#OBJLOCUTIO-1.TContext.CModel.OperPurpose) {
				output <- GenerateVerifyPerson(#OBJLOCUTIO-1.TContext.CModel.LinkedInfo.Person,
							0,
							#OBJLOCUTIO-1.TContext.CModel.OperPurpose.OperPurposeDescriptor);
			} else {
				output <- GenerateVerifyPerson(#OBJLOCUTIO-1.TContext.CModel.LinkedInfo.Person,
							0,
							#OBJLOCUTIO-1.TContext.GModel.OperPurpose.OperPurposeDescriptor);
			}
			SetMainAnswer(output);
			$MINDBOARD@fOpen.Strat.SConf <& ['person'];
			if (#OBJLOCUTIO-1.TContext.CModel.LinkedInfo.Person.VerifyType == 'infer') {
				SetActiveExpectation('Conversation');
			} else {
				SetActiveExpectation('Person');
			}
		} else {
			SetMainAnswerTextRandom(". ");
		}
	/*
	} else {
		if (#OBJLOCUTIO-1.TContext.CModel.LinkedInfo.Person) {
			if (#OBJLOCUTIO-1.TContext.CModel.OperPurpose) {
				if (#OBJLOCUTIO-1.TContext.CModel.LinkedInfo.Person.VerifyType == 'clash') {
					output <- GenerateAskPerson(#OBJLOCUTIO-1.TContext.CModel.OperPurpose.OperPurposeDescriptor);
					SetActiveExpectation('Person');
				} else {
					output <- GenerateVerifyPerson(#OBJLOCUTIO-1.TContext.CModel.LinkedInfo.Person,
								#OBJLOCUTIO-1.TContext.CModel.OperPurpose.OperPurposeDescriptor);
					SetActiveExpectation('Person');
					SetActiveExpectation('Conversation');
				}
			} else {
				if (#OBJLOCUTIO-1.TContext.CModel.LinkedInfo.Person.VerifyType == 'clash') {
					output <- GenerateAskPerson(#OBJLOCUTIO-1.TContext.GModel.OperPurpose.OperPurposeDescriptor);
					SetActiveExpectation('Person');
				} else {
					output <- GenerateVerifyPerson(#OBJLOCUTIO-1.TContext.CModel.LinkedInfo.Person,
								#OBJLOCUTIO-1.TContext.GModel.OperPurpose.OperPurposeDescriptor);
					SetActiveExpectation('Person');
					SetActiveExpectation('Conversation');
				}
			}
			SetMainAnswer(output);
			$MINDBOARD@fOpen.Strat.SConf <& ['person'];
		}
	*/
	}
    }
)
