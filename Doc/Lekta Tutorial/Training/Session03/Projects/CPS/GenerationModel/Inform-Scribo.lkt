/*******************************
 ** Scribo / Inform
 *******************************/

/*
(ScriboScheme NLG_Inform_Point: [LOutput]
    ScriboCapture {
        #OBJLOCUTIO-1 =:= (LMode:'inform',TField:'point')
    }

    ScriboAction {

	SetMainAnswer("Muy bien, ");
	switch (#OBJLOCUTIO-1.IContext.TemporalMemory.TemporalData.PersonalRecord.UserData.UserGenre) {
		case 'male' {
			SetMainAnswer("Sr. ");
		}
		case 'female' {
			SetMainAnswer("Sra. ");
		}
	}
	SetMainAnswer(#OBJLOCUTIO-1.IContext.TemporalMemory.TemporalData.PersonalRecord.UserData.UserSurname);
	SetMainAnswer(". ");
	SetMainAnswer("Usted dispone actualmente de ");
	SetMainAnswer(#OBJLOCUTIO-1.IContext.TemporalMemory.TemporalData.PersonalRecord.UserData.UserPoints);
	SetMainAnswer(" puntos. ");
    }
)

(ScriboScheme NLG_Inform_Timetable: [LOutput]
    ScriboCapture {
        #OBJLOCUTIO-1 =:= (LMode:'inform',TField:'timetable-go')
    }

    ScriboAction {
	GlobalDate 		date;
	Itinerary 		route;
	TimetableInfoGo	tti;
	TimetableData	ttd;
	DataTimetable ttf;
	integer		timeformat;
	string		HH;
	string		MM;

	date <- #OBJLOCUTIO-1.IContext.ActiveCommand.LinkedInfo.DepartureGlobalDate;
	route <- #OBJLOCUTIO-1.IContext.ActiveCommand.LinkedInfo.Itinerary;

	timeformat <- TimeFormatRandom();

	tti <- #OBJLOCUTIO-1.IContext.TemporalMemory.TemporalData.TimetableInfoGo;
	ttd <- tti.TimetableData;

	SetMainAnswerTextRandom("Muy bien, ",
				"Vale, ",
				"De acuerdo, ");

	SetMainAnswer("para ");
	SetMainAnswer(GlobalDate2String(date));

	SetMainAnswer(", ");
	SetMainAnswer(Itinerary2StringGo(route));

	SetMainAnswer(", ");
	SetMainAnswerTextRandom("he conseguido encontrar ",
				"he localizado ");

	if (tti.TimetableNumb == 1) {
		BatchRecoverPosition(ttd,1,ttf);
		SetMainAnswerTextRandom("tan sólo un vuelo ",
					"únicamente un vuelo ");
		SetMainAnswerTextRandom("que parte a las ",
					"con salida a las ");
		HH <- SubLiteral(ttf.DataTimetableTimeDeparture,1,2);
		MM <- SubLiteral(ttf.DataTimetableTimeDeparture,4,5);
		SetMainAnswer(Time2Text(HH,MM,timeformat));

		SetMainAnswer(" ");

		SetMainAnswerTextRandom("y que llega a las ",
					"y con llegada a las ");

		HH <- SubLiteral(ttf.DataTimetableTimeArrival,1,2);
		MM <- SubLiteral(ttf.DataTimetableTimeArrival,4,5);
		SetMainAnswer(Time2Text(HH,MM,timeformat));

		SetMainAnswer(". ");
	} else {
		SetMainAnswer(tti.TimetableNumb);
		SetMainAnswer(" vuelos. ");

		integer nflight;
		nflight <- 1;
		while (nflight <= tti.TimetableNumb) {
			BatchRecoverPosition(ttd,nflight,ttf);
			cond {
				(nflight == 1) {
					SetMainAnswerTextRandom("El primero ",
							"En primer lugar hay un vuelo que ");
				}
				(nflight == 2) {
					SetMainAnswerTextRandom("El segundo ",
							"En segundo lugar hay un vuelo que ");
				}
				((nflight > 2) && (nflight == tti.TimetableNumb)) {
					SetMainAnswerTextRandom("Y por último hay un vuelo que ",
							"En último lugar hay un vuelo que ");
				}
				default {
					SetMainAnswerTextRandom("A continuación, el siguiente vuelo ",
							"El siguiente vuelo ");
				}
			}

			SetMainAnswerTextRandom("parte a las ",
						"sale a las ");

			HH <- SubLiteral(ttf.DataTimetableTimeDeparture,1,2);
			MM <- SubLiteral(ttf.DataTimetableTimeDeparture,4,5);
			SetMainAnswer(Time2Text(HH,MM,timeformat));

			SetMainAnswer(" ");
	
			SetMainAnswerTextRandom("y llega a las ",
						"llegando a las ");

			HH <- SubLiteral(ttf.DataTimetableTimeArrival,1,2);
			MM <- SubLiteral(ttf.DataTimetableTimeArrival,4,5);
			SetMainAnswer(Time2Text(HH,MM,timeformat));

			SetMainAnswer(". ");
	
			nflight <- nflight + 1;
		}
	}
		

    }
)

(ScriboScheme NLG_Inform_Timetable: [LOutput]
    ScriboCapture {
        #OBJLOCUTIO-1 =:= (LMode:'inform',TField:'timetable-back')
    }

    ScriboAction {
	GlobalDate 		date;
	Itinerary 		route;
	TimetableInfoBack	tti;
	TimetableData	ttd;
	DataTimetable ttf;
	integer		timeformat;
	string		HH;
	string		MM;

	date <- #OBJLOCUTIO-1.IContext.ActiveCommand.LinkedInfo.ReturnGlobalDate;
	route <- #OBJLOCUTIO-1.IContext.ActiveCommand.LinkedInfo.Itinerary;

	timeformat <- TimeFormatRandom();

	tti <- #OBJLOCUTIO-1.IContext.TemporalMemory.TemporalData.TimetableInfoBack;
	ttd <- tti.TimetableData;

	SetMainAnswerTextRandom("Respecto al regreso, ",
				"Para la vuelta, ",
				"Para el vuelo de vuelta, ");

	SetMainAnswer("para ");
	SetMainAnswer(GlobalDate2String(date));

	SetMainAnswer(", ");
	SetMainAnswer(Itinerary2StringBack(route));

	SetMainAnswer(", ");
	SetMainAnswerTextRandom("he conseguido encontrar ",
				"he localizado ");

	if (tti.TimetableNumb == 1) {
		BatchRecoverPosition(ttd,1,ttf);
		SetMainAnswerTextRandom("tan sólo un vuelo ",
					"únicamente un vuelo ");
		SetMainAnswerTextRandom("que parte a las ",
					"con salida a las ");
		HH <- SubLiteral(ttf.DataTimetableTimeDeparture,1,2);
		MM <- SubLiteral(ttf.DataTimetableTimeDeparture,4,5);
		SetMainAnswer(Time2Text(HH,MM,timeformat));

		SetMainAnswer(" ");

		SetMainAnswerTextRandom("y que llega a las ",
					"y con llegada a las ");

		HH <- SubLiteral(ttf.DataTimetableTimeArrival,1,2);
		MM <- SubLiteral(ttf.DataTimetableTimeArrival,4,5);
		SetMainAnswer(Time2Text(HH,MM,timeformat));

		SetMainAnswer(". ");
	} else {
		SetMainAnswer(tti.TimetableNumb);
		SetMainAnswer(" vuelos. ");

		integer nflight;
		nflight <- 1;
		while (nflight <= tti.TimetableNumb) {
			BatchRecoverPosition(ttd,nflight,ttf);
			cond {
				(nflight == 1) {
					SetMainAnswerTextRandom("El primero ",
							"En primer lugar hay un vuelo que ");
				}
				(nflight == 2) {
					SetMainAnswerTextRandom("El segundo ",
							"En segundo lugar hay un vuelo que ");
				}
				((nflight > 2) && (nflight == tti.TimetableNumb)) {
					SetMainAnswerTextRandom("Y por último hay un vuelo que ",
							"En último lugar hay un vuelo que ");
				}
				default {
					SetMainAnswerTextRandom("A continuación, el siguiente vuelo ",
							"El siguiente vuelo ");
				}
			}

			SetMainAnswerTextRandom("parte a las ",
						"sale a las ");

			HH <- SubLiteral(ttf.DataTimetableTimeDeparture,1,2);
			MM <- SubLiteral(ttf.DataTimetableTimeDeparture,4,5);
			SetMainAnswer(Time2Text(HH,MM,timeformat));

			SetMainAnswer(" ");
	
			SetMainAnswerTextRandom("y llega a las ",
						"llegando a las ");

			HH <- SubLiteral(ttf.DataTimetableTimeArrival,1,2);
			MM <- SubLiteral(ttf.DataTimetableTimeArrival,4,5);
			SetMainAnswer(Time2Text(HH,MM,timeformat));

			SetMainAnswer(". ");
	
			nflight <- nflight + 1;
		}
	}
		

    }
)

(ScriboScheme NLG_Inform_Flight: [LOutput]
    ScriboCapture {
        #OBJLOCUTIO-1 =:= (LMode:'inform',TField:'flight-go')
    }

    ScriboAction {
	GlobalDate 		date;
	Itinerary 		route;
	RecordFlightGo	tti;
	FlightData	ttd;
	DataFlight ttf;
	integer		timeformat;
	string		HH;
	string		MM;

	date <- #OBJLOCUTIO-1.IContext.ActiveCommand.LinkedInfo.DepartureGlobalDate;
	route <- #OBJLOCUTIO-1.IContext.ActiveCommand.LinkedInfo.Itinerary;

	timeformat <- TimeFormatRandom();

	tti <- #OBJLOCUTIO-1.IContext.TemporalMemory.TemporalData.RecordFlightGo;
	ttd <- tti.FlightData;

	SetMainAnswerTextRandom("Muy bien, ",
				"Vale, ",
				"De acuerdo, ");

	SetMainAnswer("para ");
	SetMainAnswer(GlobalDate2String(date));

	SetMainAnswer(", ");
	SetMainAnswer(Itinerary2StringGo(route));

	SetMainAnswer(", ");
	SetMainAnswerTextRandom("he conseguido encontrar ",
				"he localizado ");

	if (tti.FlightNumb == 1) {
		BatchRecoverPosition(ttd,1,ttf);
		SetMainAnswerTextRandom("tan sólo un vuelo ",
					"únicamente un vuelo ");
		SetMainAnswerTextRandom("que parte a las ",
					"con salida a las ");
		HH <- SubLiteral(ttf.DataFlightTimeDeparture,1,2);
		MM <- SubLiteral(ttf.DataFlightTimeDeparture,4,5);
		SetMainAnswer(Time2Text(HH,MM,timeformat));

		SetMainAnswer(" ");

		SetMainAnswerTextRandom("y que llega a las ",
					"y con llegada a las ");

		HH <- SubLiteral(ttf.DataFlightTimeArrival,1,2);
		MM <- SubLiteral(ttf.DataFlightTimeArrival,4,5);
		SetMainAnswer(Time2Text(HH,MM,timeformat));

		SetMainAnswer(". ");

		if (ttf.DataFlightTURAvail > 0) {
			SetMainAnswerTextRandom("Ahora mismo quedan ",
				"Por lo que puedo ver hay ",
				"Para este vuelo quedan ");
			if (ttf.DataFlightTURAvail > 9) {
				SetMainAnswerText(" bastantes plazas libres. ");
			} else {
				SetMainAnswerText(" únicamente ");
				SetMainAnswer(ttf.DataFlightTURAvail);
				SetMainAnswerText(" plazas libres. ");
			}
			SetMainAnswerText(" El precio es de ");
			SetMainAnswer(Fare2String(ttf.DataFlightTURFare));
			SetMainAnswer(" cada una. ");
		} else {
			SetMainAnswer("No obstante, no quedan plazas para este vuelo. ");
		}
	} else {
		SetMainAnswer(tti.FlightNumb);
		SetMainAnswer(" vuelos. ");

		integer nflight;
		nflight <- 1;
		while (nflight <= tti.FlightNumb) {
			BatchRecoverPosition(ttd,nflight,ttf);
			cond {
				(nflight == 1) {
					SetMainAnswerTextRandom("El primero ",
							"En primer lugar hay un vuelo que ");
				}
				(nflight == 2) {
					SetMainAnswerTextRandom("El segundo ",
							"En segundo lugar hay un vuelo que ");
				}
				((nflight > 2) && (nflight == tti.FlightNumb)) {
					SetMainAnswerTextRandom("Y por último hay un vuelo que ",
							"En último lugar hay un vuelo que ");
				}
				default {
					SetMainAnswerTextRandom("A continuación, el siguiente vuelo ",
							"El siguiente vuelo ");
				}
			}

			SetMainAnswerTextRandom("parte a las ",
						"sale a las ");

			HH <- SubLiteral(ttf.DataFlightTimeDeparture,1,2);
			MM <- SubLiteral(ttf.DataFlightTimeDeparture,4,5);
			SetMainAnswer(Time2Text(HH,MM,timeformat));

			SetMainAnswer(" ");
	
			SetMainAnswerTextRandom("y llega a las ",
						"llegando a las ");

			HH <- SubLiteral(ttf.DataFlightTimeArrival,1,2);
			MM <- SubLiteral(ttf.DataFlightTimeArrival,4,5);
			SetMainAnswer(Time2Text(HH,MM,timeformat));

			SetMainAnswer(". ");
	
			if (ttf.DataFlightTURAvail > 0) {
				SetMainAnswerTextRandom("Para este vuelo, ahora mismo quedan ",
					"Por lo que puedo ver hay ",
					"Para este vuelo quedan ");
				if (ttf.DataFlightTURAvail > 9) {
					SetMainAnswerText(" bastantes plazas libres. ");
				} else {
					SetMainAnswerText(" únicamente ");
					SetMainAnswer(ttf.DataFlightTURAvail);
					SetMainAnswerText(" plazas libres. ");
				}
				SetMainAnswerText(" El precio es de ");
				SetMainAnswer(Fare2String(ttf.DataFlightTURFare));
				SetMainAnswer(" cada una. ");
			} else {
				SetMainAnswer("No obstante, no quedan plazas para este vuelo. ");
			}

			nflight <- nflight + 1;
		}
	}
		

    }
)

(ScriboScheme NLG_Inform_Flight: [LOutput]
    ScriboCapture {
        #OBJLOCUTIO-1 =:= (LMode:'inform',TField:'flight-back')
    }

    ScriboAction {
	GlobalDate 		date;
	Itinerary 		route;
	RecordFlightBack	tti;
	FlightData	ttd;
	DataFlight ttf;
	integer		timeformat;
	string		HH;
	string		MM;

	date <- #OBJLOCUTIO-1.IContext.ActiveCommand.LinkedInfo.ReturnGlobalDate;
	route <- #OBJLOCUTIO-1.IContext.ActiveCommand.LinkedInfo.Itinerary;

	timeformat <- TimeFormatRandom();

	tti <- #OBJLOCUTIO-1.IContext.TemporalMemory.TemporalData.RecordFlightBack;
	ttd <- tti.FlightData;

	SetMainAnswerTextRandom("Respecto al regreso, ",
				"Para la vuelta, ",
				"Para el vuelo de vuelta, ");

	SetMainAnswer("para ");
	SetMainAnswer(GlobalDate2String(date));

	SetMainAnswer(", ");
	SetMainAnswer(Itinerary2StringBack(route));

	SetMainAnswer(", ");
	SetMainAnswerTextRandom("he conseguido encontrar ",
				"he localizado ");

	if (tti.FlightNumb == 1) {
		BatchRecoverPosition(ttd,1,ttf);
		SetMainAnswerTextRandom("tan sólo un vuelo ",
					"únicamente un vuelo ");
		SetMainAnswerTextRandom("que parte a las ",
					"con salida a las ");
		HH <- SubLiteral(ttf.DataFlightTimeDeparture,1,2);
		MM <- SubLiteral(ttf.DataFlightTimeDeparture,4,5);
		SetMainAnswer(Time2Text(HH,MM,timeformat));

		SetMainAnswer(" ");

		SetMainAnswerTextRandom("y que llega a las ",
					"y con llegada a las ");

		HH <- SubLiteral(ttf.DataFlightTimeArrival,1,2);
		MM <- SubLiteral(ttf.DataFlightTimeArrival,4,5);
		SetMainAnswer(Time2Text(HH,MM,timeformat));

		SetMainAnswer(". ");

		if (ttf.DataFlightTURAvail > 0) {
			SetMainAnswerTextRandom("Ahora mismo quedan ",
				"Por lo que puedo ver hay ",
				"Para este vuelo quedan ");
			if (ttf.DataFlightTURAvail > 9) {
				SetMainAnswerText(" bastantes plazas libres. ");
			} else {
				SetMainAnswerText(" únicamente ");
				SetMainAnswer(ttf.DataFlightTURAvail);
				SetMainAnswerText(" plazas libres. ");
			}
			SetMainAnswerText(" El precio es de ");
			SetMainAnswer(Fare2String(ttf.DataFlightTURFare));
			SetMainAnswer(" cada una. ");
		} else {
			SetMainAnswer("No obstante, no quedan plazas para este vuelo. ");
		}
	} else {
		SetMainAnswer(tti.FlightNumb);
		SetMainAnswer(" vuelos. ");

		integer nflight;
		nflight <- 1;
		while (nflight <= tti.FlightNumb) {
			BatchRecoverPosition(ttd,nflight,ttf);
			cond {
				(nflight == 1) {
					SetMainAnswerTextRandom("El primero ",
							"En primer lugar hay un vuelo que ");
				}
				(nflight == 2) {
					SetMainAnswerTextRandom("El segundo ",
							"En segundo lugar hay un vuelo que ");
				}
				((nflight > 2) && (nflight == tti.FlightNumb)) {
					SetMainAnswerTextRandom("Y por último hay un vuelo que ",
							"En último lugar hay un vuelo que ");
				}
				default {
					SetMainAnswerTextRandom("A continuación, el siguiente vuelo ",
							"El siguiente vuelo ");
				}
			}

			SetMainAnswerTextRandom("parte a las ",
						"sale a las ");

			HH <- SubLiteral(ttf.DataFlightTimeDeparture,1,2);
			MM <- SubLiteral(ttf.DataFlightTimeDeparture,4,5);
			SetMainAnswer(Time2Text(HH,MM,timeformat));

			SetMainAnswer(" ");
	
			SetMainAnswerTextRandom("y llega a las ",
						"llegando a las ");

			HH <- SubLiteral(ttf.DataFlightTimeArrival,1,2);
			MM <- SubLiteral(ttf.DataFlightTimeArrival,4,5);
			SetMainAnswer(Time2Text(HH,MM,timeformat));

			SetMainAnswer(". ");
	
			if (ttf.DataFlightTURAvail > 0) {
				SetMainAnswerTextRandom("Para este vuelo, ahora mismo quedan ",
					"Por lo que puedo ver hay ",
					"Para este vuelo quedan ");
				if (ttf.DataFlightTURAvail > 9) {
					SetMainAnswerText(" bastantes plazas libres. ");
				} else {
					SetMainAnswerText(" únicamente ");
					SetMainAnswer(ttf.DataFlightTURAvail);
					SetMainAnswerText(" plazas libres. ");
				}
				SetMainAnswerText(" El precio es de ");
				SetMainAnswer(Fare2String(ttf.DataFlightTURFare));
				SetMainAnswer(" cada una. ");
			} else {
				SetMainAnswer("No obstante, no quedan plazas para este vuelo. ");
			}

			nflight <- nflight + 1;
		}
	}
    }
)
*/
