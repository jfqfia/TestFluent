/*******************************
 ** WebServiceBackOffice
 *******************************/

PatientInfo	WS_RequestPatientIdentity(PersonalIdentity personalid,string personhaspersonalid)
{
	PatientInfo patientinfo;
	PatientSeq  patientseq;
	AppointInfo appointinfo;
	AppointSeq  appointseq;

	string	wscall;
	string 	wsresponse, wsrest;

	string	wspatient;
	string	wspatientdata,wspatientrest;
	string	wspatientdata_ts, wspatientdata_personalid, wspatientdata_personalid_v1, wspatientdata_personalid_v2,
		wspatientdata_name, wspatientdata_surname1, wspatientdata_surname2,
		wspatientdata_birthdate, wspatientdata_genre, wspatientdata_centre_code;
	string	birthdate_year, birthdate_month, birthdate_day;
	string	wspatientcenter;
	string	wscenter_id, wscenter_type, wscenter_addr, wscenter_zip, wscenter_loc, wscenter_prov,
		wscenter_phone, wscenter_name;
	string 	wspatientappoints, wsappoint, wsappointrest;
	string	wsappoint_ts, wsappoint_date, wsappoint_hour_starting, wsappoint_hour_end, 
		wsappoint_service, wsappoint_doctor_name, wsappoint_doctor_surname1, 
		wsappoint_doctor_surname2;
	string	wsappoint_date_year, wsappoint_date_month, wsappoint_date_day;
	string	wsappoint_hour_starting_hour, wsappoint_hour_starting_minute;
	string	wsappoint_hour_end_hour, wsappoint_hour_end_minute;

	string	wspersonalid,wsname,wssurname,wsgenre,wspoints;

	if (LiteralSize(personhaspersonalid) == 2) {
		wscall <- LiteralConcat('|',personalid.valStr,'|5|');
	} else {
		wscall <- LiteralConcat('|',personalid.valStr,'|1|');
	}

	//SpyMessage("wscall: ",wscall);
	wsresponse <- BackOfficeWebServiceCall('PatientIdentityRequest',wscall);
	//SpyMessage("wsresponse: ",wsresponse);

	if (wsresponse == '|none|') {
		// 1001 -> Patient Not Found
		patientinfo.PatientError.PatientErrorCode <- 1001;
	} else {
		while (LiteralSize(wsresponse) > 1) { 
			PatientData patientdata;

			LiteralBreak(wsresponse,'$',wspatient,wsrest);

			LiteralBreak(wspatient,'|',wspatientdata,wspatientrest);

			LiteralManyBreak(wspatientdata,'^',
					wspatientdata_ts,
					wspatientdata_personalid,
					wspatientdata_personalid_v1,
					wspatientdata_personalid_v2,
					wspatientdata_name,
					wspatientdata_surname1,
					wspatientdata_surname2,
					wspatientdata_birthdate,
					wspatientdata_genre,
					wspatientdata_centre_code);

			patientdata.PatientId.PatientTsId	<- wspatientdata_ts;
			patientdata.PatientId.PatientPersonalIdentity	<- wspatientdata_personalid;
			patientdata.PatientId.PatientPersonalIdentityV1	<- wspatientdata_personalid_v1;
			patientdata.PatientId.PatientPersonalIdentityV2	<- wspatientdata_personalid_v2;

			patientdata.PatientName			<- wspatientdata_name;
			patientdata.PatientSurName1		<- wspatientdata_surname1;
			patientdata.PatientSurName2		<- wspatientdata_surname2;
			patientdata.PatientGenre		<- wspatientdata_genre;

			LiteralBreak(wspatientdata_birthdate,'-',
					birthdate_year,
					wspatientdata_birthdate);
			LiteralBreak(wspatientdata_birthdate,'-',
					birthdate_month,
					wspatientdata_birthdate);
			LiteralBreak(wspatientdata_birthdate,'-',
					birthdate_day,
					wspatientdata_birthdate);
				
			patientdata.PatientBirthGlobalDate.BirthGlobalDatePeriodDay	<- ShapeToInt(birthdate_day);
			patientdata.PatientBirthGlobalDate.BirthGlobalDatePeriodMonth	<- ShapeToInt(birthdate_month);
			patientdata.PatientBirthGlobalDate.BirthGlobalDatePeriodYear	<- ShapeToInt(birthdate_year);

			LiteralBreak(wspatientrest,'|',wspatientcenter,wspatientappoints);

			LiteralManyBreak(wspatientcenter,'^',
					wscenter_id, 
					wscenter_type, 
					wscenter_addr, 
					wscenter_zip, 
					wscenter_loc, 
					wscenter_prov,
					wscenter_phone, 
					wscenter_name);
			patientdata.Center.CenterId	<- wscenter_id;
			patientdata.Center.CenterType	<- wscenter_type;
			patientdata.Center.CenterAddr	<- wscenter_addr;
			patientdata.Center.CenterZip	<- wscenter_zip;
			patientdata.Center.CenterLoc	<- wscenter_loc;
			patientdata.Center.CenterProv	<- wscenter_prov;
			patientdata.Center.CenterPhone	<- wscenter_phone;
			patientdata.Center.CenterName	<- wscenter_name;

			while (LiteralSize(wspatientappoints) > 1) { 
				AppointData appointdata;
				LiteralBreak(wspatientappoints,'|',wsappoint,wsappointrest);

				LiteralManyBreak(wsappoint,'^',
						wsappoint_ts, 
						wsappoint_date, 
						wsappoint_hour_starting, 
						wsappoint_hour_end, 
						wsappoint_service, 
						wsappoint_doctor_name, 
						wsappoint_doctor_surname1, 
						wsappoint_doctor_surname2);

				LiteralManyBreak(wsappoint_date,':',
						wsappoint_date_year,
						wsappoint_date_month,
						wsappoint_date_day);

				LiteralManyBreak(wsappoint_hour_starting,':',
						wsappoint_hour_starting_hour,
						wsappoint_hour_starting_minute);

				LiteralManyBreak(wsappoint_hour_end,':',
						wsappoint_hour_end_hour,
						wsappoint_hour_end_minute);

				appointdata.AppointGlobalDate.AppointPeriodYear	<- ShapeToInt(wsappoint_date_year);
				appointdata.AppointGlobalDate.AppointPeriodMonth	<- ShapeToInt(wsappoint_date_month);
				appointdata.AppointGlobalDate.AppointPeriodDay	<- ShapeToInt(wsappoint_date_day);
				appointdata.AppointGlobalDate.AppointPeriodHourInit	<- ShapeToInt(wsappoint_hour_starting_hour);
				appointdata.AppointGlobalDate.AppointMinInit	<- ShapeToInt(wsappoint_hour_starting_minute);
				appointdata.AppointGlobalDate.AppointPeriodHourEnd	<- ShapeToInt(wsappoint_hour_end_hour);
				appointdata.AppointGlobalDate.AppointMinEnd	<- ShapeToInt(wsappoint_hour_end_minute);

				appointdata.AppointDoctor.DoctorName	<- wsappoint_doctor_name;
				appointdata.AppointDoctor.DoctorSurname1<- wsappoint_doctor_surname1;
				appointdata.AppointDoctor.DoctorSurname2<- wsappoint_doctor_surname2;

				appointdata.AppointService		<- wsappoint_service;

				BatchInsertEnd(appointseq, appointdata);

				wspatientappoints <- wsappointrest;
			}

			appointinfo.AppointSeq <- appointseq;
			appointinfo.AppointNumb <- BatchSize(appointseq);

			patientdata.AppointInfo <- appointinfo;

			BatchInsertEnd(patientseq, patientdata);


			wsresponse <- wsrest;
		}

		patientinfo.PatientSeq <- patientseq;
		patientinfo.PatientNumb <- BatchSize(patientseq);
	}

//	SpyMessage("PatientInfo");
//	SpyMessage(patientinfo);

	return patientinfo;
}

integer	WS_CancelAppointmentRequest(PatientData patientdata,AppointData appointdata)
{
	string	wscall;
	string 	wsresponse;

	string	year;
	string	month;
	string	day;
	string	hour;
	string	minute;

	year <- ShapeToString(appointdata.AppointGlobalDate.AppointPeriodYear);

	if (appointdata.AppointGlobalDate.AppointPeriodMonth < 10) {
		month <- LiteralConcat('0',ShapeToString(appointdata.AppointGlobalDate.AppointPeriodMonth));
	} else {
		month <- ShapeToString(appointdata.AppointGlobalDate.AppointPeriodMonth);
	}

	if (appointdata.AppointGlobalDate.AppointPeriodDay < 10) {
		day <- LiteralConcat('0',ShapeToString(appointdata.AppointGlobalDate.AppointPeriodDay));
	} else {
		day <- ShapeToString(appointdata.AppointGlobalDate.AppointPeriodDay);
	}

	if (appointdata.AppointGlobalDate.AppointPeriodHourInit < 10) {
		hour <- LiteralConcat('0',ShapeToString(appointdata.AppointGlobalDate.AppointPeriodHourInit));
	} else {
		hour <- ShapeToString(appointdata.AppointGlobalDate.AppointPeriodHourInit);
	}

	if (appointdata.AppointGlobalDate.AppointMinInit < 10) {
		minute <- LiteralConcat('0',ShapeToString(appointdata.AppointGlobalDate.AppointMinInit));
	} else {
		minute <- ShapeToString(appointdata.AppointGlobalDate.AppointMinInit);
	}

	wscall <- LiteralConcat('|',
			patientdata.PatientId.PatientTsId,
			'|',
			year,month,day,
			'|',
			hour,':',minute,
			'|',
			appointdata.AppointService,
			'|');

	//SpyMessage("wscall: ",wscall);
	wsresponse <- BackOfficeWebServiceCall('CancelAppointmentRequest',wscall);
	//SpyMessage("wsresponse: ",wsresponse);

	if (wsresponse == '|TRUE|') {
		return 1;
	} else {
		return 0;
	}
}

AvailInfo	WS_AppointmentAvailabilityRequest(TaskLine tline)
{
	AvailInfo	availinfo;
	AppointDoctor	appointdoctor;

	string	wscall;
	string 	wsresponse, wshead, wsavail;
	string  wshead_ts, wshead_service, wshead_doctor_name, wshead_doctor_surname1, wshead_doctor_surname2;
	string	wsavaildata, wsrest, wsavaildatadate, wsavaildatadatename, wsavaildatadatedist, wsavaildataslotseq;
	string	wsavaildatadateyear, wsavaildatadatemonth, wsavaildatadateday;
	string	wsslot, wsslotrest, wsslothourstarting, wsslotminstarting, wsslothourend, wsslotminend;

	string	year;
	string	month;
	string	day;

	integer	try_day;
	integer	found_appoint;

	integer n_year, n_month, n_day;

	if (tline.GModel.LinkedInfo.GlobalDate) {
		n_year 	<- tline.GModel.LinkedInfo.GlobalDate.DRef.AbsPeriodYear;
		n_month	<- tline.GModel.LinkedInfo.GlobalDate.DRef.AbsPeriodMonth;
		n_day 	<- tline.GModel.LinkedInfo.GlobalDate.DRef.AbsPeriodDay;
	} else {
		n_year 	<- tline.CModel.LinkedInfo.GlobalDate.DRef.AbsPeriodYear;
		n_month	<- tline.CModel.LinkedInfo.GlobalDate.DRef.AbsPeriodMonth;
		n_day 	<- tline.CModel.LinkedInfo.GlobalDate.DRef.AbsPeriodDay;
	}

	year <- ShapeToString(n_year);

	if (n_month < 10) {
		month <- LiteralConcat('0',ShapeToString(n_month));
	} else {
		month <- ShapeToString(n_month);
	}

	if (n_day < 10) {
		day <- LiteralConcat('0',ShapeToString(n_day));
	} else {
		day <- ShapeToString(n_day);
	}

	if (PossibleEnfant(tline.GModel.LinkedInfo.Person)) {
		if (tline.GModel.LinkedInfo.Service.VerifyType == 'infer') {
			tline.GModel.LinkedInfo.Service.ServiceId <- 'PED';
		}
	}

	try_day <- 0;
	found_appoint <- 0;

	while ((found_appoint == 0) && (try_day < 10)) {
		wscall <- LiteralConcat('|',
				tline.WData.PatientData.PatientId.PatientTsId,
				'|',
				year,month,day,
				'|',
				tline.GModel.LinkedInfo.Service.ServiceId,
				'|',
				ShapeToString(try_day),
				'|');

		//SpyMessage("wscall: ",wscall);
		wsresponse <- BackOfficeWebServiceCall('AppointmentAvailabilityRequest',wscall);
		//SpyMessage("wsresponse: ",wsresponse);

		LiteralBreak(wsresponse,'|',wshead,wsavail);

		if (LiteralSize(wsavail) > 1) {
			LiteralManyBreak(wshead,'^',
					wshead_ts, 
					wshead_service, 
					wshead_doctor_name, 
					wshead_doctor_surname1, 
					wshead_doctor_surname2);
	
			appointdoctor.DoctorName	<- wshead_doctor_name;
			appointdoctor.DoctorSurname1	<- wshead_doctor_surname1;
			appointdoctor.DoctorSurname2	<- wshead_doctor_surname2;
	
			availinfo.AppointDoctor <- appointdoctor;
			availinfo.AppointService <- wshead_service;
	
			while (LiteralSize(wsavail) > 1) { 
				AvailData availdata;
	
				LiteralBreak(wsavail,'|',wsavaildata,wsrest);
	
				LiteralManyBreak(wsavaildata,'^',
						wsavaildatadate,
						wsavaildatadatename,
						wsavaildatadatedist,
						wsavaildataslotseq);
	
				LiteralManyBreak(wsavaildatadate,':',
						wsavaildatadateyear,
						wsavaildatadatemonth,
						wsavaildatadateday);
	
				availdata.AvailGlobalDate.AbsPeriodYear	<- ShapeToInt(wsavaildatadateyear);
				availdata.AvailGlobalDate.AbsPeriodMonth	<- ShapeToInt(wsavaildatadatemonth);
				availdata.AvailGlobalDate.AbsPeriodDay	<- ShapeToInt(wsavaildatadateday);
				availdata.AvailGlobalDate.Distance	<- ShapeToInt(wsavaildatadatedist);
	
				while (LiteralSize(wsavaildataslotseq) > 1) {
					Slot slot;
	
					LiteralBreak(wsavaildataslotseq,'$',
							wsslot,
							wsslotrest);
	
					LiteralManyBreak(wsslot,':',
							wsslothourstarting,
							wsslotminstarting,
							wsslothourend,
							wsslotminend);
	
					slot.SlotPeriodHourInit	<- ShapeToInt(wsslothourstarting);
					slot.SlotMinInit	<- ShapeToInt(wsslotminstarting);
					slot.SlotPeriodHourEnd	<- ShapeToInt(wsslothourend);
					slot.SlotMinEnd		<- ShapeToInt(wsslotminend);
		
					if (VerifySlot(availdata.AvailGlobalDate,slot,tline.WData.Today) == 1) {
						found_appoint <- 1;
						BatchInsertEnd(availdata.SlotSeq,slot);
					}

					wsavaildataslotseq <- wsslotrest;
				}

				if (found_appoint == 1) {
					availdata.SlotNumb <- BatchSize(availdata.SlotSeq);

					BatchInsertEnd(availinfo.AvailSeq,availdata);
				}

				wsavail <- wsrest;
			}

		}

		if (found_appoint == 0) {
			try_day <- try_day + 1;
		}
	}
	availinfo.AvailNumb <- BatchSize(availinfo.AvailSeq);


	if (found_appoint == 0) {
		tline.GModel.LinkedInfo.Service.ServiceId <- 'PED';

	try_day <- 0;

	while ((found_appoint == 0) && (try_day < 10)) {
		wscall <- LiteralConcat('|',
				tline.WData.PatientData.PatientId.PatientTsId,
				'|',
				year,month,day,
				'|',
				tline.GModel.LinkedInfo.Service.ServiceId,
				'|',
				ShapeToString(try_day),
				'|');

		//SpyMessage("wscall: ",wscall);
		wsresponse <- BackOfficeWebServiceCall('AppointmentAvailabilityRequest',wscall);
		//SpyMessage("wsresponse: ",wsresponse);

		LiteralBreak(wsresponse,'|',wshead,wsavail);

		if (LiteralSize(wsavail) > 1) {
			LiteralManyBreak(wshead,'^',
					wshead_ts, 
					wshead_service, 
					wshead_doctor_name, 
					wshead_doctor_surname1, 
					wshead_doctor_surname2);
	
			appointdoctor.DoctorName	<- wshead_doctor_name;
			appointdoctor.DoctorSurname1	<- wshead_doctor_surname1;
			appointdoctor.DoctorSurname2	<- wshead_doctor_surname2;
	
			availinfo.AppointDoctor <- appointdoctor;
			availinfo.AppointService <- wshead_service;
	
			while (LiteralSize(wsavail) > 1) { 
				AvailData availdata;
	
				LiteralBreak(wsavail,'|',wsavaildata,wsrest);
	
				LiteralManyBreak(wsavaildata,'^',
						wsavaildatadate,
						wsavaildatadatename,
						wsavaildatadatedist,
						wsavaildataslotseq);
	
				LiteralManyBreak(wsavaildatadate,':',
						wsavaildatadateyear,
						wsavaildatadatemonth,
						wsavaildatadateday);
	
				availdata.AvailGlobalDate.AbsPeriodYear	<- ShapeToInt(wsavaildatadateyear);
				availdata.AvailGlobalDate.AbsPeriodMonth	<- ShapeToInt(wsavaildatadatemonth);
				availdata.AvailGlobalDate.AbsPeriodDay	<- ShapeToInt(wsavaildatadateday);
				availdata.AvailGlobalDate.Distance	<- ShapeToInt(wsavaildatadatedist);
	
				while (LiteralSize(wsavaildataslotseq) > 1) {
					Slot slot;
	
					LiteralBreak(wsavaildataslotseq,'$',
							wsslot,
							wsslotrest);
	
					LiteralManyBreak(wsslot,':',
							wsslothourstarting,
							wsslotminstarting,
							wsslothourend,
							wsslotminend);
	
					slot.SlotPeriodHourInit	<- ShapeToInt(wsslothourstarting);
					slot.SlotMinInit	<- ShapeToInt(wsslotminstarting);
					slot.SlotPeriodHourEnd	<- ShapeToInt(wsslothourend);
					slot.SlotMinEnd		<- ShapeToInt(wsslotminend);
		
					if (VerifySlot(availdata.AvailGlobalDate,slot,tline.WData.Today) == 1) {
						found_appoint <- 1;
						BatchInsertEnd(availdata.SlotSeq,slot);
					}

					wsavaildataslotseq <- wsslotrest;
				}

				if (found_appoint == 1) {
					availdata.SlotNumb <- BatchSize(availdata.SlotSeq);

					BatchInsertEnd(availinfo.AvailSeq,availdata);
				}

				wsavail <- wsrest;
			}

		}

		if (found_appoint == 0) {
			try_day <- try_day + 1;
		}
	}
	availinfo.AvailNumb <- BatchSize(availinfo.AvailSeq);

	}



	if (found_appoint == 0) {
		tline.GModel.LinkedInfo.Service.ServiceId <- 'MED';

	try_day <- 0;

	while ((found_appoint == 0) && (try_day < 10)) {
		wscall <- LiteralConcat('|',
				tline.WData.PatientData.PatientId.PatientTsId,
				'|',
				year,month,day,
				'|',
				tline.GModel.LinkedInfo.Service.ServiceId,
				'|',
				ShapeToString(try_day),
				'|');

		//SpyMessage("wscall: ",wscall);
		wsresponse <- BackOfficeWebServiceCall('AppointmentAvailabilityRequest',wscall);
		//SpyMessage("wsresponse: ",wsresponse);

		LiteralBreak(wsresponse,'|',wshead,wsavail);

		if (LiteralSize(wsavail) > 1) {
			LiteralManyBreak(wshead,'^',
					wshead_ts, 
					wshead_service, 
					wshead_doctor_name, 
					wshead_doctor_surname1, 
					wshead_doctor_surname2);
	
			appointdoctor.DoctorName	<- wshead_doctor_name;
			appointdoctor.DoctorSurname1	<- wshead_doctor_surname1;
			appointdoctor.DoctorSurname2	<- wshead_doctor_surname2;
	
			availinfo.AppointDoctor <- appointdoctor;
			availinfo.AppointService <- wshead_service;
	
			while (LiteralSize(wsavail) > 1) { 
				AvailData availdata;
	
				LiteralBreak(wsavail,'|',wsavaildata,wsrest);
	
				LiteralManyBreak(wsavaildata,'^',
						wsavaildatadate,
						wsavaildatadatename,
						wsavaildatadatedist,
						wsavaildataslotseq);
	
				LiteralManyBreak(wsavaildatadate,':',
						wsavaildatadateyear,
						wsavaildatadatemonth,
						wsavaildatadateday);
	
				availdata.AvailGlobalDate.AbsPeriodYear	<- ShapeToInt(wsavaildatadateyear);
				availdata.AvailGlobalDate.AbsPeriodMonth	<- ShapeToInt(wsavaildatadatemonth);
				availdata.AvailGlobalDate.AbsPeriodDay	<- ShapeToInt(wsavaildatadateday);
				availdata.AvailGlobalDate.Distance	<- ShapeToInt(wsavaildatadatedist);
	
				while (LiteralSize(wsavaildataslotseq) > 1) {
					Slot slot;
	
					LiteralBreak(wsavaildataslotseq,'$',
							wsslot,
							wsslotrest);
	
					LiteralManyBreak(wsslot,':',
							wsslothourstarting,
							wsslotminstarting,
							wsslothourend,
							wsslotminend);
	
					slot.SlotPeriodHourInit	<- ShapeToInt(wsslothourstarting);
					slot.SlotMinInit	<- ShapeToInt(wsslotminstarting);
					slot.SlotPeriodHourEnd	<- ShapeToInt(wsslothourend);
					slot.SlotMinEnd		<- ShapeToInt(wsslotminend);
		
					if (VerifySlot(availdata.AvailGlobalDate,slot,tline.WData.Today) == 1) {
						found_appoint <- 1;
						BatchInsertEnd(availdata.SlotSeq,slot);
					}

					wsavaildataslotseq <- wsslotrest;
				}

				if (found_appoint == 1) {
					availdata.SlotNumb <- BatchSize(availdata.SlotSeq);

					BatchInsertEnd(availinfo.AvailSeq,availdata);
				}

				wsavail <- wsrest;
			}

		}

		if (found_appoint == 0) {
			try_day <- try_day + 1;
		}
	}
	availinfo.AvailNumb <- BatchSize(availinfo.AvailSeq);

	}





	if (found_appoint == 0) {
		// 1001 -> Appointment Not Found
		availinfo.AvailError.AvailErrorCode <- 1001;
	}
	//SpyMessage("AvailInfo:");
	//SpyMessage(availinfo);

	return availinfo;
}

integer		WS_SetAppointmentRequest(TaskLine tline,AvailGlobalDate availdate,Slot slot)
{
	AvailInfo	availinfo;
	AppointDoctor	appointdoctor;

	string	wscall;
	string 	wsresponse;
	string	year, month, day;
	string	hourstarting, minstarting, hourend, minend;

	integer n_year, n_month, n_day;
	n_year <- availdate.AbsPeriodYear;
	n_month <- availdate.AbsPeriodMonth;
	n_day <- availdate.AbsPeriodDay;

	year <- ShapeToString(n_year);

	if (n_month < 10) {
		month <- LiteralConcat('0',ShapeToString(n_month));
	} else {
		month <- ShapeToString(n_month);
	}

	if (n_day < 10) {
		day <- LiteralConcat('0',ShapeToString(n_day));
	} else {
		day <- ShapeToString(n_day);
	}

	if (slot.SlotPeriodHourInit < 10) {
		hourstarting <- LiteralConcat('0',ShapeToString(slot.SlotPeriodHourInit));
	} else {
		hourstarting <- ShapeToString(slot.SlotPeriodHourInit);
	}

	if (slot.SlotMinInit < 10) {
		minstarting <- LiteralConcat('0',ShapeToString(slot.SlotMinInit));
	} else {
		minstarting <- ShapeToString(slot.SlotMinInit);
	}

	if (slot.SlotPeriodHourEnd < 10) {
		hourend <- LiteralConcat('0',ShapeToString(slot.SlotPeriodHourEnd));
	} else {
		hourend <- ShapeToString(slot.SlotPeriodHourEnd);
	}

	if (slot.SlotMinEnd < 10) {
		minend <- LiteralConcat('0',ShapeToString(slot.SlotMinEnd));
	} else {
		minend <- ShapeToString(slot.SlotMinEnd);
	}

		// |415566778899|20070213|13:00|13:15|PED|
	wscall <- LiteralConcat('|',
			tline.WData.PatientData.PatientId.PatientTsId,
			'|',
			year,month,day,
			'|',
			hourstarting,':',minstarting,
			'|',
			hourend,':',minend,
			'|',
			tline.GModel.LinkedInfo.Service.ServiceId,
			'|');

	//SpyMessage("wscall: ",wscall);
	wsresponse <- BackOfficeWebServiceCall('SetAppointmentRequest',wscall);
	//SpyMessage("wsresponse: ",wsresponse);

	if (wsresponse == '|TRUE|') {
		return 1;
	} else {
		return 0;
	}
}
