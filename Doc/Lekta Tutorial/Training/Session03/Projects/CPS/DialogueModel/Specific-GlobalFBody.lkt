/*******************************
 ** Specific / Global / Functions
 *******************************/

TaskLine	AssignDefaultOperPurposeActScope(TaskLine tline)
{
	tline.CModel.OperPurpose.OperPurposeDescriptor <- 'request';
	tline.CModel.ActScope.ActScopeDescriptor <- 'appoint';

	return tline;
}

TaskLine	AssignDefaultOperPurposeFromActScope(TaskLine tline)
{
	ActScopeDescriptor cdomaintype;

	if (tline.GModel.ActScope.ActScopeDescriptor) {
		cdomaintype <- tline.GModel.ActScope.ActScopeDescriptor;
	} else {
		cdomaintype <- tline.CModel.ActScope.ActScopeDescriptor;
	}

	switch (cdomaintype) {
		case 'appoint' {
			tline.CModel.OperPurpose.OperPurposeDescriptor <- 'request';
		}
		case 'timetable' {
			tline.CModel.OperPurpose.OperPurposeDescriptor <- 'request';
		}
	}

	return tline;
}

TaskLine	AssignDefaultActScopeFromOperPurpose(TaskLine tline)
{
	OperPurposeDescriptor igoaltype;

	if (tline.GModel.OperPurpose.OperPurposeDescriptor) {
		igoaltype <- tline.GModel.OperPurpose.OperPurposeDescriptor;
	} else {
		igoaltype <- tline.CModel.OperPurpose.OperPurposeDescriptor;
	}

	switch (igoaltype) {
		case 'cancel' {
			tline.CModel.ActScope.ActScopeDescriptor <- 'appoint';
		}
		case 'consult' {
			tline.CModel.ActScope.ActScopeDescriptor <- 'appoint';
		}
		case 'modify' {
			tline.CModel.ActScope.ActScopeDescriptor <- 'appoint';
		}
		case 'request' {
			tline.CModel.ActScope.ActScopeDescriptor <- 'appoint';
		}
	}

	return tline;
}

TaskLine	AnalyzeLinkedInfo(TaskLine tline)
{
	OperPurposeDescriptor igt;

	if (tline.GModel.OperPurpose.OperPurposeDescriptor) {
		igt <- tline.GModel.OperPurpose.OperPurposeDescriptor;
	} else {
		if (tline.CModel.OperPurpose.OperPurposeDescriptor) {
			igt <- tline.CModel.OperPurpose.OperPurposeDescriptor;
		}
	}

	switch (igt) {
		case 'cancel' {
			//tline <- AnalyzeLinkedInfoPerson(tline);
			tline <- AnalyzeLinkedInfoService(tline);
			tline <- AnalyzeLinkedInfoUserId(tline);
			tline <- AnalyzeLinkedInfoNumber(tline);
		}
		case 'consult' {
			//tline <- AnalyzeLinkedInfoPerson(tline);
			tline <- AnalyzeLinkedInfoService(tline);
			tline <- AnalyzeLinkedInfoUserId(tline);
			tline <- AnalyzeLinkedInfoNumber(tline);
		}
		case 'modify' {
			//tline <- AnalyzeLinkedInfoPerson(tline);
			tline <- AnalyzeLinkedInfoService(tline);
			tline <- AnalyzeLinkedInfoUserId(tline);
			tline <- AnalyzeLinkedInfoNumber(tline);
		}
		case 'request' {
			//tline <- AnalyzeLinkedInfoPerson(tline);
			tline <- AnalyzeLinkedInfoService(tline);
			tline <- AnalyzeLinkedInfoUserId(tline);
			tline <- AnalyzeLinkedInfoNumber(tline);
		}
	}

	Erase(tline.ReceivedCommand.LinkedInfo.LinkedInfoDescriptor);

	return tline;
}

TaskLine	AssignTask(TaskLine tline)
{
	OperPurposeDescriptor igt;
	ActScopeDescriptor cdt;

	if (tline.GModel.OperPurpose.OperPurposeDescriptor) {
		igt <- tline.GModel.OperPurpose.OperPurposeDescriptor;
	} else {
		if (tline.CModel.OperPurpose.OperPurposeDescriptor) {
			igt <- tline.CModel.OperPurpose.OperPurposeDescriptor;
		}
	}

	if (tline.GModel.ActScope.ActScopeDescriptor) {
		cdt <- tline.GModel.ActScope.ActScopeDescriptor;
	} else {
		if (tline.CModel.ActScope.ActScopeDescriptor) {
			cdt <- tline.CModel.ActScope.ActScopeDescriptor;
		}
	}

	switch (igt) {
		case 'cancel' {
			switch (cdt) {
				case 'appoint' {
					tline.ProcessControl.ProcessStage <- 'cancel-appoint';
				}
			}
		}
		case 'consult' {
			switch (cdt) {
				case 'appoint' {
					tline.ProcessControl.ProcessStage <- 'consult-appoint';
				}
			}
		}
		case 'modify' {
			switch (cdt) {
				case 'appoint' {
					tline.ProcessControl.ProcessStage <- 'modify-appoint';
				}
			}
		}
		case 'request' {
			switch (cdt) {
				case 'appoint' {
					tline.ProcessControl.ProcessStage <- 'request-appoint';
				}
			}
		}
	}

	Erase(tline.ReceivedCommand.LinkedInfo.LinkedInfoDescriptor);

	return tline;
}

TaskLine	ExecuteTask(TaskLine tline)
{
	switch (tline.ProcessControl.ProcessStage) {
		case 'cancel-appoint' {
			tline <- ExecuteTaskCancelAppoint(tline);
		}
		case 'consult-appoint' {
			tline <- ExecuteTaskConsultAppoint(tline);
		}
		case 'modify-appoint' {
			tline <- ExecuteTaskModifyAppoint(tline);
		}
		case 'request-appoint' {
			tline <- ExecuteTaskRequestAppoint(tline);
		}
	}

	return tline;
}
