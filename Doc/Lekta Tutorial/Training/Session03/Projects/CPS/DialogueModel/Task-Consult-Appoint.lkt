/*******************************
 ** Task / Consult Appoint
 *******************************/

TaskLine	ExecuteTaskConsultAppoint(TaskLine tline_in)
{
	TaskLine tline_proc;
	integer cycle;
	WStep prev_wprotocol;

	if (!!tline_in.WStep) {
		tline_in.WStep <- 'look-person';
	}

	switch (tline_in.WStep) {
		case 'ask-identity-personalid' {
			tline_in.WStep <- 'look-identity-personalid';
		}
		case 'check-identity-personalid' {
			tline_in.WStep <- 'look-identity-personalid';
		}
		case 'error-identity-personalid' {
			tline_in.WStep <- 'look-identity-personalid';
		}
	}

	if (tline_in.ReceivedCommand.LinkedInfo.Person) {
		tline_in.WStep <- 'look-person';
	}

	tline_proc <- tline_in;
	tline_proc <- LookPerson(tline_proc);
	cycle <- 1;
	while (cycle == 1) {
		prev_wprotocol <- tline_proc.WStep;
		//SpyMessage("=> Protocol: ",tline_proc.WStep);
		switch (tline_proc.WStep) {
			case 'look-person' {
				tline_proc <- LookPerson(tline_proc);
				SetLangExDialStrategy(110);
			}
			case 'ask-person' {
				tline_proc <- AskPerson(tline_proc);
				SetLangExDialStrategy(120);
			}
			case 'check-person' {
				tline_proc <- VerifyPerson(tline_proc);
				SetLangExDialStrategy(130);
			}
			case 'look-identity-personalid' {
				tline_proc <- LookIdentityPersonalId(tline_proc);
				SetLangExDialStrategy(210);
			}
			case 'ask-identity-personalid' {
				tline_proc <- AskIdentityPersonalId(tline_proc);
				SetLangExDialStrategy(220);
			}
			case 'check-identity-personalid' {
				tline_proc <- VerifyIdentityPersonalId(tline_proc);
				SetLangExDialStrategy(230);
			}
			case 'error-identity-personalid' {
				tline_proc <- ErrorIdentityPersonalId(tline_proc);
				SetLangExDialStrategy(240);
			}
			case 'multiple-identity-personalid' {
				tline_proc <- MultipleIdentityPersonalId(tline_proc);
				//SetLangExDialStrategy(240);
			}
			case 'look-multiple-identity-personalid' {
				tline_proc <- LookMultipleIdentityPersonalId(tline_proc);
				//SetLangExDialStrategy(240);
			}
			case 'run-task' {
				tline_proc <- ConsultAppoint(tline_proc);
				SetLangExDialStrategy(540);
			}
			case 'inform-consult-appoint-ok' {
				tline_proc <- InformConsultAppointOk(tline_proc);
				SetLangExDialStrategy(910);
			}
			case 'inform-consult-appoint-no' {
				tline_proc <- InformConsultAppointNo(tline_proc);
				SetLangExDialStrategy(920);
			}
			case 'close' {
				SetOperativeEnding(1040); // Consult Appoint
				tline_proc.WStep <- 'done';
			}
			case 'fail' {
				tline_proc.WStep <- 'fail';
				cycle <- 0;
			}
		}
		if (prev_wprotocol == tline_proc.WStep) {
			cycle <- 0;
		}
	}
	
	return tline_proc;
}

TaskLine	ConsultAppoint(TaskLine tline)
{
	PatientInfo	patientinfo;

	if (tline.WData.PatientData.AppointInfo) {
		if (tline.WData.PatientData.AppointInfo.AppointNumb == 0) {
			tline.WStep <- 'inform-consult-appoint-no';
		} else {
			tline.WStep <- 'inform-consult-appoint-ok';
		}
		return tline;
	}

	patientinfo <- WS_RequestPatientIdentity(tline.GModel.LinkedInfo.UserId.PersonalIdentity,
					tline.GModel.LinkedInfo.Person.PersonHasPersonalId);

	tline.WData.PatientInfo <- patientinfo;

	if (patientinfo.PatientError.PatientErrorCode == 1001) {
		tline.WStep <- 'error-identity-personalid';
	} else {
		if (patientinfo.PatientNumb == 1) {
			BatchRecoverPosition(patientinfo.PatientSeq,
					1,
					tline.WData.PatientData);
			if (tline.GModel.LinkedInfo.Person.PersonDegree == 'self') {
				tline.WData.Speaker <- tline.WData.PatientData;
			}

			if (tline.WData.PatientData.AppointInfo.AppointNumb == 0) {
				tline.WStep <- 'inform-consult-appoint-no';
			} else {
				tline.WStep <- 'inform-consult-appoint-ok';
			}
		} else {
			tline.WStep <- 'multiple-identity-personalid';
		}
	}

	return tline;
}

TaskLine	InformConsultAppointNo(TaskLine tline)
{
	LOutput loutput <- (LMode:'inform',TField:'consult-appoint-no');
	loutput.TContext <- tline;
	BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);

	tline.WStep <- 'close';

	return tline;
}

TaskLine	InformConsultAppointOk(TaskLine tline)
{
	LOutput loutput <- (LMode:'inform',TField:'consult-appoint-ok');
	loutput.TContext <- tline;
	BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);

	tline.WStep <- 'close';

	return tline;
}
