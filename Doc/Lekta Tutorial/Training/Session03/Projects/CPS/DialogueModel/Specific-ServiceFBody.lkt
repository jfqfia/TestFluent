/*******************************
 ** Specific / Global / Functions
 *******************************/

TaskLine	AnalyzeLinkedInfoService(TaskLine tline)
{
	// 	      | RaiseModel | VerifyModel | GroundModel |
	//            -------------------------------------------
	//            |      1     |       1      |      1      | ** No (Verify & Ground)
	//            |      1     |       1      |      0      |
	//            |      1     |       0      |      1      |
	//            |      1     |       0      |      0      |
	//            |      0     |       1      |      1      | ** No (Verify & Ground)
	//            |      0     |       1      |      0      |
	//            |      0     |       0      |      1      |
	//            |      0     |       0      |      0      |
	//            -------------------------------------------
	if (tline.ReceivedCommand.LinkedInfo.Service) {
		if (tline.CModel.LinkedInfo.Service) { 		// 1 1 0
			if (tline.ReceivedCommand.LinkedInfo.Service =:= tline.CModel.LinkedInfo.Service) {
				tline.GModel.LinkedInfo.Service <| tline.CModel.LinkedInfo.Service;
				Erase(tline.CModel.LinkedInfo.Service);
			} else {
				tline.CModel.LinkedInfo.Service <| tline.ReceivedCommand.LinkedInfo.Service;
				Erase(tline.ReceivedCommand.LinkedInfo.Service);
				tline.CModel.LinkedInfo.Service.VerifyType <- 'raise';
			}
		} else { 
			if (tline.GModel.LinkedInfo.Service) { 	// 1 0 1
				if (tline.ReceivedCommand.LinkedInfo.Service =:= tline.GModel.LinkedInfo.Service) {
					tline.GModel.LinkedInfo.Service <| tline.ReceivedCommand.LinkedInfo.Service;
					Erase(tline.ReceivedCommand.LinkedInfo.Service);
				} else {
					// Conflicto R - G
					tline.CModel.LinkedInfo.Service <| tline.ReceivedCommand.LinkedInfo.Service;
					Erase(tline.ReceivedCommand.LinkedInfo.Service);
					Erase(tline.GModel.LinkedInfo.Service);
					tline.CModel.LinkedInfo.Service.VerifyType <- 'clash';
				}
			} else {				// 1 0 0
				tline.CModel.LinkedInfo.Service <- tline.ReceivedCommand.LinkedInfo.Service;
				Erase(tline.ReceivedCommand.LinkedInfo.Service);
				tline.CModel.LinkedInfo.Service.VerifyType <- 'raise';
			}
		}
	} else {
		if (tline.CModel.LinkedInfo.Service) { 		
			if (!!tline.GModel.LinkedInfo.Service) { 	// 0 1 0
				tline.GModel.LinkedInfo.Service <- tline.CModel.LinkedInfo.Service;
				Erase(tline.CModel.LinkedInfo.Service);
			} 
		} else {
			if (!!tline.GModel.LinkedInfo.Service) { 	// 0 0 0
				tline.CModel.LinkedInfo.Service <- DefaultLinkedInfoService();
				tline.CModel.LinkedInfo.Service.VerifyType <- 'infer';
			} 
		}
	}

	return tline;
}

Service		DefaultLinkedInfoService()
{
	return (ServiceId:'MED');
}
