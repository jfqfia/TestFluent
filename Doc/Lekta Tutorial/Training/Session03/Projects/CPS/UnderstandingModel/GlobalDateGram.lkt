/*******************************
 ** Fechas
 *******************************/


/*************************/
/** PeriodYear		**/
/*************************/

/*
(RPeriodYear1 : 
	[PeriodYear -> <lexAuxPrepEN|lexAuxPrepDE|lexAuxPrepDEL|lexAuxPrepSOBRE> Integer/4]
		{ if (IntegerLength(#2.valNum) == 4) {
			^.AbsPeriodYear <- #2.valNum;
		  } else {
			Fail();
		  }
		} )

(RPeriodYear2 : 
	[PeriodYear -> lexAuxPrepEN lexAuxArticleEL Integer/4]
		{ ^.AbsPeriodYear <- #3.valNum; } )

(RPeriodYear3 : 
	[PeriodYear -> lexAuxPrepDEL Integer/4]
		{ ^.AbsPeriodYear <- #2.valNum; } )
*/

(RPeriodYear4 : 
	[PeriodYear -> lexAuxPrepEN? lexAuxArticleEL lexPeriodYear Integer/4]
		{ ^.AbsPeriodYear <- #4.valNum; } )

(RPeriodYear5 : 
	[PeriodYear -> lexAuxPrepEN? lexAuxArticleEL <lexPeriodYear % lexPeriodNext>]
		{ ^.RelPeriodYear <- 1; } )

/*
(RPeriodYear6 : 
	[PeriodYear -> < <lexAuxPrepEN|lexAuxPrepSOBRE> ! <lexAuxArticleEL|lexAuxPrepDEL>>? <lexPeriodYear % Ordinal/4>]
		{ ^.RelPeriodYear <- #4.OrdinalValue; } )

(RPeriodYear7 : 
	[PeriodYear -> < <lexAuxPrepEN|lexAuxPrepSOBRE> ! <lexAuxArticleEL|lexAuxPrepDEL>>? <lexPeriodYear % Terminal/4>]
		{ ^.TerPeriodYear <- #4.TerminalValue; } )
*/

(RPeriodYear8 : 
	[PeriodYear -> lexAuxPrepEN? lexAuxArticleEL <lexPeriodYear % lexPeriodPrev>]
		{ ^.RelPeriodYear <- -1; } )

/*
(RPeriodYear9 : 
	[PeriodYear -> auxPeriodNext Integer/4 lexPeriodYear]
		{ ^.RelPeriodYear <- #2.valNum; } )
*/

(RPeriodYear10 : 
	[PeriodYear -> auxPeriodPrev Integer/4 lexPeriodYear]
		{ ^.RelPeriodYear <- 0 - (#2.valNum); } )

/*************************/
/** PeriodMonth		**/
/*************************/

(RPeriodMonth1 : 
	[PeriodMonth -> <lexAuxPrepDE|lexAuxPrepEN>? lexPeriodPeriodMonthDesc]
		{ ^.AbsPeriodMonth <- #2; } )

(RPeriodMonth2 : 
	[PeriodMonth -> lexAuxPrepEN? lexAuxArticleEL lexPeriodMonth lexAuxPrepDE? lexPeriodPeriodMonthDesc]
		{ ^.AbsPeriodMonth <- #5; } )

(RPeriodMonth3 : 
	[PeriodMonth -> auxPeriodRelative <lexPeriodMonth lexAuxPrepDE>? lexPeriodPeriodMonthDesc]
		{ ^.RelPos <- #1;
		  ^.AbsPeriodMonth <- #4; } )

/*
(RPeriodMonth1 : 
	[PeriodMonth -> lexAuxPrepEN lexAuxArticleEL? lexPeriodMonth lexAuxPrepDE? Integer/4]
		{ ^.AbsPeriodMonth <- #5.valNum; } )
*/

(RPeriodMonth5 : 
	[PeriodMonth -> <lexAuxPrepEN|lexAuxPrepPARA> <lexAuxPrepDEL|lexAuxArticleEL> <lexPeriodMonth % lexPeriodNext>]
		{ ^.RelPeriodMonth <- 1; } )

(RPeriodMonth6 : 
	[PeriodMonth -> auxPeriodRelative <lexPeriodMonth % lexPeriodNext>]
		{ ^.RelPos <- #1;
		  ^.RelPeriodMonth <- 1; } )

(RPeriodMonth6 : 
	[PeriodMonth -> lexAuxPrepEN? lexAuxArticleEL <lexPeriodMonth % lexPeriodPrev>]
		{ ^.RelPeriodMonth <- -1; } )

/*
(RPeriodMonth7 : 
	[PeriodMonth -> < <lexAuxPrepEN|lexAuxPrepSOBRE> ! <lexAuxArticleEL|lexAuxPrepDEL>>? <lexPeriodMonth % Ordinal/4>]
		{ ^.RelPeriodMonth <- #4.OrdinalValue; } )

(RPeriodMonth8 : 
	[PeriodMonth -> < <lexAuxPrepEN|lexAuxPrepSOBRE> ! <lexAuxArticleEL|lexAuxPrepDEL>>? <lexPeriodMonth % Terminal/4>]
		{ ^.TerPeriodMonth <- #4.TerminalValue; } )
*/

(RPeriodMonth9 : 
	[PeriodMonth -> <lexAuxPrepPARA|lexAuxPrepDE>? auxPeriodNext Integer/4 lexPeriodMonth]
		{ ^.RelPeriodMonth <- #3.valNum; } )

(RPeriodMonth10 : 
	[PeriodMonth -> auxPeriodPrev Integer/4 lexPeriodMonth]
		{ ^.RelPeriodMonth <- 0 - (#2.valNum); } )

/*************************/
/** PeriodWeek		**/
/*************************/

(RPeriodWeek1 : 
	[PeriodWeek -> <lexAuxPrepDE|lexAuxPrepEN|lexAuxPrepSOBRE|lexAuxPrepPARA>? lexAuxArticleLA <lexPeriodWeek % lexPeriodNext>]
		{ ^.RelPeriodWeek <- 1; } )

(RPeriodWeek2 : 
	[PeriodWeek -> <lexAuxPrepPARA|lexAuxPrepDE>? auxPeriodNext Integer/4 lexPeriodWeek]
		{ ^.RelPeriodWeek <- #3.valNum; } )

(RPeriodWeek3 : 
	[PeriodWeek -> auxPeriodRelative lexAuxArticleLA <lexPeriodWeek % lexPeriodNext>]
		{ ^.RelPos <- #1;
		  ^.RelPeriodWeek <- 1; } )

/*
(RPeriodWeek2 : 
	[PeriodWeek -> < <lexAuxPrepDE|lexAuxPrepEN|lexAuxPrepSOBRE> ! lexAuxArticleLA>? <lexPeriodWeek % lexPeriodPrev>]
		{ ^.RelPeriodWeek <- -1; } )
*/

(RPeriodWeek4 : 
	[PeriodWeek -> auxPeriodPrev Integer/4 lexPeriodWeek]
		{ ^.RelPeriodWeek <- 0 - (#2.valNum); } )

/*
(RPeriodWeek5 : 
	[PeriodWeek -> < <lexAuxPrepDE|lexAuxPrepEN|lexAuxPrepSOBRE> ! lexAuxArticleLA>? <lexPeriodWeek % Ordinal/4>]
		{ ^.RelPeriodWeek <- #4.OrdinalValue; } )

(RPeriodWeek6 : 
	[PeriodWeek -> < <lexAuxPrepDE|lexAuxPrepEN|lexAuxPrepSOBRE> ! lexAuxArticleLA>? <lexPeriodWeek % Terminal/4>]
		{ ^.TerPeriodWeek <- #4.TerminalValue; } )
*/

/*************************/
/** PeriodDay			**/
/*************************/

(RPeriodDay1 : 
	[PeriodDay -> < <lexAuxPrepEN|lexAuxPrepSOBRE|lexAuxPrepPARA|lexAuxPrepDEL> ! lexAuxArticleEL>? lexPeriodPeriodDayDesc]
		{ ^.PeriodWeekPeriodDay <- #3; } )

(RPeriodDay2 : 
	[PeriodDay -> auxPeriodRelative lexPeriodPeriodDayDesc]
		{ ^.RelPos <- #1;
		  ^.PeriodWeekPeriodDay <- #2; } )

(RPeriodDay3 : 
	[PeriodDay -> <lexAuxPrepEN|lexAuxPrepSOBRE|lexAuxPrepPARA>? lexAuxArticleEL <lexPeriodDay % lexPeriodNext>]
		{ ^.RelPos <- 1; } )

(RPeriodDay4 : 
	[PeriodDay -> <lexAuxPrepEN|lexAuxPrepSOBRE|lexAuxPrepPARA>? lexAuxArticleEL <lexPeriodDay % lexPeriodPrev>]
		{ ^.RelPos <- -1; } )

/*
(RPeriodDay1 : 
	[PeriodDay -> < <lexAuxPrepEN|lexAuxPrepSOBRE> ! lexAuxArticleEL>? lexPeriodDay? lexPeriodPeriodDayDesc]
		{ ^.PeriodWeekPeriodDay <- #4; } )
*/

!PRS(RPeriodDay5 : 
	[PeriodDay -> <lexAuxPrepEN|lexAuxPrepSOBRE|lexAuxPrepPARA>? <lexAuxPrepDEL|lexAuxArticleEL> lexPeriodDay numInteger]
		{ if ((#4 < 1) || (#4 > 31)) {
			Fail();
		  } else {
			^.AbsPeriodDay <- #4;
		  } } )

(RPeriodDay6 : 
	[PeriodDay -> <lexAuxPrepEN|lexAuxPrepSOBRE|lexAuxPrepPARA>? <lexAuxPrepDEL|lexAuxArticleEL> lexPeriodDay lexPeriodDayVal]
		{ ^.AbsPeriodDay <- #4; } )

(RPeriodDay7 : 
	[PeriodDay -> auxPeriodRelative lexPeriodDay? lexPeriodDayVal]
		{ ^.RelPos <- #1;
		  ^.AbsPeriodDay <- #3; } )

/*
(RPeriodDay4 : 
	[PeriodDay -> < <lexAuxPrepEN|lexAuxPrepSOBRE|lexAuxPrepPARA|lexAuxPrepDEL> ! lexAuxArticleEL>? lexPeriodDay? lexPeriodPeriodDayDesc lexPeriodDay? lexPeriodDayVal]
		{ ^.PeriodWeekPeriodDay <- #4;
		  ^.AbsPeriodDay <- #6; } )
*/

(RPeriodDay8 : 
	[PeriodDay -> < <lexAuxPrepEN|lexAuxPrepSOBRE|lexAuxPrepPARA|lexAuxPrepDEL> ! lexAuxArticleEL>? lexPeriodPeriodDayDesc lexPeriodDay? lexPeriodDayVal]
		{ ^.PeriodWeekPeriodDay <- #3;
		  ^.AbsPeriodDay <- #5; } )

(RPeriodDay9 : 
	[PeriodDay -> auxPeriodRelative lexPeriodPeriodDayDesc lexPeriodDay? lexPeriodDayVal]
		{ ^.RelPos <- #1;
		  ^.PeriodWeekPeriodDay <- #2;
		  ^.AbsPeriodDay <- #4; } )

(RPeriodDay11 : 
	[PeriodDay -> <lexAuxPrepPARA|lexAuxPrepDE>? lexPeriodPeriodDayRelative]
		{ ^.PeriodPeriodDayRelative <- #2; } )

(RPeriodDay12 : 
	[PeriodDay -> auxPeriodRelative lexPeriodPeriodDayRelative]
		{ ^.RelPos <- #1;
		  ^.PeriodPeriodDayRelative <- #2; } )

(RPeriodDay14 : 
	[PeriodDay -> <lexAuxPrepPARA|lexAuxPrepDE>? auxPeriodNext Integer/4 lexPeriodDay]
		{ ^.PeriodPeriodDayRelative <- #3.valNum; } )

/*
(RPeriodDay6 : 
	[PeriodDay -> auxPeriodPrev Integer/4 lexPeriodDay]
		{ ^.PeriodPeriodDayRelative <- 0 - (#2.valNum); } )

(RPeriodDay7 : 
	[PeriodDay -> < <lexAuxPrepEN|lexAuxPrepSOBRE> ! <lexAuxArticleEL|lexAuxPrepDEL>>? <lexPeriodDay % Ordinal/4>]
		{ ^.PeriodPeriodDayRelative <- #4.OrdinalValue; } )
*/

/*************************/
/** PeriodDaySection		**/
/*************************/

(RPeriodDaySection1 : 
	[PeriodDaySection -> lexPeriodDaySection]
		{ ^.AbsPeriodDaySection <- #1; } )

(RPeriodDaySection2 : 
	[PeriodDaySection -> auxPeriodRelative lexPeriodDaySection]
		{ ^.RelPos <- #1;
		  ^.AbsPeriodDaySection <- #2; } )

(RPeriodDayToday1 : 
	[PeriodDayToday -> <lexAuxPrepPARA|lexAuxPrepDE>? lexPeriodDayToday]
		{ ^.AbsPeriodDaySection <- #2; } )

(RPeriodDayToday2 : 
	[PeriodDayToday -> auxPeriodRelative lexPeriodDayToday]
		{ ^.RelPos <- #1;
		  ^.AbsPeriodDaySection <- #2; } )

/*************************/
/** Time		**/
/*************************/

(RTime1 : 
	[Time -> < <lexAuxPrepA|lexAuxPrepSOBRE|lexAuxPrepPARA|lexAuxPrepDE>? <lexAuxArticleLA|lexAuxArticleLAS>> lexPeriodHourVal lexPeriodDaySection?]
		{ ^.PeriodHour <- #3;
		  ^.PeriodMinute <- 0; 
		  //		  SpyMessage(" lexPeriodHourVal: ",#3);
		  //		  SpyMessage(" lexPeriodDaySection: ",#4);
		  switch (#4) {
			case 'noon' {
			    //SpyMessage("  => Mediodia");
			    if (#3 < 5) {
				^.PeriodHour <- #3 + 12;
			    }
			}
			case 'afternoon' {
			    //SpyMessage("  => Tarde");
				^.PeriodHour <- #3 + 12;
			}
			case 'evening' {
			    //SpyMessage("  => Tarde");
			    if (#3 > 5) {
				^.PeriodHour <- #3 + 12;
			    }
			}
		  }
		} )

(RTime2 : 
	[Time -> auxPeriodRelative <lexAuxArticleLA|lexAuxArticleLAS> lexPeriodHourVal lexPeriodDaySection?]
		{ ^.RelPos <- #1;
		  ^.PeriodHour <- #3;
		  ^.PeriodMinute <- 0; 
		  //		  SpyMessage(" lexPeriodHourVal: ",#3);
		  //		  SpyMessage(" lexPeriodDaySection: ",#4);
		  switch (#4) {
			case 'noon' {
			    //SpyMessage("  => Mediodia");
			    if (#3 < 5) {
				^.PeriodHour <- #3 + 12;
			    }
			}
			case 'afternoon' {
			    //SpyMessage("  => Tarde");
				^.PeriodHour <- #3 + 12;
			}
			case 'evening' {
			    //SpyMessage("  => Tarde");
			    if (#3 > 5) {
				^.PeriodHour <- #3 + 12;
			    }
			}
		  }
		} )

(RTime4 : 
	[Time -> < <lexAuxPrepA|lexAuxPrepSOBRE|lexAuxPrepPARA|lexAuxPrepDE>? <lexAuxArticleLA|lexAuxArticleLAS>> lexPeriodHourVal lexPeriodHour]
		{ ^.PeriodHour <- #3;
		  ^.PeriodMinute <- 0; } )

(RTime5 : 
	[Time -> auxPeriodRelative <lexAuxArticleLA|lexAuxArticleLAS> lexPeriodHourVal lexPeriodHour]
		{ ^.RelPos <- #1;
		  ^.PeriodHour <- #3;
		  ^.PeriodMinute <- 0; } )

(RTime7 : 
	[Time -> < <lexAuxPrepA|lexAuxPrepSOBRE|lexAuxPrepPARA|lexAuxPrepDE>? <lexAuxArticleLA|lexAuxArticleLAS>> lexPeriodHourVal lexPeriodHour? lexPeriodQuarter lexPeriodMinute? lexPeriodDaySection?]
		{ ^.PeriodHour <- #3; 
		  ^.PeriodMinute <- #5;
		  switch (#7) {
			case 'noon' {
			    //SpyMessage("  => Mediodia");
			    if (#3 < 5) {
				^.PeriodHour <- #3 + 12;
			    }
			}
			case 'afternoon' {
			    //SpyMessage("  => Tarde");
				^.PeriodHour <- #3 + 12;
			}
			case 'evening' {
			    //SpyMessage("  => Tarde");
			    if (#3 > 5) {
				^.PeriodHour <- #3 + 12;
			    }
			}
		  }
		} )

(RTime8 : 
	[Time -> auxPeriodRelative <lexAuxArticleLA|lexAuxArticleLAS> lexPeriodHourVal lexPeriodHour? lexPeriodQuarter lexPeriodMinute? lexPeriodDaySection?]
		{ ^.RelPos <- #1;
		  ^.PeriodHour <- #3; 
		  ^.PeriodMinute <- #5;
		  switch (#7) {
			case 'noon' {
			    //SpyMessage("  => Mediodia");
			    if (#3 < 5) {
				^.PeriodHour <- #3 + 12;
			    }
			}
			case 'afternoon' {
			    //SpyMessage("  => Tarde");
				^.PeriodHour <- #3 + 12;
			}
			case 'evening' {
			    //SpyMessage("  => Tarde");
			    if (#3 > 5) {
				^.PeriodHour <- #3 + 12;
			    }
			}
		  }
		} )

!PRS(RTime10 : 
	[Time -> < <lexAuxPrepA|lexAuxPrepSOBRE|lexAuxPrepPARA|lexAuxPrepDE> ! <lexAuxArticleLA|lexAuxArticleLAS>>? numInteger lexPeriodHour?]
		{ ^.PeriodHour <- #3; 
		  ^.PeriodMinute <- 0; } )

!PRS(RTime11 : 
	[Time -> auxPeriodRelative <lexAuxArticleLA|lexAuxArticleLAS>? numInteger lexPeriodHour?]
		{ ^.RelPos <- #1;
		  ^.PeriodHour <- #3; 
		  ^.PeriodMinute <- 0; } )

/*
(RTime5 : 
	[Time -> < <lexAuxPrepA|lexAuxPrepSOBRE> ! <lexAuxArticleLA|lexAuxArticleLAS>> Integer/4 Integer/4]
		{ ^.PeriodHour <- #3.valNum; 
		  ^.PeriodMinute <- #4.valNum; } )
*/

(RTime13 : 
	[Time -> < <lexAuxPrepA|lexAuxPrepSOBRE|lexAuxPrepPARA|lexAuxPrepDE>? <lexAuxArticleLA|lexAuxArticleLAS>> lexPeriodHourVal lexPeriodHour? lexZero lexZero]
		{ ^.PeriodHour <- #3; 
		  ^.PeriodMinute <- 0; } )

(RTime14 : 
	[Time -> auxPeriodRelative <lexAuxArticleLA|lexAuxArticleLAS> lexPeriodHourVal lexPeriodHour? lexZero lexZero]
		{ ^.RelPos <- #1;
		  ^.PeriodHour <- #3; 
		  ^.PeriodMinute <- 0; } )

(RTime16 : 
	[Time -> < <lexAuxPrepA|lexAuxPrepSOBRE|lexAuxPrepPARA|lexAuxPrepDE>? <lexAuxArticleLA|lexAuxArticleLAS>> lexPeriodHourVal lexPeriodHour? lexZero lexNumberUnits]
		{ ^.PeriodHour <- #3; 
		  ^.PeriodMinute <- #6.valNum; } )

(RTime17 : 
	[Time -> auxPeriodRelative <lexAuxArticleLA|lexAuxArticleLAS> lexPeriodHourVal lexPeriodHour? lexZero lexNumberUnits]
		{ ^.RelPos <- #1;
		  ^.PeriodHour <- #3; 
		  ^.PeriodMinute <- #6.valNum; } )

/*
(RTime8 : 
	[Time -> < <lexAuxPrepA|lexAuxPrepSOBRE|lexAuxPrepPARA|lexAuxPrepDE> ! <lexAuxArticleLA|lexAuxArticleLAS>>? lexPeriodHourVal lexPeriodHour? lexPeriodQuarter lexPeriodDaySection?]
		{ ^.PeriodHour <- #3;
		  ^.PeriodMinute <- #5; } )
*/

!PRS(RTime19 : 
	[Time -> < <lexAuxPrepA|lexAuxPrepSOBRE|lexAuxPrepPARA|lexAuxPrepDE> ! <lexAuxArticleLA|lexAuxArticleLAS>>? numInteger lexPeriodHour? numInteger lexPeriodMinute?]
		{ ^.PeriodHour <- #3; 
		  ^.PeriodMinute <- #5; } )

!PRS(RTime20 : 
	[Time -> auxPeriodRelative <lexAuxArticleLA|lexAuxArticleLAS>? numInteger lexPeriodHour? numInteger lexPeriodMinute?]
		{ ^.RelPos <- #1;
		  ^.PeriodHour <- #3; 
		  ^.PeriodMinute <- #5; } )

!PRS(RTime22 : 
	[Time -> << lexAuxPrepA|lexAuxPrepSOBRE|lexAuxPrepPARA|lexAuxPrepDE> ! <lexAuxArticleLA|lexAuxArticleLAS>>? numInteger punctColon numInteger]
		{ ^.PeriodHour <- #3; 
		  ^.PeriodMinute <- #5; } )

!PRS(RTime23 : 
	[Time -> auxPeriodRelative <lexAuxArticleLA|lexAuxArticleLAS>? numInteger punctColon numInteger]
		{ ^.RelPos <- #1;
		  ^.PeriodHour <- #3; 
		  ^.PeriodMinute <- #5; } )

/*************************/
/** PeriodRelative		**/
/*************************/

(RPeriodRelative1 : 
	[PeriodRelative -> lexAuxPrepPARA? auxPeriodRelative]
		{ ^.Time.RelPos <- #2; } )

/*************************/
/** GlobalDate		**/
/*************************/



/*
(RGlobalDate1 : 
	[GlobalDate -> PeriodYear]
		{ ^.PeriodYear <- #1; } )
*/

!PRS(RGlobalDate2 : 
	[GlobalDate -> PeriodMonth]
		{ ^.PeriodMonth <- #1; } )

!PRS(RGlobalDate3 : 
	[GlobalDate -> PeriodWeek]
		{ ^.PeriodWeek <- #1; } )

!PRS(RGlobalDate4 : 
	[GlobalDate -> PeriodDay]
		{ ^.PeriodDay <- #1; } )

!PRS(RGlobalDate5 : 
	[GlobalDate -> PeriodDaySection]
		{ ^.PeriodDaySection <- #1; } )

(RGlobalDate6 : 
	[GlobalDate -> PeriodDayToday]
		{ ^.PeriodDaySection <- #1; 
		  ^.PeriodDay.PeriodPeriodDayRelative <- 0;} )

!PRS(RGlobalDate7 : 
	[GlobalDate -> Time]
		{ ^.Time <- #1; } )

(RGlobalDate7x : 
	[GlobalDate -> PeriodRelative]
		{ ^ <- #1; } )

(RGlobalDate8 : 
	[GlobalDate/1 -> <lexAuxPrepEN|lexAuxPrepSOBRE|lexAuxPrepPARA>? <lexAuxPrepDEL|lexAuxArticleEL> lexPeriodDay? lexPeriodDayVal lexAuxPrepDE lexPeriodPeriodMonthDesc]
                { if (((#6 == 2) && (#4 > 29)) || (((#6 == 4) || (#6 == 6) || (#6 == 9) || (#6 == 11)) && (#4 > 30))) {
		      Fail();
		  } else {
		      ^.PeriodDay.AbsPeriodDay <- #4;
		      ^.PeriodMonth.AbsPeriodMonth <- #6;
		  } } )

(RGlobalDate9 : 
	[GlobalDate/1 -> auxPeriodRelative lexPeriodDay? lexPeriodDayVal lexAuxPrepDE lexPeriodPeriodMonthDesc]
                { if (((#5 == 2) && (#3 > 29)) || (((#5 == 4) || (#5 == 6) || (#5 == 9) || (#5 == 11)) && (#3 > 30))) {
		      Fail();
		  } else {
		      ^.RelPos <- #1;
		      ^.PeriodDay.AbsPeriodDay <- #3;
		      ^.PeriodMonth.AbsPeriodMonth <- #5;
		  } } )

!PRS(RGlobalDate9x : 
	[GlobalDate/1 -> <lexAuxPrepEN|lexAuxPrepSOBRE|lexAuxPrepPARA>? <lexAuxPrepDEL|lexAuxArticleEL> lexPeriodDay? numInteger lexAuxPrepDE lexPeriodPeriodMonthDesc]
                { if (((#6 == 2) && (#4 > 29)) || (((#6 == 4) || (#6 == 6) || (#6 == 9) || (#6 == 11)) && (#4 > 30))) {
		      Fail();
		  } else {
		      ^.PeriodDay.AbsPeriodDay <- #4;
		      ^.PeriodMonth.AbsPeriodMonth <- #6;
		  } } )

!ASR(RGlobalDate10 : 
     [GlobalDate -> <PeriodDay? % <PeriodMonth|PeriodWeek|PeriodDaySection|Time>?>] )

!ASR(RGlobalDate11 : 
     [GlobalDate -> <PeriodDayToday % Time>] )

/*
(RGlobalDate8 : 
	[GlobalDate/1 -> <lexAuxArticleEL|lexAuxPrepDEL>? Integer/4 <lexAuxPrepDE|lexAuxPrepDEL>? GlobalDate]
		{ ^ <- #4;
		  ^.PeriodDay.AbsPeriodDay <- #2.valNum; } )

(RGlobalDate8 : 
	[GlobalDate/1 -> GlobalDate lexAuxArticleEL Integer/4]
		{ ^ <- #1;
		  ^.PeriodDay.AbsPeriodDay <- #3.valNum; } )

(RGlobalDate11 : 
	[GlobalDate/1 -> <lexAuxArticleEL|lexAuxPrepDEL>? lexPeriodDay? lexPeriodDayVal <lexAuxPrepDE|lexAuxPrepDEL>? lexPeriodPeriodMonthDesc <lexAuxPrepDE|lexAuxPrepDEL> Integer]
		{ ^.PeriodMonth.AbsPeriodMonth <- #5;
		  ^.PeriodDay.AbsPeriodDay <- #3; 
		  ^.PeriodYear.AbsPeriodYear <- #7.valNum; } )

(RGlobalDate12 : 
	[GlobalDate/1 -> <lexAuxArticleEL|lexAuxPrepDEL>? lexPeriodDay? lexPeriodDayVal <lexAuxPrepDE|lexAuxPrepDEL>? Integer <lexAuxPrepDE|lexAuxPrepDEL> Integer]
		{ ^.PeriodMonth.AbsPeriodMonth <- #5.valNum;
		  ^.PeriodDay.AbsPeriodDay <- #3; 
		  ^.PeriodYear.AbsPeriodYear <- #7.valNum; } )

(RGlobalDate9 : 
	[GlobalDate/1 -> lexAuxPrepEN Integer/4 PeriodYear]
		{ if ((#2.valNum < 1) || (#2.valNum > 12)) {
			Fail(); 
		  } else {
			^.PeriodMonth.AbsPeriodMonth <- #2.valNum;
			^.PeriodYear  <- #3; 
		  } } )
*/

!PRS(RGlobalDate12 : 
	[GlobalDate/1 -> Integer/4 punctBar Integer/4]
		{ ^.PeriodDay.AbsPeriodDay <- #1.valNum;
		  ^.PeriodMonth.AbsPeriodMonth <- #3.valNum; } )

!PRS(RGlobalDate13 : 
	[GlobalDate/1 -> auxPeriodRelative Integer/4 punctBar Integer/4]
		{ ^.RelPos <- #1;
		  ^.PeriodDay.AbsPeriodDay <- #2.valNum;
		  ^.PeriodMonth.AbsPeriodMonth <- #4.valNum; } )

/*!PRS(RGlobalDate14 : 
	[GlobalDate/1 -> Integer/4 punctBar Integer/4 punctBar Integer/4]
		{ ^.PeriodDay.AbsPeriodDay <- #1.valNum;
		  ^.PeriodMonth.AbsPeriodMonth <- #3.valNum;
		  ^.PeriodYear.AbsPeriodYear <- #5.valNum; } )

!PRS(RGlobalDate15 : 
	[GlobalDate/2 -> GlobalDate/2 <punctComma|punctDot>? GlobalDate/1]
		{ ^ <- #1; ^ <| #3; } )
*/

!ASR(RGlobalDate_Asr_Root :
	[S -> NS_B GlobalDateDenialASR NS_E] )

!ASR(RGlobalDateDenialASR1 : 
	[GlobalDateDenialASR -> ConversationList? GlobalDateDenial ConversationList?] )

!ASR(RGlobalDateDenial1 : 
	[GlobalDateDenial -> GlobalDate] )

!ASR(RGlobalDateDenial2 : 
	[GlobalDateDenial -> lexDenial GlobalDate lexDenial? GlobalDate lexDenial?] )

!ASR(RGlobalDateDenial3 : 
	[GlobalDateDenial -> GlobalDate lexDenial GlobalDate lexDenial?] )

!ASR(RGlobalDateDenial4 : 
	[GlobalDateDenial -> GlobalDate GlobalDate lexDenial] )
