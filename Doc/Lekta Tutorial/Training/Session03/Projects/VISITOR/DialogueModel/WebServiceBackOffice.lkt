/*******************************
 ** WebServiceBackOffice
 *******************************/

PersonalRecord	WS_RequestPersonalRecord(UserPersonalId personalid) 
{
	PersonalRecord userinfo;

	string 	wsresponse;
	string	wspersonalid,wsname,wssurname,wsgenre,wspoints;

	wsresponse = BackOfficeWebServiceCall('PersonalRecordRequest',personalid);

	if (wsresponse == '||||||') {
		// 1001 -> User Not Found
		userinfo.UserError =
			( UserErrorCode : 1001 );
	} else {
		LiteralManyBreak(wsresponse,'|',wspersonalid,wsname,wssurname,wsgenre,wspoints);
		if (wsgenre == 'm') {
			userinfo.UserData.UserGenre = 'male';
		} else {
			if (wsgenre == 'f') {
				userinfo.UserData.UserGenre = 'female';
			} else {
				userinfo.UserData.UserGenre = 'unknown';
			}
		}
		userinfo.UserData.UserName = wsname;
		userinfo.UserData.UserSurname = wssurname;
		userinfo.UserData.UserPoints = ShapeToInt(wspoints);
	}

	return userinfo;
}

integer		WS_RequestIsValidAirport(SiteNode placenode)
{
	string	airport;
	string	wsresponse;

	airport = VectorRecoverPosition(placenode,1);

	wsresponse = BackOfficeWebServiceCall('IsValidAirportRequest',airport);

	return ShapeToInt(wsresponse);
}

integer		WS_RequestIsValidItinerary(Itinerary route)
{
	string	wsresponse;
	string	origin, destination;
	string	wsrequest;

	origin 		= VectorRecoverPosition(route.Origin.Site.SiteNode,1);
	destination 	= VectorRecoverPosition(route.Destination.Site.SiteNode,1);

	wsrequest = LiteralConcat('|',origin,'|',destination,'|');

	wsresponse = BackOfficeWebServiceCall('IsValidItineraryRequest',wsrequest);

	return ShapeToInt(wsresponse);
}

MindTaskItem	WS_RequestRecordFlightGo(MindTaskItem aline)
{
	Itinerary route;
	GlobalDate  date;

	route = aline.ActiveCommand.LinkedInfo.Itinerary;
	date  = aline.ActiveCommand.LinkedInfo.DepartureGlobalDate;

	RecordFlightGo flightinfo;
	FlightData flightdata;

	string	origin, destination;
	origin 		= VectorRecoverPosition(route.Origin.Site.SiteNode,1);
	destination 	= VectorRecoverPosition(route.Destination.Site.SiteNode,1);

	string	wsrequest;
	string	rday, rmonth, ryear;

	integer flight_found;
	integer flight_try;
	integer target_day;
	integer target_month;
	integer target_year;

	target_day = date.DRef.AbsPeriodDay;
	target_month = date.DRef.AbsPeriodMonth;
	target_year = date.DRef.AbsPeriodYear;

	flight_found = 0;
	flight_try = 0;

	while ((!!flight_found) && (flight_try < 10)) {
		ryear = ShapeToString(target_year);

		if (target_month < 10) {
			rmonth = LiteralConcat('0',ShapeToString(target_month));
		} else {
			rmonth = ShapeToString(target_month);
		}

		if (target_day < 10) {
			rday = LiteralConcat('0',ShapeToString(target_day));
		} else {
			rday = ShapeToString(target_day);
		}

		wsrequest = LiteralConcat('|',origin,'|',destination,'|',ryear,rmonth,rday,'|');

		string 	wsresponse;
		wsresponse = BackOfficeWebServiceCall('ListOfAvailFareRequest',wsrequest);

		if (wsresponse =!= '|none|') {
			while (LiteralSize(wsresponse) > 1) {
				string wsflight,wsrest;
				string wsflightnum,wsflightori,wsflightdes,wsflighttmd,wsflighttma;
				string wsflightavf;
	
				DataFlight ttflight;
	
				LiteralBreak(wsresponse,'|',wsflight,wsrest);
				LiteralManyBreak(wsflight,'#',
						wsflightnum,wsflightori,wsflightdes,
						wsflighttmd,wsflighttma,wsflightavf);
	
				ttflight.DataFlightNumber 		= wsflightnum;
				ttflight.DataFlightOrigin 		= wsflightori;
				ttflight.DataFlightDestination 		= wsflightdes;
				ttflight.DataFlightTimeDeparture 	= wsflighttmd;
				ttflight.DataFlightTimeDeparturePeriodHour 	= 
						ShapeToInt(SubLiteral(wsflighttmd,1,2));
				ttflight.DataFlightTimeArrival 		= wsflighttma;

				if ((date.DRef.Distance > 0) || 
						(flight_try > 0) ||
						((date.DRef.Distance =:= 0) && 
							(ttflight.DataFlightTimeDeparturePeriodHour > 
								aline.TemporalMemory.TemporalData.Today.PeriodHour))) {
					flight_found = 1;
					while (LiteralSize(wsflightavf) > 1) {
						string wsavf, wsavfrest;
						string wscat, wsavail, wsfare;
		
						LiteralBreak(wsflightavf,'%',wsavf,wsavfrest);
		
						LiteralManyBreak(wsavf,'&',
									wscat,wsavail,wsfare);
		
						switch (wscat) {
							case 'FIC' {
								ttflight.DataFlightFICAvail = ShapeToInt(wsavail);
								ttflight.DataFlightFICFare = ShapeToReal(wsfare);
							}
							case 'TUR' {
								ttflight.DataFlightTURAvail = ShapeToInt(wsavail);
								ttflight.DataFlightTURFare = ShapeToReal(wsfare);
							}
						}
		
						wsflightavf = wsavfrest;
					}
	
					BatchInsertEnd(flightdata, ttflight);
				}
	
				wsresponse = wsrest;
			}
	
		}
		if (!!flight_found) {
			flight_try = flight_try + 1;
			target_day = target_day + 1;

			if (target_day > 31) {
				target_day = 1;
				target_month = target_month + 1;
			}
		} 
	}

	Erase(date.DTarget);

	if (!!flight_found) {
		flightinfo.FlightError = ( FlightErrorCode : 1001 );
	} else {
		if (target_day =!= date.DRef.AbsPeriodDay) {
			date.DTarget.AbsPeriodDay = target_day;
			date.DTarget.AbsPeriodMonth = target_month;
			date.DTarget.AbsPeriodYear = target_year;
		}

		flightinfo.FlightData = flightdata;

		flightinfo.FlightNumb = BatchSize(flightdata);

		flightinfo.FlightNTop = 1;
		flightinfo.FlightNBot = BatchSize(flightdata);

		integer nflight;
		DataFlight ttf;
		integer    ttf_hour;

		flightinfo.FlightNFoc = 0;
		flightinfo.FlightNOut = 0;
		cond {
			(VectorElement('morning',date.PeriodDaySection.AbsPeriodDaySection)) {
				nflight = 1;
				while ((flightinfo.FlightNFoc =:= 0) && (nflight <= flightinfo.FlightNumb)) {
	                                BatchRecoverPosition(flightinfo.FlightData,nflight,ttf);
					ttf_hour = ttf.DataFlightTimeDeparturePeriodHour;

					if (ttf_hour < 13) {
						flightinfo.FlightNFoc = nflight;
					} else {
						flightinfo.FlightNFoc = nflight;
						flightinfo.FlightNOut = 1;
					}

					nflight = nflight + 1;
				}
			}
			(VectorElement('afternoon',date.PeriodDaySection.AbsPeriodDaySection)) {
				nflight = 1;
				while ((flightinfo.FlightNFoc =:= 0) && (nflight <= flightinfo.FlightNumb)) {
	                                BatchRecoverPosition(flightinfo.FlightData,nflight,ttf);
					ttf_hour = ttf.DataFlightTimeDeparturePeriodHour;

					if (ttf_hour < 13) {
						flightinfo.FlightNOut = nflight;
					} else {
						if (ttf_hour < 21) {
							flightinfo.FlightNFoc = nflight;
							flightinfo.FlightNOut = 0;
						} else {
							flightinfo.FlightNFoc = nflight;
							flightinfo.FlightNOut = 1;
						}
					}

					nflight = nflight + 1;
				}

				if ((flightinfo.FlightNOut =!= 0) && (flightinfo.FlightNFoc =:= 0)) {
					flightinfo.FlightNFoc = flightinfo.FlightNOut;
					flightinfo.FlightNOut = 1;
				}
			}
			(VectorElement('evening',date.PeriodDaySection.AbsPeriodDaySection)) {
				nflight = 1;
				while ((flightinfo.FlightNFoc =:= 0) && (nflight <= flightinfo.FlightNumb)) {
	                                BatchRecoverPosition(flightinfo.FlightData,nflight,ttf);
					ttf_hour = ttf.DataFlightTimeDeparturePeriodHour;

					if (ttf_hour < 21) {
						flightinfo.FlightNOut = nflight;
					} else {
						flightinfo.FlightNFoc = nflight;
						flightinfo.FlightNOut = 0;
					}

					nflight = nflight + 1;
				}

				if ((flightinfo.FlightNOut =!= 0) && (flightinfo.FlightNFoc =:= 0)) {
					flightinfo.FlightNFoc = flightinfo.FlightNOut;
					flightinfo.FlightNOut = 1;
				}
			}
			default {
				flightinfo.FlightNFoc = flightinfo.FlightNTop;
			}
		}
	}

	aline.ActiveCommand.LinkedInfo.DepartureGlobalDate = date;
	
	aline.TemporalMemory.TemporalData.RecordFlightGo = flightinfo;

	return aline;
}

MindTaskItem	WS_RequestRecordFlightBack(MindTaskItem aline)
{
	Itinerary route;
	GlobalDate  date;

	route = aline.ActiveCommand.LinkedInfo.Itinerary;
	date  = aline.ActiveCommand.LinkedInfo.ReturnGlobalDate;

	RecordFlightBack flightinfo;
	FlightData flightdata;

	string	origin, destination;
	origin 		= VectorRecoverPosition(route.Destination.Site.SiteNode,1);
	destination 	= VectorRecoverPosition(route.Origin.Site.SiteNode,1);

	string	wsrequest;
	string	rday, rmonth, ryear;

	integer flight_found;
	integer flight_try;
	integer target_day;
	integer target_month;
	integer target_year;

	target_day = date.DRef.AbsPeriodDay;
	target_month = date.DRef.AbsPeriodMonth;
	target_year = date.DRef.AbsPeriodYear;

	flight_found = 0;
	flight_try = 0;

	while ((!!flight_found) && (flight_try < 10)) {
		ryear = ShapeToString(target_year);

		if (target_month < 10) {
			rmonth = LiteralConcat('0',ShapeToString(target_month));
		} else {
			rmonth = ShapeToString(target_month);
		}

		if (target_day < 10) {
			rday = LiteralConcat('0',ShapeToString(target_day));
		} else {
			rday = ShapeToString(target_day);
		}

		wsrequest = LiteralConcat('|',origin,'|',destination,'|',ryear,rmonth,rday,'|');

		string 	wsresponse;
		wsresponse = BackOfficeWebServiceCall('ListOfAvailFareRequest',wsrequest);

		if (wsresponse =!= '|none|') {
			while (LiteralSize(wsresponse) > 1) {
				string wsflight,wsrest;
				string wsflightnum,wsflightori,wsflightdes,wsflighttmd,wsflighttma;
				string wsflightavf;
	
				DataFlight ttflight;
	
				LiteralBreak(wsresponse,'|',wsflight,wsrest);
				LiteralManyBreak(wsflight,'#',
						wsflightnum,wsflightori,wsflightdes,
						wsflighttmd,wsflighttma,wsflightavf);
	
				ttflight.DataFlightNumber 		= wsflightnum;
				ttflight.DataFlightOrigin 		= wsflightori;
				ttflight.DataFlightDestination 		= wsflightdes;
				ttflight.DataFlightTimeDeparture 	= wsflighttmd;
				ttflight.DataFlightTimeDeparturePeriodHour 	= 
						ShapeToInt(SubLiteral(wsflighttmd,1,2));
				ttflight.DataFlightTimeArrival 		= wsflighttma;

				if ((date.DRef.Distance > 0) || 
						(flight_try > 0) ||
						((date.DRef.Distance =:= 0) && 
							(ttflight.DataFlightTimeDeparturePeriodHour > 
								aline.TemporalMemory.TemporalData.Today.PeriodHour))) {
					flight_found = 1;
					while (LiteralSize(wsflightavf) > 1) {
						string wsavf, wsavfrest;
						string wscat, wsavail, wsfare;
		
						LiteralBreak(wsflightavf,'%',wsavf,wsavfrest);
		
						LiteralManyBreak(wsavf,'&',
									wscat,wsavail,wsfare);
		
						switch (wscat) {
							case 'FIC' {
								ttflight.DataFlightFICAvail = ShapeToInt(wsavail);
								ttflight.DataFlightFICFare = ShapeToReal(wsfare);
							}
							case 'TUR' {
								ttflight.DataFlightTURAvail = ShapeToInt(wsavail);
								ttflight.DataFlightTURFare = ShapeToReal(wsfare);
							}
						}
		
						wsflightavf = wsavfrest;
					}
	
					BatchInsertEnd(flightdata, ttflight);
				}
	
				wsresponse = wsrest;
			}
	
		}
		if (!!flight_found) {
			flight_try = flight_try + 1;
			target_day = target_day + 1;

			if (target_day > 31) {
				target_day = 1;
				target_month = target_month + 1;
			}
		} 
	}

	Erase(date.DTarget);

	if (!!flight_found) {
		flightinfo.FlightError = ( FlightErrorCode : 1001 );
	} else {
		if (target_day =!= date.DRef.AbsPeriodDay) {
			date.DTarget.AbsPeriodDay = target_day;
			date.DTarget.AbsPeriodMonth = target_month;
			date.DTarget.AbsPeriodYear = target_year;
		}

		flightinfo.FlightData = flightdata;

		flightinfo.FlightNumb = BatchSize(flightdata);

		flightinfo.FlightNTop = 1;
		flightinfo.FlightNBot = BatchSize(flightdata);

		integer nflight;
		DataFlight ttf;
		integer    ttf_hour;

		flightinfo.FlightNFoc = 0;
		flightinfo.FlightNOut = 0;
		cond {
			(VectorElement('morning',date.PeriodDaySection.AbsPeriodDaySection)) {
				nflight = 1;
				while ((flightinfo.FlightNFoc =:= 0) && (nflight <= flightinfo.FlightNumb)) {
	                                BatchRecoverPosition(flightinfo.FlightData,nflight,ttf);
					ttf_hour = ttf.DataFlightTimeDeparturePeriodHour;

					if (ttf_hour < 13) {
						flightinfo.FlightNFoc = nflight;
					} else {
						flightinfo.FlightNFoc = nflight;
						flightinfo.FlightNOut = 1;
					}

					nflight = nflight + 1;
				}
			}
			(VectorElement('afternoon',date.PeriodDaySection.AbsPeriodDaySection)) {
				nflight = 1;
				while ((flightinfo.FlightNFoc =:= 0) && (nflight <= flightinfo.FlightNumb)) {
	                                BatchRecoverPosition(flightinfo.FlightData,nflight,ttf);
					ttf_hour = ttf.DataFlightTimeDeparturePeriodHour;

					if (ttf_hour < 13) {
						flightinfo.FlightNOut = nflight;
					} else {
						if (ttf_hour < 21) {
							flightinfo.FlightNFoc = nflight;
							flightinfo.FlightNOut = 0;
						} else {
							flightinfo.FlightNFoc = nflight;
							flightinfo.FlightNOut = 1;
						}
					}

					nflight = nflight + 1;
				}

				if ((flightinfo.FlightNOut =!= 0) && (flightinfo.FlightNFoc =:= 0)) {
					flightinfo.FlightNFoc = flightinfo.FlightNOut;
					flightinfo.FlightNOut = 1;
				}
			}
			(VectorElement('evening',date.PeriodDaySection.AbsPeriodDaySection)) {
				nflight = 1;
				while ((flightinfo.FlightNFoc =:= 0) && (nflight <= flightinfo.FlightNumb)) {
	                                BatchRecoverPosition(flightinfo.FlightData,nflight,ttf);
					ttf_hour = ttf.DataFlightTimeDeparturePeriodHour;

					if (ttf_hour < 21) {
						flightinfo.FlightNOut = nflight;
					} else {
						flightinfo.FlightNFoc = nflight;
						flightinfo.FlightNOut = 0;
					}

					nflight = nflight + 1;
				}

				if ((flightinfo.FlightNOut =!= 0) && (flightinfo.FlightNFoc =:= 0)) {
					flightinfo.FlightNFoc = flightinfo.FlightNOut;
					flightinfo.FlightNOut = 1;
				}
			}
			default {
				flightinfo.FlightNFoc = flightinfo.FlightNTop;
			}
		}
	}

	aline.ActiveCommand.LinkedInfo.ReturnGlobalDate = date;
	
	aline.TemporalMemory.TemporalData.RecordFlightBack = flightinfo;

	return aline;
}
