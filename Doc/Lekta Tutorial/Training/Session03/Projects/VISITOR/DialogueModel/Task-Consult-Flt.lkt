/*******************************
 ** Task / Consult Flt (Flight)
 *******************************/

MindTaskItem	IntegrateConsultFlt(MindTaskItem aline)
{
	Erase(aline.ControlTask.PhaseControlFlightInfo);

	if (aline.ActiveCommand) {
		if (aline.ActiveCommand.LinkedInfo.ReturnGlobalDate.PeriodDay.AbsPeriodDay == 0) {
			Erase(aline.ActiveCommand.LinkedInfo.ReturnGlobalDate);
			if (aline.ActiveCommand.LinkedInfo.DepartureGlobalDate) {
				aline.InputCommand.LinkedInfo.ReturnGlobalDate = aline.ActiveCommand.LinkedInfo.DepartureGlobalDate;
			} else {
				if (aline.ActiveCommand.LinkedInfo.GlobalDate) {
					aline.InputCommand.LinkedInfo.ReturnGlobalDate = aline.ActiveCommand.LinkedInfo.GlobalDate;
				}
			}
		}
	}

	if (aline.InputCommand) {
		if (aline.InputCommand.LinkedInfo.ReturnGlobalDate) { 
			if (aline.InputCommand.LinkedInfo.Itinerary.Destination && aline.InputCommand.LinkedInfo.Itinerary.Origin) {
				Destination d;
				d = aline.InputCommand.LinkedInfo.Itinerary.Destination;
				aline.InputCommand.LinkedInfo.Itinerary.Destination = aline.InputCommand.LinkedInfo.Itinerary.Origin;
				aline.InputCommand.LinkedInfo.Itinerary.Origin = d;
			} else {
				if (aline.InputCommand.LinkedInfo.Itinerary.Destination) {
					aline.InputCommand.LinkedInfo.Itinerary.Origin = aline.InputCommand.LinkedInfo.Itinerary.Destination;
					Erase(aline.InputCommand.LinkedInfo.Itinerary.Destination);
				} else {
					if (aline.InputCommand.LinkedInfo.Itinerary.Origin) {
						aline.InputCommand.LinkedInfo.Itinerary.Destination = aline.InputCommand.LinkedInfo.Itinerary.Origin;
						Erase(aline.InputCommand.LinkedInfo.Itinerary.Origin);
					}
				}
			}
		}

		if (aline.InputCommand.LinkedInfo.ReturnGlobalDate.PeriodDay.AbsPeriodDay == 0) {
			Erase(aline.InputCommand.LinkedInfo.ReturnGlobalDate);
			//aline.InputCommand.LinkedInfo.ReturnGlobalDate = aline.ActiveCommand.LinkedInfo.DepartureGlobalDate;
			if (aline.ActiveCommand.LinkedInfo.DepartureGlobalDate) {
				aline.InputCommand.LinkedInfo.ReturnGlobalDate = aline.ActiveCommand.LinkedInfo.DepartureGlobalDate;
			} else {
				if (aline.ActiveCommand.LinkedInfo.GlobalDate) {
					aline.InputCommand.LinkedInfo.ReturnGlobalDate = aline.ActiveCommand.LinkedInfo.GlobalDate;
				}
			}
		}

		if (aline.InputCommand.LinkedInfo.Itinerary.Site) {
			cond {
				(aline.RExpec.TField == 'route-origin') {
					aline.ActiveCommand.LinkedInfo.Itinerary.Origin.Site <OW<
						aline.InputCommand.LinkedInfo.Itinerary.Site;
					aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekSiteDeparture';
					aline.ControlTask.PhaseControlFlightInfo = 'fligthInfoGo';
				}
				(aline.RExpec.TField == 'route-destination') {
					aline.ActiveCommand.LinkedInfo.Itinerary.Destination.Site <OW<
						aline.InputCommand.LinkedInfo.Itinerary.Site;
					aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseVerifySiteDeparture';
					aline.ControlTask.PhaseControlFlightInfo = 'fligthInfoGo';
				}
				default {
					aline.ActiveCommand.LinkedInfo.Itinerary.Origin.Site <OW<
						aline.InputCommand.LinkedInfo.Itinerary.Site;
					aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekSiteDeparture';
					aline.ControlTask.PhaseControlFlightInfo = 'fligthInfoGo';
				}
			}
		}
		if (aline.InputCommand.LinkedInfo.Itinerary.Origin) {
			aline.ActiveCommand.LinkedInfo.Itinerary.Origin <OW<
				aline.InputCommand.LinkedInfo.Itinerary.Origin;
			aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekSiteDeparture';
			aline.ControlTask.PhaseControlFlightInfo = 'fligthInfoGo';
		}
		if (aline.InputCommand.LinkedInfo.Itinerary.Destination) {
			aline.ActiveCommand.LinkedInfo.Itinerary.Destination <OW<
				aline.InputCommand.LinkedInfo.Itinerary.Destination;
			aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekSiteDeparture';
			aline.ControlTask.PhaseControlFlightInfo = 'fligthInfoGo';
		}
		if (aline.InputCommand.LinkedInfo.ReturnGlobalDate) {
			if (aline.InputCommand.LinkedInfo.ReturnGlobalDate.PeriodDay.AbsPeriodDay) {
				Erase(aline.ActiveCommand.LinkedInfo.ReturnGlobalDate.PeriodDay.PeriodPeriodDayRelative);
			}
			if (aline.InputCommand.LinkedInfo.ReturnGlobalDate.PeriodDay.PeriodPeriodDayRelative) {
				Erase(aline.ActiveCommand.LinkedInfo.ReturnGlobalDate.PeriodDay.AbsPeriodDay);
			}
			aline.ActiveCommand.LinkedInfo.ReturnGlobalDate <OW<
				aline.InputCommand.LinkedInfo.ReturnGlobalDate;
			aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekDateReturn';
			aline.ControlTask.PhaseControlFlightInfo <OW< 'fligthInfoBack';
		}
		if (aline.InputCommand.LinkedInfo.DepartureGlobalDate) {
			if (aline.InputCommand.LinkedInfo.DepartureGlobalDate.PeriodDay.AbsPeriodDay) {
				Erase(aline.ActiveCommand.LinkedInfo.DepartureGlobalDate.PeriodDay.PeriodPeriodDayRelative);
			}
			if (aline.InputCommand.LinkedInfo.DepartureGlobalDate.PeriodDay.PeriodPeriodDayRelative) {
				Erase(aline.ActiveCommand.LinkedInfo.DepartureGlobalDate.PeriodDay.AbsPeriodDay);
			}
			aline.ActiveCommand.LinkedInfo.DepartureGlobalDate <OW<
				aline.InputCommand.LinkedInfo.DepartureGlobalDate;
			aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekSiteDeparture';
			aline.ControlTask.PhaseControlFlightInfo <OW< 'fligthInfoGo';
		}
		if (aline.ControlTask.PhaseControlFlightType =:= 'fligthTypeGo') {
			if (aline.InputCommand.LinkedInfo.GlobalDate) {
				if (aline.InputCommand.LinkedInfo.GlobalDate.PeriodDay.AbsPeriodDay) {
					Erase(aline.ActiveCommand.LinkedInfo.DepartureGlobalDate.PeriodDay.PeriodPeriodDayRelative);
				}
				if (aline.InputCommand.LinkedInfo.GlobalDate.PeriodDay.PeriodPeriodDayRelative) {
					Erase(aline.ActiveCommand.LinkedInfo.DepartureGlobalDate.PeriodDay.AbsPeriodDay);
				}
				aline.ActiveCommand.LinkedInfo.DepartureGlobalDate <OW<
					aline.InputCommand.LinkedInfo.GlobalDate;
				aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekSiteDeparture';
				aline.ControlTask.PhaseControlFlightInfo <OW< 'fligthInfoGo';
			}
			if (aline.InputCommand.LinkedInfo.IntSeqn) {
				Erase(aline.ActiveCommand.LinkedInfo.DepartureGlobalDate.PeriodDay.PeriodPeriodDayRelative);
				aline.ActiveCommand.LinkedInfo.DepartureGlobalDate.PeriodDay.AbsPeriodDay <OW<
					ShapeToInt(aline.InputCommand.LinkedInfo.IntSeqn.IntegerString);
				aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekSiteDeparture';
				aline.ControlTask.PhaseControlFlightInfo <OW< 'fligthInfoGo';
			}
		}
		if (aline.ControlTask.PhaseControlFlightType =:= 'fligthTypeBack') {
			if (aline.InputCommand.LinkedInfo.GlobalDate) {
				if (aline.InputCommand.LinkedInfo.GlobalDate.PeriodDay.AbsPeriodDay) {
					Erase(aline.ActiveCommand.LinkedInfo.ReturnGlobalDate.PeriodDay.PeriodPeriodDayRelative);
				}
				if (aline.InputCommand.LinkedInfo.GlobalDate.PeriodDay.PeriodPeriodDayRelative) {
					Erase(aline.ActiveCommand.LinkedInfo.ReturnGlobalDate.PeriodDay.AbsPeriodDay);
				}
				aline.ActiveCommand.LinkedInfo.ReturnGlobalDate <OW<
					aline.InputCommand.LinkedInfo.GlobalDate;
				aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekDateReturn';
				aline.ControlTask.PhaseControlFlightInfo <OW< 'fligthInfoBack';
			}
			if (aline.InputCommand.LinkedInfo.IntSeqn) {
				Erase(aline.ActiveCommand.LinkedInfo.ReturnGlobalDate.PeriodDay.PeriodPeriodDayRelative);
				aline.ActiveCommand.LinkedInfo.ReturnGlobalDate.PeriodDay.AbsPeriodDay <OW<
					ShapeToInt(aline.InputCommand.LinkedInfo.IntSeqn.IntegerString);
				aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekDateReturn';
				aline.ControlTask.PhaseControlFlightInfo <OW< 'fligthInfoBack';
			}
		}

		Erase(aline.InputCommand);
	}

	if (aline.ActiveCommand.LinkedInfo.Itinerary.Origin.DepartureGlobalDate) {
		aline.ActiveCommand.LinkedInfo.DepartureGlobalDate = aline.ActiveCommand.LinkedInfo.Itinerary.Origin.DepartureGlobalDate;
		Erase(aline.ActiveCommand.LinkedInfo.Itinerary.Origin.DepartureGlobalDate);
		aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekSiteDeparture';
		aline.ControlTask.PhaseControlFlightInfo <OW< 'fligthInfoGo';
	}

	if (aline.ControlTask.PhaseControlFlightType =:= 'fligthTypeGo') {
		if (aline.ActiveCommand.LinkedInfo.GlobalDate) {
			aline.ActiveCommand.LinkedInfo.DepartureGlobalDate = aline.ActiveCommand.LinkedInfo.GlobalDate;
			Erase(aline.ActiveCommand.LinkedInfo.GlobalDate);
			aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekSiteDeparture';
			aline.ControlTask.PhaseControlFlightInfo <OW< 'fligthInfoGo';
		}

		if (aline.ActiveCommand.LinkedInfo.IntSeqn) {
			Erase(aline.ActiveCommand.LinkedInfo.DepartureGlobalDate.PeriodDay.PeriodPeriodDayRelative);
			aline.ActiveCommand.LinkedInfo.DepartureGlobalDate.PeriodDay.AbsPeriodDay <OW<
				ShapeToInt(aline.ActiveCommand.LinkedInfo.IntSeqn.IntegerString);
			Erase(aline.ActiveCommand.LinkedInfo.IntSeqn);
			aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekSiteDeparture';
			aline.ControlTask.PhaseControlFlightInfo <OW< 'fligthInfoGo';
		}
	}

	if (aline.ControlTask.PhaseControlFlightType =:= 'fligthTypeBack') {
		if (aline.ActiveCommand.LinkedInfo.GlobalDate) {
			aline.ActiveCommand.LinkedInfo.ReturnGlobalDate = aline.ActiveCommand.LinkedInfo.GlobalDate;
			Erase(aline.ActiveCommand.LinkedInfo.GlobalDate);
			aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekDateReturn';
			aline.ControlTask.PhaseControlFlightInfo <OW< 'fligthInfoBack';
		}

		if (aline.ActiveCommand.LinkedInfo.IntSeqn) {
			Erase(aline.ActiveCommand.LinkedInfo.DepartureGlobalDate.PeriodDay.PeriodPeriodDayRelative);
			aline.ActiveCommand.LinkedInfo.ReturnGlobalDate.PeriodDay.AbsPeriodDay <OW<
				ShapeToInt(aline.ActiveCommand.LinkedInfo.IntSeqn.IntegerString);
			Erase(aline.ActiveCommand.LinkedInfo.IntSeqn);
			aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekDateReturn';
			aline.ControlTask.PhaseControlFlightInfo <OW< 'fligthInfoBack';
		}
	}

	if (aline.RExpec.EValue.Command.LinkedInfo) {
		if (aline.RExpec.EValue.Command.LinkedInfo.Itinerary.Site) {
			cond {
				(aline.RExpec.TField == 'route-origin') {
					aline.ActiveCommand.LinkedInfo.Itinerary.Origin.Site <OW<
						aline.RExpec.EValue.Command.LinkedInfo.Itinerary.Site;
					aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekSiteDeparture';
					aline.ControlTask.PhaseControlFlightInfo <OW< 'fligthInfoGo';
				}
				(aline.RExpec.TField == 'route-destination') {
					aline.ActiveCommand.LinkedInfo.Itinerary.Destination.Site <OW<
						aline.RExpec.EValue.Command.LinkedInfo.Itinerary.Site;
					aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseVerifySiteDeparture';
					aline.ControlTask.PhaseControlFlightInfo <OW< 'fligthInfoGo';
				}
				default {
					aline.ActiveCommand.LinkedInfo.Itinerary.Origin.Site <OW<
						aline.RExpec.EValue.Command.LinkedInfo.Itinerary.Site;
					aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekSiteDeparture';
					aline.ControlTask.PhaseControlFlightInfo <OW< 'fligthInfoGo';
				}
			}
		}
		if (aline.RExpec.EValue.Command.LinkedInfo.Itinerary.Origin) {
			aline.ActiveCommand.LinkedInfo.Itinerary.Origin <OW<
				aline.RExpec.EValue.Command.LinkedInfo.Itinerary.Origin;
			aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekSiteDeparture';
			aline.ControlTask.PhaseControlFlightInfo <OW< 'fligthInfoGo';
		}
		if (aline.RExpec.EValue.Command.LinkedInfo.Itinerary.Destination) {
			aline.ActiveCommand.LinkedInfo.Itinerary.Destination <OW<
				aline.RExpec.EValue.Command.LinkedInfo.Itinerary.Destination;
			aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekSiteDeparture';
			aline.ControlTask.PhaseControlFlightInfo <OW< 'fligthInfoGo';
		}
		if (aline.RExpec.EValue.Command.LinkedInfo.DepartureGlobalDate) {
			if (aline.RExpec.EValue.Command.LinkedInfo.DepartureGlobalDate.PeriodDay.AbsPeriodDay) {
				Erase(aline.ActiveCommand.LinkedInfo.DepartureGlobalDate.PeriodDay.PeriodPeriodDayRelative);
			}
			if (aline.RExpec.EValue.Command.LinkedInfo.DepartureGlobalDate.PeriodDay.PeriodPeriodDayRelative) {
				Erase(aline.ActiveCommand.LinkedInfo.DepartureGlobalDate.PeriodDay.AbsPeriodDay);
			}
			aline.ActiveCommand.LinkedInfo.DepartureGlobalDate <OW<
				aline.RExpec.EValue.Command.LinkedInfo.DepartureGlobalDate;
			aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekSiteDeparture';
			aline.ControlTask.PhaseControlFlightInfo <OW< 'fligthInfoGo';
		}
		if (aline.RExpec.EValue.Command.LinkedInfo.ReturnGlobalDate) {
			if (aline.RExpec.EValue.Command.LinkedInfo.ReturnGlobalDate.PeriodDay.AbsPeriodDay) {
				Erase(aline.ActiveCommand.LinkedInfo.ReturnGlobalDate.PeriodDay.PeriodPeriodDayRelative);
			}
			if (aline.RExpec.EValue.Command.LinkedInfo.ReturnGlobalDate.PeriodDay.PeriodPeriodDayRelative) {
				Erase(aline.ActiveCommand.LinkedInfo.ReturnGlobalDate.PeriodDay.AbsPeriodDay);
			}
			aline.ActiveCommand.LinkedInfo.ReturnGlobalDate <OW<
				aline.RExpec.EValue.Command.LinkedInfo.ReturnGlobalDate;
			aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekDateReturn';
			aline.ControlTask.PhaseControlFlightInfo <OW< 'fligthInfoBack';
		}
		if (aline.ControlTask.PhaseControlFlightType =:= 'fligthTypeGo') {
			if (aline.RExpec.EValue.Command.LinkedInfo.GlobalDate) {
				if (aline.RExpec.EValue.Command.LinkedInfo.DepartureGlobalDate.PeriodDay.AbsPeriodDay) {
					Erase(aline.ActiveCommand.LinkedInfo.DepartureGlobalDate.PeriodDay.PeriodPeriodDayRelative);
				}
				if (aline.RExpec.EValue.Command.LinkedInfo.DepartureGlobalDate.PeriodDay.PeriodPeriodDayRelative) {
					Erase(aline.ActiveCommand.LinkedInfo.DepartureGlobalDate.PeriodDay.AbsPeriodDay);
				}
				aline.ActiveCommand.LinkedInfo.DepartureGlobalDate <OW<
					aline.RExpec.EValue.Command.LinkedInfo.GlobalDate;
				aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekSiteDeparture';
				aline.ControlTask.PhaseControlFlightInfo <OW< 'fligthInfoGo';
			}
			if (aline.RExpec.EValue.Command.LinkedInfo.IntSeqn) {
				Erase(aline.ActiveCommand.LinkedInfo.DepartureGlobalDate.PeriodDay.PeriodPeriodDayRelative);
				aline.ActiveCommand.LinkedInfo.DepartureGlobalDate.PeriodDay.AbsPeriodDay <OW<
					ShapeToInt(aline.RExpec.EValue.Command.LinkedInfo.IntSeqn.IntegerString);
				aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekSiteDeparture';
				aline.ControlTask.PhaseControlFlightInfo <OW< 'fligthInfoGo';
			}
		}
		if (aline.ControlTask.PhaseControlFlightType =:= 'fligthTypeBack') {
			if (aline.RExpec.EValue.Command.LinkedInfo.GlobalDate) {
				if (aline.RExpec.EValue.Command.LinkedInfo.ReturnGlobalDate.PeriodDay.AbsPeriodDay) {
					Erase(aline.ActiveCommand.LinkedInfo.ReturnGlobalDate.PeriodDay.PeriodPeriodDayRelative);
				}
				if (aline.RExpec.EValue.Command.LinkedInfo.ReturnGlobalDate.PeriodDay.PeriodPeriodDayRelative) {
					Erase(aline.ActiveCommand.LinkedInfo.ReturnGlobalDate.PeriodDay.AbsPeriodDay);
				}
				aline.ActiveCommand.LinkedInfo.ReturnGlobalDate <OW<
					aline.RExpec.EValue.Command.LinkedInfo.GlobalDate;
				aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekDateReturn';
				aline.ControlTask.PhaseControlFlightInfo <OW< 'fligthInfoBack';
			}
			if (aline.RExpec.EValue.Command.LinkedInfo.IntSeqn) {
				Erase(aline.ActiveCommand.LinkedInfo.ReturnGlobalDate.PeriodDay.PeriodPeriodDayRelative);
				aline.ActiveCommand.LinkedInfo.ReturnGlobalDate.PeriodDay.AbsPeriodDay <OW<
					ShapeToInt(aline.RExpec.EValue.Command.LinkedInfo.IntSeqn.IntegerString);
				aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekDateReturn';
				aline.ControlTask.PhaseControlFlightInfo <OW< 'fligthInfoBack';
			}
		}

		Erase(aline.RExpec.EValue.Command.LinkedInfo);
	} 

	if (aline.ActiveCommand.LinkedInfo.Itinerary.Site) {
		cond {
			(aline.RExpec.TField == 'route-origin') {
				aline.ActiveCommand.LinkedInfo.Itinerary.Origin.Site <OW<
					aline.ActiveCommand.LinkedInfo.Itinerary.Site;
				aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekSiteDeparture';
				aline.ControlTask.PhaseControlFlightInfo <OW< 'fligthInfoBack';
			}
			(aline.RExpec.TField == 'route-destination') {
				aline.ActiveCommand.LinkedInfo.Itinerary.Destination.Site <OW<
					aline.ActiveCommand.LinkedInfo.Itinerary.Site;
				aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseVerifySiteDeparture';
				aline.ControlTask.PhaseControlFlightInfo <OW< 'fligthInfoBack';
			}
			default {
				aline.ActiveCommand.LinkedInfo.Itinerary.Origin.Site <OW<
					aline.ActiveCommand.LinkedInfo.Itinerary.Site;
				aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekSiteDeparture';
				aline.ControlTask.PhaseControlFlightInfo <OW< 'fligthInfoBack';
			}
		}
		Erase(aline.ActiveCommand.LinkedInfo.Itinerary.Site);
	}

	return aline;
}

MindTaskItem	LookItineraryOriginFlt(MindTaskItem aline)
{
	cond {
		(aline.ActiveCommand.LinkedInfo.Itinerary.Origin) {
			Erase(aline.RExpec.EValue);
			aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseVerifySiteDeparture';
		}
		(aline.RExpec.EValue.Command.LinkedInfo) {
			if (aline.RExpec.EValue.Command.LinkedInfo.Itinerary.Destination) {
				aline.ActiveCommand.LinkedInfo.Itinerary.Destination =
					aline.RExpec.EValue.Command.LinkedInfo.Itinerary.Destination;
				aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekSiteDeparture';

			}
			if (aline.RExpec.EValue.Command.LinkedInfo.Itinerary.Site) {
				aline.ActiveCommand.LinkedInfo.Itinerary.Origin.Site =
					aline.RExpec.EValue.Command.LinkedInfo.Itinerary.Site;
				aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseVerifySiteDeparture';
			}
			if (aline.RExpec.EValue.Command.LinkedInfo.Itinerary.Origin) {
				aline.ActiveCommand.LinkedInfo.Itinerary.Origin =
					aline.RExpec.EValue.Command.LinkedInfo.Itinerary.Origin;
				aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseVerifySiteDeparture';
			}
			Erase(aline.RExpec.EValue.Command.LinkedInfo);
		}
		default {
			if (aline.ActiveCommand.LinkedInfo.Itinerary.Destination) {
				aline = AnalyzeItineraryDestinationNoOriginFlt(aline);
			} else {
				LOutput loutput = (LMode:'ask',TField:'route');
				BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);
				aline.AExpec = (TField:'route');

			}
		}
	}

	return aline;
}

MindTaskItem	AnalyzeItineraryOriginFlt(MindTaskItem aline)
{
	integer	valid_airport_origin;

	valid_airport_origin = 
		WS_RequestIsValidAirport(aline.ActiveCommand.LinkedInfo.Itinerary.Origin.Site.SiteNode);

	if ((valid_airport_origin == 1) || (valid_airport_origin == 3)) {
		aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekSiteDestination';
	} else {
		if (aline.ActiveCommand.LinkedInfo.Itinerary.Destination) {
			integer	valid_airport_destination;

			valid_airport_destination = 
				WS_RequestIsValidAirport(aline.ActiveCommand.LinkedInfo.Itinerary.Destination.Site.SiteNode);

			if (!!((valid_airport_destination == 2) || 
						(valid_airport_destination == 3))) {
					aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseInvalidSiteDeparture';
					LOutput loutput = (LMode:'error',TField:'route-origin-destination');
					loutput.IContext = aline;
					BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);
					Erase(aline.ActiveCommand.LinkedInfo.Itinerary.Origin);
					Erase(aline.ActiveCommand.LinkedInfo.Itinerary.Destination);
					aline.AExpec = (TField:'route-origin');


			} else {
				aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseInvalidSiteDeparture';
				LOutput loutput = (LMode:'error',TField:'route-origin');
				loutput.IContext = aline;
				BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);
				Erase(aline.ActiveCommand.LinkedInfo.Itinerary.Origin);
				aline.AExpec = (TField:'route-origin');

			}
		} else {
			aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseInvalidSiteDeparture';
			LOutput loutput = (LMode:'error',TField:'route-origin');
			loutput.IContext = aline;
			BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);
			Erase(aline.ActiveCommand.LinkedInfo.Itinerary.Origin);
			aline.AExpec = (TField:'route-origin');
	
		}
	}

	return aline;
}

MindTaskItem	LookItineraryDestinationFlt(MindTaskItem aline)
{
	cond {
		(aline.ActiveCommand.LinkedInfo.Itinerary.Destination) {
			Erase(aline.RExpec.EValue);
			aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseValidateWholeItinerary';
		}
		(aline.RExpec.EValue.Command.LinkedInfo) {
			if (aline.RExpec.EValue.Command.LinkedInfo.Itinerary.Origin) {
				aline.ActiveCommand.LinkedInfo.Itinerary.Origin =
					aline.RExpec.EValue.Command.LinkedInfo.Itinerary.Origin;
				aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseVerifySiteDeparture';
			}
			if (aline.RExpec.EValue.Command.LinkedInfo.Itinerary.Site) {
				aline.ActiveCommand.LinkedInfo.Itinerary.Origin.Site =
					aline.RExpec.EValue.Command.LinkedInfo.Itinerary.Site;
				aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseValidateWholeItinerary';
			}
			if (aline.RExpec.EValue.Command.LinkedInfo.Itinerary.Destination) {
				aline.ActiveCommand.LinkedInfo.Itinerary.Destination =
					aline.RExpec.EValue.Command.LinkedInfo.Itinerary.Destination;
				aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseValidateWholeItinerary';
			}
			Erase(aline.RExpec.EValue.Command.LinkedInfo);
		}
		default {
			LOutput loutput = (LMode:'ask',TField:'route-destination');
			BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);
			aline.AExpec = (TField:'route-destination');

		}
	}

	return aline;
}

MindTaskItem	CompareItineraryOriginDestination(MindTaskItem aline)
{
	if (aline.ActiveCommand.LinkedInfo.Itinerary.Origin.Site.SiteNode =:=
			aline.ActiveCommand.LinkedInfo.Itinerary.Destination.Site.SiteNode) {
		LOutput loutput = (LMode:'ask',TField:'route-duplicate');
		BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);
		aline.AExpec = (TField:'route'|'route-origin'|'route-destination');

	} else {
		aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseVerifySiteDestination';
	}

	return aline;
}

MindTaskItem	AnalyzeItineraryDestinationFlt(MindTaskItem aline)
{
	integer	valid_airport_destination;
	integer	valid_route;

	valid_airport_destination = 
		WS_RequestIsValidAirport(aline.ActiveCommand.LinkedInfo.Itinerary.Destination.Site.SiteNode);

	if ((valid_airport_destination == 2) || (valid_airport_destination == 3)) {
		valid_route = WS_RequestIsValidItinerary(aline.ActiveCommand.LinkedInfo.Itinerary);
		if (valid_route == 1) {
			aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekDateDeparture';
		} else {
			aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseInvalidItinerary';
			LOutput loutput = (LMode:'error',TField:'route');
			loutput.IContext = aline;
			BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);
			aline.AExpec = (TField:'route'|'route-origin'|'route-destination');
		}
	} else {
		// Invalid Airport Destination
		aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseInvalidSiteDestination';
		LOutput loutput = (LMode:'error',TField:'route-destination');
		loutput.IContext = aline;
		BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);
		aline.AExpec = (TField:'route-destination');

		Erase(aline.ActiveCommand.LinkedInfo.Itinerary.Destination);

	}

	return aline;
}

MindTaskItem	AnalyzeItineraryDestinationNoOriginFlt(MindTaskItem aline)
{
	integer	valid_airport;

	valid_airport = WS_RequestIsValidAirport(aline.ActiveCommand.LinkedInfo.Itinerary.Destination.Site.SiteNode);

	if ((valid_airport == 2) || (valid_airport == 3)) {
		LOutput loutput = (LMode:'ask',TField:'route-origin');
		BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);
		aline.AExpec = (TField:'route-origin');


	} else {
		aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseInvalidSiteDestination';
		LOutput loutput = (LMode:'error',TField:'route-destination');
		loutput.IContext = aline;
		BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);
		Erase(aline.ActiveCommand.LinkedInfo.Itinerary.Destination);


	}

	return aline;
}

MindTaskItem	LookDepartureGlobalDateFlt(MindTaskItem aline)
{
	if (aline.ActiveCommand.LinkedInfo.GlobalDate) {
		aline.ActiveCommand.LinkedInfo.DepartureGlobalDate = CompactGlobalDate(aline.ActiveCommand.LinkedInfo.GlobalDate,
				aline.TemporalMemory.TemporalData.Today);	
	}

	if (aline.ActiveCommand.LinkedInfo.DepartureGlobalDate) {
		aline.ActiveCommand.LinkedInfo.DepartureGlobalDate = CompactGlobalDate(aline.ActiveCommand.LinkedInfo.DepartureGlobalDate,
				aline.TemporalMemory.TemporalData.Today);	
	}

	if (aline.ActiveCommand.LinkedInfo.Itinerary.Origin.DepartureGlobalDate) {
		aline.ActiveCommand.LinkedInfo.DepartureGlobalDate = CompactGlobalDate(aline.ActiveCommand.LinkedInfo.Itinerary.Origin.DepartureGlobalDate,
				aline.TemporalMemory.TemporalData.Today);	
	}


	if (aline.ControlTask.PhaseControlFlightInfo =:= 'fligthInfoGo') {

		if (aline.ActiveCommand.LinkedInfo.GlobalDate && (!!aline.ActiveCommand.LinkedInfo.DepartureGlobalDate)) {
			aline.ActiveCommand.LinkedInfo.DepartureGlobalDate = aline.ActiveCommand.LinkedInfo.GlobalDate;
			Erase(aline.ActiveCommand.LinkedInfo.GlobalDate);
		}

		cond {
			(aline.ActiveCommand.LinkedInfo.DepartureGlobalDate) {
				Erase(aline.RExpec.EValue);
				aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseVerifyDateDeparture';
			}
			(aline.ActiveCommand.LinkedInfo.Itinerary.Origin.DepartureGlobalDate) {
				aline.ActiveCommand.LinkedInfo.GlobalDate = aline.ActiveCommand.LinkedInfo.Itinerary.Origin.DepartureGlobalDate;
				Erase(aline.ActiveCommand.LinkedInfo.Itinerary.Origin.DepartureGlobalDate);
				Erase(aline.RExpec.EValue);
				aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseVerifyDateDeparture';
			}
			(aline.RExpec.EValue.Command.LinkedInfo) {
				if (aline.RExpec.EValue.Command.LinkedInfo.DepartureGlobalDate) {
					aline.ActiveCommand.LinkedInfo.DepartureGlobalDate =
						aline.RExpec.EValue.Command.LinkedInfo.DepartureGlobalDate;
					aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseVerifyDateDeparture';
				}
				if (aline.RExpec.EValue.Command.LinkedInfo.IntSeqn) {
					aline.ActiveCommand.LinkedInfo.DepartureGlobalDate.PeriodDay.AbsPeriodDay <OW<
						ShapeToInt(aline.RExpec.EValue.Command.LinkedInfo.IntSeqn.IntegerString);
					aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseVerifyDateDeparture';
				}
	
				Erase(aline.RExpec.EValue.Command.LinkedInfo);
			}
			default {
				LOutput loutput = (LMode:'ask',TField:'dateDeparture');
				BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);
				aline.AExpec = (TField:'dateDeparture');

			}
		}
	} else {
		aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseSeekDateReturn';
	}

	return aline;
}

MindTaskItem	LookReturnGlobalDateFlt(MindTaskItem aline)
{
	if (aline.ActiveCommand.LinkedInfo.ReturnGlobalDate) {
		aline.ActiveCommand.LinkedInfo.ReturnGlobalDate = CompactGlobalDate(aline.ActiveCommand.LinkedInfo.ReturnGlobalDate,
				aline.TemporalMemory.TemporalData.Today);	
	}

	if (aline.ActiveCommand.LinkedInfo.GlobalDate) {
		aline.ActiveCommand.LinkedInfo.ReturnGlobalDate = CompactGlobalDate(aline.ActiveCommand.LinkedInfo.GlobalDate,
				aline.TemporalMemory.TemporalData.Today);	
	}

	if (aline.ActiveCommand.LinkedInfo.Itinerary.Origin.ReturnGlobalDate) {
		aline.ActiveCommand.LinkedInfo.ReturnGlobalDate = CompactGlobalDate(aline.ActiveCommand.LinkedInfo.Itinerary.Origin.ReturnGlobalDate,
				aline.TemporalMemory.TemporalData.Today);	
	}

	if (aline.ControlTask.PhaseControlFlightInfo =:= 'fligthInfoBack') {

		cond {
			(aline.ActiveCommand.LinkedInfo.ReturnGlobalDate) {
				Erase(aline.RExpec.EValue);
				aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseVerifyDateReturn';
			}
			(aline.RExpec.EValue.Command.LinkedInfo) {
				if (aline.RExpec.EValue.Command.LinkedInfo.ReturnGlobalDate) {
					aline.ActiveCommand.LinkedInfo.ReturnGlobalDate =
						aline.RExpec.EValue.Command.LinkedInfo.ReturnGlobalDate;
					aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseVerifyDateReturn';
				}
				if (aline.RExpec.EValue.Command.LinkedInfo.IntSeqn) {
					aline.ActiveCommand.LinkedInfo.ReturnGlobalDate.PeriodDay.AbsPeriodDay <OW<
						ShapeToInt(aline.RExpec.EValue.Command.LinkedInfo.IntSeqn.IntegerString);
					aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseVerifyDateReturn';
				}
				Erase(aline.RExpec.EValue.Command.LinkedInfo);
			}
			default {
				LOutput loutput = (LMode:'ask',TField:'dateReturn');
				BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);
				aline.AExpec = (TField:'dateReturn');

			}
		}
	} else {
		aline.ControlTask.PhaseControlSearchPointsFlt = 'close';
	}
	
	return aline;
}

MindTaskItem	AnalyzeDepartureGlobalDateFlt(MindTaskItem aline)
{
	if (aline.ActiveCommand.LinkedInfo.DepartureGlobalDate.DRef.Distance < 0) {
		LOutput loutput = (LMode:'re-ask',TField:'dateDeparture');
		BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);
		aline.AExpec = (TField:'dateDeparture');

		aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseInvalidDateDeparture';



		return aline;
	}

	aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseAskFligthGo';

	return aline;
}

MindTaskItem	AnalyzeReturnGlobalDateFlt(MindTaskItem aline)
{
	if (aline.ActiveCommand.LinkedInfo.ReturnGlobalDate.DRef.Distance < 0) {
		LOutput loutput = (LMode:'re-ask',TField:'dateReturn');
		BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);
		aline.AExpec = (TField:'dateReturn');

		aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseInvalidDateReturn';

		return aline;
	}

	if (aline.ActiveCommand.LinkedInfo.ReturnGlobalDate.DRef.Distance < aline.ActiveCommand.LinkedInfo.DepartureGlobalDate.DRef.Distance) {
		Erase(aline.ActiveCommand.LinkedInfo.ReturnGlobalDate);

		LOutput loutput = (LMode:'re-ask',TField:'dateReturn');
		BatchInsertEnd($MINDBOARD@OStruct.OScheme,loutput);
		aline.AExpec = (TField:'dateReturn');

		aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseInvalidDateReturn';

		return aline;
	}
	
	aline.ControlTask.PhaseControlSearchPointsFlt = 'phaseAskFligthReturn';

	return aline;
}

MindTaskItem	MoveFlightGo(MindTaskItem aline)
{
	RecordFlightGo	flightinfo;

	if (aline.CopyTemporalMemory) {
		aline.TemporalMemory = aline.CopyTemporalMemory;
	}

	flightinfo = aline.TemporalMemory.TemporalData.RecordFlightGo;

	/*
	SpyMessage("MoveFlightGo");
	SpyMessage("   Init");
	SpyMessage("   flightinfo.FlightNTop: ",flightinfo.FlightNTop);
	SpyMessage("   flightinfo.FlightNFoc: ",flightinfo.FlightNFoc);
	SpyMessage("   flightinfo.FlightNBot: ",flightinfo.FlightNBot);
	*/

	if ((aline.ActiveCommand.LinkedInfo.DepartureGlobalDate.Time.RelPos == 1)  || 
				(aline.ActiveCommand.LinkedInfo.ReturnGlobalDate.Time.RelPos == 1)) {
		if ((flightinfo.FlightNFoc + 1) < flightinfo.FlightNBot) {
			if ((flightinfo.FlightNFoc + 1) < flightinfo.FlightNBot) {
				flightinfo.FlightNTop = flightinfo.FlightNFoc + 2;
			} else {
				flightinfo.FlightNTop = flightinfo.FlightNFoc + 1;
			}
			flightinfo.FlightNFoc = flightinfo.FlightNTop +
					((flightinfo.FlightNBot - flightinfo.FlightNFoc) / 2);
			aline.TemporalMemory.TemporalData.RecordFlightGo = flightinfo;
			aline.ControlTask.PhaseControlSearchPointsFlt = 'informphaseContinueFlightGo';
		} else {
			aline.AExpec = (TField:'dateDeparture');

			aline.ControlTask.PhaseControlSearchPointsFlt = 'errorphaseContinueFlightGo';

		}
	}

	if ((aline.ActiveCommand.LinkedInfo.DepartureGlobalDate.Time.RelPos == -1)  || 
				(aline.ActiveCommand.LinkedInfo.ReturnGlobalDate.Time.RelPos == -1)) {
		if (flightinfo.FlightNFoc > flightinfo.FlightNTop) {
			flightinfo.FlightNBot = flightinfo.FlightNFoc - 1;
			flightinfo.FlightNFoc = flightinfo.FlightNTop +
					((flightinfo.FlightNFoc - flightinfo.FlightNTop) / 2);
			aline.TemporalMemory.TemporalData.RecordFlightGo = flightinfo;
			aline.ControlTask.PhaseControlSearchPointsFlt = 'informphaseContinueFlightGo';
		} else {
			aline.AExpec = (TField:'dateDeparture');

			aline.ControlTask.PhaseControlSearchPointsFlt = 'errorphaseContinueFlightGo';

		}
	}

	Erase(aline.ActiveCommand.LinkedInfo.DepartureGlobalDate);
	Erase(aline.ActiveCommand.LinkedInfo.ReturnGlobalDate);

	/*
	SpyMessage("   End");
	SpyMessage("   flightinfo.FlightNTop: ",flightinfo.FlightNTop);
	SpyMessage("   flightinfo.FlightNFoc: ",flightinfo.FlightNFoc);
	SpyMessage("   flightinfo.FlightNBot: ",flightinfo.FlightNBot);
	*/

	return aline;
}

MindTaskItem	MoveFlightBack(MindTaskItem aline)
{
	RecordFlightBack	flightinfo;

	aline.TemporalMemory = aline.CopyTemporalMemory;
	flightinfo = aline.TemporalMemory.TemporalData.RecordFlightBack;

	SpyMessage("MoveFlightBack");
	SpyMessage("   Init");
	SpyMessage("   flightinfo.FlightNTop: ",flightinfo.FlightNTop);
	SpyMessage("   flightinfo.FlightNFoc: ",flightinfo.FlightNFoc);
	SpyMessage("   flightinfo.FlightNBot: ",flightinfo.FlightNBot);
SpyMessage("aline.ActiveCommand.LinkedInfo.ReturnGlobalDate.Time.RelPos: ",aline.ActiveCommand.LinkedInfo.ReturnGlobalDate.Time.RelPos);

	if ((aline.ActiveCommand.LinkedInfo.DepartureGlobalDate.Time.RelPos == 1)  || 
				(aline.ActiveCommand.LinkedInfo.ReturnGlobalDate.Time.RelPos == 1)) {
		if ((flightinfo.FlightNFoc + 1) < flightinfo.FlightNBot) {
			if ((flightinfo.FlightNFoc + 1) < flightinfo.FlightNBot) {
				flightinfo.FlightNTop = flightinfo.FlightNFoc + 2;
			} else {
				flightinfo.FlightNTop = flightinfo.FlightNFoc + 1;
			}
			flightinfo.FlightNFoc = flightinfo.FlightNTop +
					((flightinfo.FlightNBot - flightinfo.FlightNFoc) / 2);
			aline.TemporalMemory.TemporalData.RecordFlightBack = flightinfo;
			aline.ControlTask.PhaseControlSearchPointsFlt = 'informphaseContinueFlightReturn';
		} else {
			aline.AExpec = (TField:'dateReturn');

			aline.ControlTask.PhaseControlSearchPointsFlt = 'errorphaseContinueFlightReturn';

		}
	}

	if ((aline.ActiveCommand.LinkedInfo.DepartureGlobalDate.Time.RelPos == -1)  || 
				(aline.ActiveCommand.LinkedInfo.ReturnGlobalDate.Time.RelPos == -1)) {
		if (flightinfo.FlightNFoc > flightinfo.FlightNTop) {
			flightinfo.FlightNBot = flightinfo.FlightNFoc - 1;
			flightinfo.FlightNFoc = flightinfo.FlightNTop +
					((flightinfo.FlightNFoc - flightinfo.FlightNTop) / 2);
			aline.TemporalMemory.TemporalData.RecordFlightBack = flightinfo;
			aline.ControlTask.PhaseControlSearchPointsFlt = 'informphaseContinueFlightReturn';
		} else {
			aline.AExpec = (TField:'dateReturn');

			aline.ControlTask.PhaseControlSearchPointsFlt = 'errorphaseContinueFlightReturn';

		}
	}

	/*
	SpyMessage("   End");
	SpyMessage("   flightinfo.FlightNTop: ",flightinfo.FlightNTop);
	SpyMessage("   flightinfo.FlightNFoc: ",flightinfo.FlightNFoc);
	SpyMessage("   flightinfo.FlightNBot: ",flightinfo.FlightNBot);
	*/

	aline.CopyTemporalMemory = aline.TemporalMemory;
	Erase(aline.ActiveCommand.LinkedInfo.ReturnGlobalDate);

	return aline;
}
