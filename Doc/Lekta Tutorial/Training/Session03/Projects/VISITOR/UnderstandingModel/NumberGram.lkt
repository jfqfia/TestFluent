/*******************************
 ** Expresiones numericas
 *******************************/

/*************************/
/** Integer		**/
/*************************/

(Integer1 : 
	[Integer -> numInteger]
		{ ^.IntegerValue <- #1; })

(Integer2 : 
	[Integer/1 -> lexNumber]
		{ ^.IntegerValue <- #1; })

(Integer3 : 
	[Integer/2 -> Integer/1 
				conjY? 
				Integer/2]
		{ if (IntegerAfter(#1.IntegerValue,#3.IntegerValue)) {
			^.IntegerValue <- #1.IntegerValue + #3.IntegerValue; 
		  } else {
			Fail();
		  }
		})

(Integer4 : 
	[Integer/3 -> lexNumberThousand]
		{ ^.IntegerValue <- #1; })

(Integer5 : 
	[Integer/3 -> lexNumberThousand 
				conjY? 
				Integer/2]
		{ ^.IntegerValue <- #3.IntegerValue + #1; })

(Integer6 : 
	[Integer/3 -> Integer/2 
				conjY? 
				lexNumberThousand]
		{ ^.IntegerValue <- #1.IntegerValue * #3; })

(Integer7 : 
	[Integer/3 -> Integer/2 
				conjY? 
				lexNumberThousand 
				conjY? 
				Integer/2]
		{ ^.IntegerValue <- (#1.IntegerValue * #3) + #5.IntegerValue; })


(Integer8 : 
	[Integer/4 -> lexNumberMillion]
		{ ^.IntegerValue <- #1; })

(Integer9 : 
	[Integer/4 -> lexNumberMillion 
				conjY? 
				Integer/3]
		{ ^.IntegerValue <- #3.IntegerValue + #1; })

(Integer10 : 
	[Integer/4 -> Integer/3 
				conjY? 
				lexNumberMillion]
		{ ^.IntegerValue <- #1.IntegerValue * #3; })

(Integer11 : 
	[Integer/4 -> Integer/3 
				conjY? 
				lexNumberMillion 
				conjY? 
				Integer/3]
		{ ^.IntegerValue <- (#1.IntegerValue * #3) + #5.IntegerValue; })

/*************************/
/** IntSeq		**/
/*************************/

(IntSeqn1 : 
	[IntSeqn -> lexNumber]
		{ ^.IntegerString <- ShapeToString(#1);
		  ^.IntegerLast   <- #1; })

(IntSeqn2 : 
	[IntSeqn/4 -> numInteger]
		{ ^.IntegerString <- ShapeToString(#1); 
		  ^.IntegerLast   <- #1; })

(IntSeqn21 : 
	[IntSeqn/4 -> IntSeqn/4 numInteger]
		{ ^.IntegerString <- LiteralConcat(#1.IntegerString,ShapeToString(#2)); 
		  ^.IntegerLast   <- #2; })

(IntSeqn3 : 
	[IntSeqn/2 -> IntSeqn/2 
				conjY? 
				IntSeqn/1]
		{ cond {
			(ShapeToInt(#3.IntegerString) == 0) {
				^.IntegerString <- LiteralConcat(#1.IntegerString,'0');
			}
		  	((#1.IntegerLast =!= 0) && IntegerAfter(ShapeToInt(#1.IntegerString),
							ShapeToInt(#3.IntegerString))) {
				^.IntegerString <- ShapeToString(
					ShapeToInt(#1.IntegerString) + 
					ShapeToInt(#3.IntegerString));
			}
		  	default {
				^.IntegerString <- LiteralConcat(#1.IntegerString,
							#3.IntegerString);
			}
		      }
		  ^.IntegerLast <- ShapeToInt(#3.IntegerString);
		})

(IntSeqn4 : 
	[IntSeqn/3 -> lexNumberThousand]
		{ ^.IntegerString <- ShapeToString(#1); 
		  ^.IntegerLast   <- #1; })

(IntSeqn5 : 
	[IntSeqn/3 -> lexNumberThousand 
				conjY? 
				IntSeqn/2]
		{ ^.IntegerString <- ShapeToString(
					#1 + 
					ShapeToInt(#3.IntegerString)); 
			^.IntegerLast <- ShapeToInt(#3.IntegerString); } )

(IntSeqn6 : 
	[IntSeqn/3 -> IntSeqn/2 
				conjY? 
				lexNumberThousand]
		{ ^.IntegerString <- LiteralConcat(#1.IntegerString,'000'); })

(IntSeqn7 : 
	[IntSeqn/3 -> IntSeqn/2 
				conjY? 
				lexNumberThousand 
				conjY? 
				IntSeqn/2]
		{ ^.IntegerString <- ShapeToString((ShapeToInt(#1.IntegerString) * #3) + ShapeToInt(#5.IntegerString)); })


(IntSeqn8 : 
	[IntSeqn/4 -> lexNumberMillion]
		{ ^.IntegerString <- ShapeToString(#1); })

(IntSeqn9 : 
	[IntSeqn/4 -> lexNumberMillion 
				conjY? 
				IntSeqn/3]
		{ ^.IntegerString <- ShapeToString(#1 + ShapeToInt(#3.IntegerString)); })

(IntSeqn10 : 
	[IntSeqn/4 -> IntSeqn/3 
				conjY? 
				lexNumberMillion]
		{ ^.IntegerString <- LiteralConcat(#1.IntegerString,'000000'); })

(IntSeqn11 : 
	[IntSeqn/4 -> IntSeqn/3 
				conjY? 
				lexNumberMillion 
				conjY? 
				IntSeqn/3]
		{ ^.IntegerString <- ShapeToString((ShapeToInt(#1.IntegerString) * #3) + ShapeToInt(#5.IntegerString)); })


/*************************/
/** Real		**/
/*************************/

(Real1 : 
	[Real -> numReal]
		{ ^.RealValue <- #1; })

/*************************/
/** Ordinal		**/
/*************************/

(Ordinal1 : 
	[Ordinal/1 -> lexOrdinal]
		{ ^.OrdinalValue <- #1; })

(Ordinal2 : 
	[Ordinal/2 -> Ordinal/1 conjY?  Ordinal/2]
		{ if (IntegerAfter(#1.OrdinalValue,#3.OrdinalValue)) {
			^.OrdinalValue <- #1.OrdinalValue + #3.OrdinalValue; 
		  } else {
			Fail();
		  }
		})

/*************************/
/** Terminal		**/
/*************************/

(Terminal1 : 
	[Terminal/1 -> lexTerminal]
		{ ^.TerminalValue <- #1; })

