%!PS-Adobe-3.0
%%Header: Date_01.lkt, Date_01.slk, Date_02.lkt, Date_02.slk, Date_03.lkt, Date_03.slk, Devices_01.lkt, Devices_01_FM.lkt, Devices_01_NLU_G.lkt, Devices_01_NLU_L.lkt
%%For: jquesada
%%Creator: a2ps version 4.14
%%CreationDate: Thu Jul 18 14:16:00 2013
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%Pages: 26
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 792 def
/sw 612 def
/llx 24 def
/urx 588 def
/ury 768 def
/lly 24 def
/#copies 1 def
/th 20.000000 def
/fnfs 15 def
/bfs 9.000000 def
/cw 5.400000 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 104.400000 mul
def
/ph
   699.300000 th add
def
/pmw 0 def
/pmh 0 def
/v 0 def
/x [
  0
] def
/y [
  pmh ph add 0 mul ph add
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 5 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1) 1
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.780000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (/***************************************************************************) p n
(2) # ( * SOURCEFILE => Data_01.lkt) N
(3) # ( ***************************************************************************/) N
(4) # () N
(5) # (lektaProject) N
(6) # () N
(7) # () S 8 T (projectHead) N
(8) # () S 8 T () S 16 T (projectDescriptor       : "Date_01") N
(9) # () S 8 T () S 16 T (projectLanguageScope    : [ es ]) N
(10) # () S 8 T () S 16 T (projectOperationScope   : [ test ]) N
(11) # () S 8 T () S 16 T (projectInterfaceScope   : [ dialogue ]) N
(12) # () S 8 T () S 16 T (projectCompileOutput    : ".Date_01.olk") N
(13) # () N
(14) # () S 8 T (projectSetup) N
(15) # () S 8 T () S 16 T (setupParserRoots = Command ) N
(16) # () N
(17) # () S 8 T (classModel) N
(18) # () S 8 T () S 16 T (classDef:ElementRange \( askInfo: ) N
(19) # () S 8 T () S 16 T () S 24 T () S 32 T ({ 'day', 'hour'} \)) N
(20) # () S 8 T () S 16 T (classDef:StructureComplex \( askCommand, Command : \(askInfo\) \)) N
(21) # () N
(22) # () S 8 T (lexicalModel forLanguage es) N
(23) # () S 8 T () S 16 T (\("dime el d\303\255a",   askCommand,      \(askInfo:'day'\)\)) N
(24) # () S 8 T () S 16 T (\("dime la hora",  askCommand,      \(askInfo:'hour'\)\)) N
(25) # () N
(26) # () S 8 T (grammaticalModel forLanguage es) N
(27) # () S 8 T () S 16 T (\(R1: [ Command -> askCommand ]) N
(28) # () S 8 T () S 16 T () S 24 T ({ ^ <- #1; } \)) N
(29) # () N
(30) # () S 8 T (conversationalModel) N
(31) # () S 8 T () S 16 T (MindBoardStructure: {) N
(32) # () S 8 T () S 16 T () S 24 T (\(Mind / Command\)) N
(33) # () S 8 T () S 16 T (}) N
(34) # () N
(35) # () S 8 T () S 16 T (SensoSchemata) N
(36) # () S 8 T () S 16 T () S 24 T (\(SensoScheme SenseCommand : [Command]) N
(37) # () S 8 T () S 16 T () S 24 T () S 32 T (SensoAction {) N
(38) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T ($MINDBOARD@Mind <- #OBJSENSO-1;) N
(39) # () S 8 T () S 16 T () S 24 T () S 32 T (}) N
(40) # () S 8 T () S 16 T () S 24 T (\)) N
(41) # () N
(42) # () S 8 T () S 16 T (RespondoSchemata) N
(43) # () S 8 T () S 16 T () S 24 T (\(RespondoScheme Command: [Command] ) N
(44) # () S 8 T () S 16 T () S 24 T () S 32 T (RespondoAction {) N
(45) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (^OBJRESPONDO <- $MINDBOARD@Mind;) N
(46) # () S 8 T () S 16 T () S 24 T () S 32 T (}) N
(47) # () S 8 T () S 16 T () S 24 T (\)) N
(48) # (   ) N
(49) # () S 8 T (scriboModel forLanguage es) N
(50) # () S 8 T () S 16 T (ScriboSchemata) N
(51) # () S 8 T () S 16 T () S 24 T (\(ScriboScheme Command: [Command]) N
(52) # () S 8 T () S 16 T () S 24 T () S 32 T (ScriboCapture {) N
(53) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (#OBJLOCUTIO-1 == \(askInfo:'day'\)) N
(54) # () S 8 T () S 16 T () S 24 T () S 32 T (}) N
(55) # () S 8 T () S 16 T () S 24 T () S 32 T (ScriboAction {) N
(56) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\("Es el d\303\255a "\);) N
(57) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\(ClockAskDayOfTheMonth\(\)\);) N
(58) # () S 8 T () S 16 T () S 24 T () S 32 T (}) N
(59) # () S 8 T () S 16 T () S 24 T (\)) N
(60) # () N
(61) # () S 8 T () S 16 T () S 24 T (\(ScriboScheme Command: [Command]) N
(62) # () S 8 T () S 16 T () S 24 T () S 32 T (ScriboCapture {) N
(63) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (#OBJLOCUTIO-1 == \(askInfo:'hour'\)) N
(64) # () S 8 T () S 16 T () S 24 T () S 32 T (}) N
(65) # () S 8 T () S 16 T () S 24 T () S 32 T (ScriboAction {) N
(66) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\("Son las "\);) N
(67) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\(ClockAskHour\(\)\);) N
(68) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\(":"\);) N
(69) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\(ClockAskMinute\(\)\);) N
(70) # () S 8 T () S 16 T () S 24 T () S 32 T (}) N
(71) # () S 8 T () S 16 T () S 24 T (\)) N
(72) # () N
(Date_01.lkt) (Page 1/1) (jueves julio 18, 2013) title
border
grestore
(LEKTA TRAINING) rhead
(1/26) (Training Session 2) (LEKTA) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 2
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.780000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (LaunchLektaKernel\(\)) p n
(2) # () N
(3) # (UseProject \(ProjectCompile        : ".Date_01.olk"\)) N
(4) # () N
(5) # (DisplayProcessAbstractOn) N
(6) # () N
(7) # (CreateDialogue\(\)) N
(Date_01.slk) (Page 1/1) (jueves julio 18, 2013) title
border
grestore
(LEKTA TRAINING) rhead
(2/26) (Training Session 2) (LEKTA) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 3
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.780000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (/***************************************************************************) p n
(2) # ( * SOURCEFILE => Data_02.lkt) N
(3) # ( ***************************************************************************/) N
(4) # () N
(5) # (lektaProject) N
(6) # () N
(7) # () S 8 T (projectHead) N
(8) # () S 8 T () S 16 T (projectDescriptor       : "Date_02") N
(9) # () S 8 T () S 16 T (projectLanguageScope    : [ es ]) N
(10) # () S 8 T () S 16 T (projectOperationScope   : [ test ]) N
(11) # () S 8 T () S 16 T (projectInterfaceScope   : [ dialogue ]) N
(12) # () S 8 T () S 16 T (projectCompileOutput    : ".Date_02.olk") N
(13) # () N
(14) # () S 8 T (projectSetup) N
(15) # () S 8 T () S 16 T (setupParserRoots = Command ) N
(16) # () N
(17) # () S 8 T (classModel) N
(18) # () S 8 T () S 16 T (classDef:ElementRange \( askInfo: ) N
(19) # () S 8 T () S 16 T () S 24 T ({ 'day', 'hour'} \)) N
(20) # () S 8 T () S 16 T (classDef:StructureComplex \( askCommand, Command : \(askInfo\) \)) N
(21) # () S 8 T () S 16 T (classDef:StructureBatch \( Commands : \(Command \) \)) N
(22) # () S 8 T () S 16 T (classDef:StructureComplex \( Task : \( Commands \) \)) N
(23) # () N
(24) # () S 8 T (lexicalModel forLanguage es) N
(25) # () S 8 T () S 16 T (\("dime el d\303\255a",   askCommand,      \(askInfo:'day'\)\)) N
(26) # () S 8 T () S 16 T (\("dime la hora",  askCommand,      \(askInfo:'hour'\)\)) N
(27) # () N
(28) # () S 8 T (grammaticalModel forLanguage es) N
(29) # () S 8 T () S 16 T (\(R1: [ Command -> askCommand ]) N
(30) # () S 8 T () S 16 T () S 24 T ({ ^ <- #1; } \)) N
(31) # () N
(32) # () S 8 T (conversationalModel) N
(33) # () S 8 T () S 16 T (MindBoardStructure: {) N
(34) # () S 8 T () S 16 T () S 24 T (\(Mind / Task\)) N
(35) # () S 8 T () S 16 T (}) N
(36) # () N
(37) # () S 8 T () S 16 T (SensoSchemata) N
(38) # () S 8 T () S 16 T () S 24 T (\(SensoScheme SenseCommand : [Command]) N
(39) # () S 8 T () S 16 T () S 24 T () S 32 T (SensoAction {) N
(40) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (BatchInsertEnd\($MINDBOARD@Mind.Commands, #OBJSENSO-1\);) N
(41) # () S 8 T () S 16 T () S 24 T () S 32 T (}) N
(42) # () S 8 T () S 16 T () S 24 T (\)) N
(43) # () N
(44) # () S 8 T () S 16 T (RespondoSchemata) N
(45) # () S 8 T () S 16 T () S 24 T (\(RespondoScheme DS: [Command]) N
(46) # () S 8 T () S 16 T () S 24 T () S 32 T (RespondoCapture {) N
(47) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (\(BatchSize\($MINDBOARD@Mind.Commands\) > 0\)) N
(48) # () S 8 T () S 16 T () S 24 T () S 32 T (}) N
(49) # () S 8 T () S 16 T () S 24 T () S 32 T (RespondoAction {) N
(50) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (Command command;) N
(51) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (BatchExtractInit\($MINDBOARD@Mind.Commands,command\);) N
(52) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (^OBJRESPONDO <- command;) N
(53) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (RespondoRetry\(\);) N
(54) # () S 8 T () S 16 T () S 24 T () S 32 T (}) N
(55) # () S 8 T () S 16 T () S 24 T (\)) N
(56) # () N
(57) # () S 8 T (scriboModel forLanguage es) N
(58) # () S 8 T () S 16 T (ScriboSchemata) N
(59) # () S 8 T () S 16 T () S 24 T (\(ScriboScheme Command: [Command]) N
(60) # () S 8 T () S 16 T () S 24 T () S 32 T (ScriboCapture {) N
(61) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (#OBJLOCUTIO-1 == \(askInfo:'day'\)) N
(62) # () S 8 T () S 16 T () S 24 T () S 32 T (}) N
(63) # () S 8 T () S 16 T () S 24 T () S 32 T (ScriboAction {) N
(64) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\("Es el d\303\255a "\);) N
(65) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\(ClockAskDayOfTheMonth\(\)\);) N
(66) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\(". "\);) N
(67) # () S 8 T () S 16 T () S 24 T () S 32 T (}) N
(68) # () S 8 T () S 16 T () S 24 T (\)) N
(69) # () N
(70) # () S 8 T () S 16 T () S 24 T (\(ScriboScheme Command: [Command]) N
(71) # () S 8 T () S 16 T () S 24 T () S 32 T (ScriboCapture {) N
(72) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (#OBJLOCUTIO-1 == \(askInfo:'hour'\)) N
(73) # () S 8 T () S 16 T () S 24 T () S 32 T (}) N
(74) # () S 8 T () S 16 T () S 24 T () S 32 T (ScriboAction {) N
(75) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\("Son las "\);) N
(76) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\(ClockAskHour\(\)\);) N
(77) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\(":"\);) N
(Date_02.lkt) (Page 1/2) (jueves julio 18, 2013) title
border
grestore
(LEKTA TRAINING) rhead
(3/26) (Training Session 2) (LEKTA) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2) 4
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.780000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(78) # () p 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\(ClockAskMinute\(\)\);) N
(79) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\(". "\);) N
(80) # () S 8 T () S 16 T () S 24 T () S 32 T (}) N
(81) # () S 8 T () S 16 T () S 24 T (\)) N
(82) # () N
(Date_02.lkt) (Page 2/2) (jueves julio 18, 2013) title
border
grestore
(LEKTA TRAINING) rhead
(4/26) (Training Session 2) (LEKTA) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 5
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.780000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (LaunchLektaKernel\(\)) p n
(2) # () N
(3) # (UseProject \(ProjectCompile        : ".Date_02.olk"\)) N
(4) # () N
(5) # (DisplayProcessAbstractOn) N
(6) # () N
(7) # (CreateDialogue\(\)) N
(Date_02.slk) (Page 1/1) (jueves julio 18, 2013) title
border
grestore
(LEKTA TRAINING) rhead
(5/26) (Training Session 2) (LEKTA) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 6
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.780000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (/***************************************************************************) p n
(2) # ( * SOURCEFILE => Data_03.lkt) N
(3) # ( ***************************************************************************/) N
(4) # () N
(5) # (lektaProject) N
(6) # () N
(7) # () S 8 T (projectHead) N
(8) # () S 8 T () S 16 T (projectDescriptor       : "Date_03") N
(9) # () S 8 T () S 16 T (projectLanguageScope    : [ es ]) N
(10) # () S 8 T () S 16 T (projectOperationScope   : [ test ]) N
(11) # () S 8 T () S 16 T (projectInterfaceScope   : [ dialogue ]) N
(12) # () S 8 T () S 16 T (projectCompileOutput    : ".Date_03.olk") N
(13) # () N
(14) # () S 8 T (projectSetup) N
(15) # () S 8 T () S 16 T (setupParserRoots = Command ) N
(16) # () N
(17) # () S 8 T (classModel) N
(18) # () S 8 T () S 16 T (classDef:ElementBool \(boolean\)) N
(19) # () S 8 T () S 16 T (classDef:ElementInt \(integer\)) N
(20) # () S 8 T () S 16 T (classDef:ElementLiteral \(string\)) N
(21) # () S 8 T () S 16 T (classDef:ElementRange \( askInfo: ) N
(22) # () S 8 T () S 16 T () S 24 T ({ 'date', 'day', 'hour'} \)) N
(23) # () S 8 T () S 16 T (classDef:StructureComplex \( askCommand, Command : \(askInfo\) \)) N
(24) # () S 8 T () S 16 T (classDef:StructureBatch \( Commands : \(Command \) \)) N
(25) # () S 8 T () S 16 T (classDef:StructureComplex \( Task : \( Commands \) \)) N
(26) # () N
(27) # () S 8 T (lexicalModel forLanguage es) N
(28) # () S 8 T () S 16 T (\("dime el d\303\255a",   askCommand,      \(askInfo:'day'\)\)) N
(29) # () S 8 T () S 16 T (\("dime la hora",  askCommand,      \(askInfo:'hour'\)\)) N
(30) # () S 8 T () S 16 T (\("dime la fecha",  askCommand,     \(askInfo:'date'\)\)) N
(31) # () N
(32) # () S 8 T (grammaticalModel forLanguage es) N
(33) # () S 8 T () S 16 T (\(R1: [ Command -> askCommand ]) N
(34) # () S 8 T () S 16 T () S 24 T ({ ^ <- #1; } \)) N
(35) # () N
(36) # () S 8 T (conversationalModel) N
(37) # () S 8 T () S 16 T (MindBoardStructure: {) N
(38) # () S 8 T () S 16 T () S 24 T (\(Mind / Task\)) N
(39) # () S 8 T () S 16 T (}) N
(40) # () N
(41) # () S 8 T () S 16 T (SensoSchemata) N
(42) # () S 8 T () S 16 T () S 24 T (\(SensoScheme SenseCommand : [Command]) N
(43) # () S 8 T () S 16 T () S 24 T () S 32 T (SensoAction {) N
(44) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (BatchInsertEnd\($MINDBOARD@Mind.Commands, #OBJSENSO-1\);) N
(45) # () S 8 T () S 16 T () S 24 T () S 32 T (}) N
(46) # () S 8 T () S 16 T () S 24 T (\)) N
(47) # () N
(48) # () S 8 T () S 16 T (RespondoSchemata) N
(49) # () S 8 T () S 16 T () S 24 T (\(RespondoScheme DS: [Command]) N
(50) # () S 8 T () S 16 T () S 24 T () S 32 T (RespondoCapture {) N
(51) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (\(BatchSize\($MINDBOARD@Mind.Commands\) > 0\)) N
(52) # () S 8 T () S 16 T () S 24 T () S 32 T (}) N
(53) # () S 8 T () S 16 T () S 24 T () S 32 T (RespondoAction {) N
(54) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (Command command;) N
(55) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (BatchExtractInit\($MINDBOARD@Mind.Commands,command\);) N
(56) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (^OBJRESPONDO <- command;) N
(57) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (RespondoRetry\(\);) N
(58) # () S 8 T () S 16 T () S 24 T () S 32 T (}) N
(59) # () S 8 T () S 16 T () S 24 T (\)) N
(60) # () N
(61) # () S 8 T (functionModel) N
(62) # () S 8 T () S 16 T (string monthName \(integer month\) {) N
(63) # () S 8 T () S 16 T () S 24 T (switch \(month\) {) N
(64) # () S 8 T () S 16 T () S 24 T () S 32 T (case 1 return 'enero';) N
(65) # () S 8 T () S 16 T () S 24 T () S 32 T (case 2 return 'febrero';) N
(66) # () S 8 T () S 16 T () S 24 T () S 32 T (case 3 return 'marzo';) N
(67) # () S 8 T () S 16 T () S 24 T () S 32 T (case 4 return 'abril';) N
(68) # () S 8 T () S 16 T () S 24 T () S 32 T (case 5 return 'mayo';) N
(69) # () S 8 T () S 16 T () S 24 T () S 32 T (case 6 return 'junio';) N
(70) # () S 8 T () S 16 T () S 24 T () S 32 T (case 7 return 'julio';) N
(71) # () S 8 T () S 16 T () S 24 T () S 32 T (case 8 return 'agosto';) N
(72) # () S 8 T () S 16 T () S 24 T () S 32 T (case 9 return 'septiembre';) N
(73) # () S 8 T () S 16 T () S 24 T () S 32 T (case 10 return 'octubre';) N
(74) # () S 8 T () S 16 T () S 24 T () S 32 T (case 11 return 'noviembre';) N
(75) # () S 8 T () S 16 T () S 24 T () S 32 T (case 12 return 'diciembre';) N
(76) # () S 8 T () S 16 T () S 24 T (}) N
(77) # () S 8 T () S 16 T (}) N
(Date_03.lkt) (Page 1/3) (jueves julio 18, 2013) title
border
grestore
(LEKTA TRAINING) rhead
(6/26) (Training Session 2) (LEKTA) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2) 7
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.780000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(78) # () p n
(79) # () S 8 T () S 16 T (string weekdayName \(integer day\) {) N
(80) # () S 8 T () S 16 T () S 24 T (switch \(day\) {) N
(81) # () S 8 T () S 16 T () S 24 T () S 32 T (case 1 return 'lunes';) N
(82) # () S 8 T () S 16 T () S 24 T () S 32 T (case 2 return 'martes';) N
(83) # () S 8 T () S 16 T () S 24 T () S 32 T (case 3 return 'miercoles';) N
(84) # () S 8 T () S 16 T () S 24 T () S 32 T (case 4 return 'jueves';) N
(85) # () S 8 T () S 16 T () S 24 T () S 32 T (case 5 return 'viernes';) N
(86) # () S 8 T () S 16 T () S 24 T () S 32 T (case 6 return 'sabado';) N
(87) # () S 8 T () S 16 T () S 24 T () S 32 T (case 7 return 'domingo';) N
(88) # () S 8 T () S 16 T () S 24 T (}) N
(89) # () S 8 T () S 16 T (}) N
(90) # () N
(91) # () S 8 T () S 16 T (string timeExact \(integer hour, integer minute, integer second\) {) N
(92) # () S 8 T () S 16 T () S 24 T (boolean am;) N
(93) # () S 8 T () S 16 T () S 24 T (string time;) N
(94) # () N
(95) # () S 8 T () S 16 T () S 24 T (if \(hour > 12\) {) N
(96) # () S 8 T () S 16 T () S 24 T () S 32 T (am <- False;) N
(97) # () S 8 T () S 16 T () S 24 T () S 32 T (hour -= 12;) N
(98) # () S 8 T () S 16 T () S 24 T (} else {) N
(99) # () S 8 T () S 16 T () S 24 T () S 32 T (am <- True;) N
(100) # () S 8 T () S 16 T () S 24 T (}) N
(101) # () N
(102) # () S 8 T () S 16 T () S 24 T (if \(hour == 1\) {) N
(103) # () S 8 T () S 16 T () S 24 T () S 32 T (time <- 'Es la 1 ';) N
(104) # () S 8 T () S 16 T () S 24 T (} else {) N
(105) # () S 8 T () S 16 T () S 24 T () S 32 T (time <- 'Son las ';) N
(106) # () S 8 T () S 16 T () S 24 T () S 32 T (time <- LiteralConcat\(time,ShapeToLiteral\(hour\)\);) N
(107) # () S 8 T () S 16 T () S 24 T () S 32 T (time <- LiteralConcat\(time,' '\);) N
(108) # () S 8 T () S 16 T () S 24 T (}) N
(109) # () N
(110) # () S 8 T () S 16 T () S 24 T (if \(am\) {) N
(111) # () S 8 T () S 16 T () S 24 T () S 32 T (time <- LiteralConcat\(time,' de la ma\303\261ana, '\);) N
(112) # () S 8 T () S 16 T () S 24 T (} else {) N
(113) # () S 8 T () S 16 T () S 24 T () S 32 T (if \(hour < 10\)) N
(114) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (time <- LiteralConcat\(time,' de la tarde, '\);) N
(115) # () S 8 T () S 16 T () S 24 T () S 32 T (else) N
(116) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (time <- LiteralConcat\(time,' de la noche, '\);) N
(117) # () S 8 T () S 16 T () S 24 T (}) N
(118) # () N
(119) # () S 8 T () S 16 T () S 24 T (time <- LiteralConcat\(time,ShapeToLiteral\(minute\)\);) N
(120) # () S 8 T () S 16 T () S 24 T (time <- LiteralConcat\(time,' minutos y '\);) N
(121) # () S 8 T () S 16 T () S 24 T (time <- LiteralConcat\(time,ShapeToLiteral\(second\)\);) N
(122) # () S 8 T () S 16 T () S 24 T (time <- LiteralConcat\(time,' segundos.'\);) N
(123) # () N
(124) # () S 8 T () S 16 T () S 24 T (return time;) N
(125) # () S 8 T () S 16 T (}) N
(126) # () N
(127) # () N
(128) # () S 8 T (scriboModel forLanguage es) N
(129) # () S 8 T () S 16 T (ScriboSchemata) N
(130) # () S 8 T () S 16 T () S 24 T (\(ScriboScheme Command: [Command]) N
(131) # () S 8 T () S 16 T () S 24 T () S 32 T (ScriboCapture {) N
(132) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (#OBJLOCUTIO-1 == \(askInfo:'day'\)) N
(133) # () S 8 T () S 16 T () S 24 T () S 32 T (}) N
(134) # () S 8 T () S 16 T () S 24 T () S 32 T (ScriboAction {) N
(135) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\("Es el d\303\255a "\);) N
(136) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\(ClockAskDayOfTheMonth\(\)\);) N
(137) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\(". "\);) N
(138) # () S 8 T () S 16 T () S 24 T () S 32 T (}) N
(139) # () S 8 T () S 16 T () S 24 T (\)) N
(140) # () N
(141) # () S 8 T () S 16 T () S 24 T (\(ScriboScheme Command: [Command]) N
(142) # () S 8 T () S 16 T () S 24 T () S 32 T (ScriboCapture {) N
(143) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (#OBJLOCUTIO-1 == \(askInfo:'hour'\)) N
(144) # () S 8 T () S 16 T () S 24 T () S 32 T (}) N
(145) # () S 8 T () S 16 T () S 24 T () S 32 T (ScriboAction {) N
(146) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\("Son las "\);) N
(147) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\(ClockAskHour\(\)\);) N
(148) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\(":"\);) N
(149) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\(ClockAskMinute\(\)\);) N
(150) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\(". "\);) N
(151) # () S 8 T () S 16 T () S 24 T () S 32 T (}) N
(152) # () S 8 T () S 16 T () S 24 T (\)) N
(153) # () N
(154) # () S 8 T () S 16 T () S 24 T (\(ScriboScheme Command: [Command]) N
(Date_03.lkt) (Page 2/3) (jueves julio 18, 2013) title
border
grestore
(LEKTA TRAINING) rhead
(7/26) (Training Session 2) (LEKTA) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 8
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.780000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(155) # () p 8 T () S 16 T () S 24 T () S 32 T (ScriboCapture {) N
(156) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (#OBJLOCUTIO-1 == \(askInfo:'date'\)) N
(157) # () S 8 T () S 16 T () S 24 T () S 32 T (}) N
(158) # () S 8 T () S 16 T () S 24 T () S 32 T (ScriboAction {) N
(159) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\("Hoy es el "\);) N
(160) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\(ClockAskDayOfTheMonth\(\)\);) N
(161) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\(" "\);) N
(162) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\(monthName\(ClockAskMonth\(\)\)\);) N
(163) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\(" de "\);) N
(164) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\(ClockAskYear\(\)\);) N
(165) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\(". Es "\);) N
(166) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\(weekdayName\(ClockAskDayOfTheWeek\(\)\)\);) N
(167) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\(". "\);) N
(168) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (SetMainAnswer\(timeExact\() N
(169) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T (ClockAskHour\(\),) N
(170) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T (ClockAskMinute\(\),) N
(171) # () S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T (ClockAskSecond\(\)\)\);) N
(172) # () S 8 T () S 16 T () S 24 T () S 32 T (}) N
(173) # () S 8 T () S 16 T () S 24 T (\)) N
(174) # () N
(Date_03.lkt) (Page 3/3) (jueves julio 18, 2013) title
border
grestore
(LEKTA TRAINING) rhead
(8/26) (Training Session 2) (LEKTA) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 9
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.780000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (LaunchLektaKernel\(\)) p n
(2) # () N
(3) # (UseProject \(ProjectCompile        : ".Date_03.olk"\)) N
(4) # () N
(5) # (DisplayProcessAbstractOn) N
(6) # () N
(7) # (CreateDialogue\(\)) N
(Date_03.slk) (Page 1/1) (jueves julio 18, 2013) title
border
grestore
(LEKTA TRAINING) rhead
(9/26) (Training Session 2) (LEKTA) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 10
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.780000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (/***************************************************************************) p n
(2) # ( * SOURCEFILE => Devices_01.lkt) N
(3) # ( ***************************************************************************/) N
(4) # () N
(5) # (lektaProject) N
(6) # () N
(7) # (   projectHead) N
(8) # () S 8 T () S 16 T (projectDescriptor       : "Devices") N
(9) # () S 8 T () S 16 T (projectLanguageScope    : [ es ]) N
(10) # () S 8 T () S 16 T (projectOperationScope   : [ test ]) N
(11) # () S 8 T () S 16 T (projectInterfaceScope   : [ dialogue ]) N
(12) # () S 8 T () S 16 T (projectCompileOutput    : ".Devices_01.olk") N
(13) # () N
(14) # (   projectSetup) N
(15) # (      setupParserRoots = Device, Operation, Command ) N
(16) # (      setupRuntimeSpyMessageOn) N
(17) # () N
(18) # (   classModel) N
(19) # (      #Include "Devices_01_FM.lkt") N
(20) # () N
(21) # (   lexicalModel forLanguage es) N
(22) # (      #Include "Devices_01_NLU_L.lkt") N
(23) # () N
(24) # (   grammaticalModel forLanguage es) N
(25) # (      #Include "Devices_01_NLU_G.lkt") N
(26) # () N
(27) # (   functionModel) N
(28) # (      #Include "Devices_01_FUN_Decl.lkt") N
(29) # () N
(30) # (   conversationalModel) N
(31) # (      MindBoardStructure: {) N
(32) # (         \(Input  / InputModel\)) N
(33) # (         \(Control / Control\)) N
(34) # (         \(Output / OutputModel\)) N
(35) # (      }) N
(36) # () N
(37) # (         LaunchConversation: {) N
(38) # (            LaunchSendToMindBoard:) N
(39) # (               \(Control = \(Position: 'start'\) \)) N
(40) # (         }) N
(41) # () N
(42) # (      SensoSchemata) N
(43) # (         #Include "Devices_01_DM_Senso.lkt") N
(44) # () N
(45) # (      CogitoSchemata) N
(46) # (         #Include "Devices_01_DM_Cogito.lkt") N
(47) # () N
(48) # (      RespondoSchemata) N
(49) # (         #Include "Devices_01_DM_Respondo.lkt") N
(50) # () N
(51) # (   ) N
(52) # (   functionModel) N
(53) # (      #Include "Devices_01_FUN_Spec.lkt") N
(54) # () N
(55) # (   scriboModel forLanguage es) N
(56) # (      ScriboSchemata) N
(57) # (         #Include "Devices_01_NLG.lkt") N
(58) # () N
(59) # () N
(Devices_01.lkt) (Page 1/1) (jueves julio 18, 2013) title
border
grestore
(LEKTA TRAINING) rhead
(10/26) (Training Session 2) (LEKTA) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 11
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.780000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (/***************************************************************************) p n
(2) # ( * SOURCEFILE => Devices_01_FM.lkt) N
(3) # ( ***************************************************************************/) N
(4) # () N
(5) # (      // AUXILIAR) N
(6) # (      classDef:ElementInt) S 32 T (\(integer\)) N
(7) # (      classDef:ElementLiteral) S 32 T (\(string\)) N
(8) # () N
(9) # (      // INPUT) N
(10) # (      classDef:ElementRange) S 32 T (\(DeviceId: ) N
(11) # () S 8 T () S 16 T () S 24 T ({ 'alarm', 'heating', 'irrigation' } \)) N
(12) # () N
(13) # (      classDef:ElementRange) S 32 T (\(OperationId: ) N
(14) # () S 8 T () S 16 T () S 24 T ({ 'activate', 'deactivate' } \)) N
(15) # () N
(16) # (      classDef:ElementRange) S 32 T (\(CommandId: ) N
(17) # () S 8 T () S 16 T () S 24 T ({ 'help', 'back', 'exit' } \)) N
(18) # () N
(19) # (      classDef:StructureComplex) S 32 T (\(Device: \(DeviceId\) \)) N
(20) # (      classDef:StructureComplex) S 32 T (\(Operation: \(OperationId\) \)) N
(21) # (      classDef:StructureComplex) S 32 T (\(Command: \(CommandId\) \)) N
(22) # () N
(23) # (      // OUTPUT) N
(24) # (      classDef:ElementRange ) S 32 T (\(AnswerCommand: ) N
(25) # () S 8 T () S 16 T () S 24 T ({ 'interactivate', 'mensaje', 'outcome' }\)) N
(26) # () N
(27) # (      classDef:ElementRange ) S 32 T (\(AnswerClass: ) N
(28) # () S 8 T () S 16 T () S 24 T ({ 'welcome', 'goodbye',) N
(29) # () S 8 T () S 16 T () S 24 T (  'askDevice', 'askHelp', ) N
(30) # () S 8 T () S 16 T () S 24 T (  'askOperationAlarm', 'askOperationHeating', 'askOperationIrrigation', ) N
(31) # () S 8 T () S 16 T () S 24 T (  'informAlarmOn', 'informAlarmOff', 'helpAlarm', ) N
(32) # () S 8 T () S 16 T () S 24 T (  'informHeatingOn', 'informHeatingOff', 'helpHeating',) N
(33) # () S 8 T () S 16 T () S 24 T (  'informIrrigationOn', 'informIrrigationOff', 'helpIrrigation' }\)) N
(34) # () N
(35) # (      classDef:StructureComplex ) S 40 T (\(OutputItem: \(AnswerCommand, AnswerType\) \)) N
(36) # () N
(37) # (      classDef:StructureBatch ) S 32 T (\(OutputBatch: \(OutputItem\) \)) N
(38) # () N
(39) # (      classDef:StructureComplex ) S 40 T (\(OutputModel: \(OutputBatch\) \)) N
(40) # () N
(41) # (      // MEMORY) N
(42) # (      classDef:StructureComplex) S 32 T (\(InputModel: \(Device, Operation, Command\) \)) N
(43) # () N
(44) # (      classDef:ElementRange) S 32 T (\(Position: { 'start', 'quit',) N
(45) # () S 8 T () S 16 T () S 24 T ('askDevice', 'askHelp',) N
(46) # () S 8 T () S 16 T () S 24 T ('askOperationAlarm', 'askOperationHeating', 'askOperationIrrigation' } \)) N
(47) # () N
(48) # (      classDef:StructureComplex) S 32 T (\(Control: \(Position\) \)) N
(Devices_01_FM.lkt) (Page 1/1) (jueves julio 18, 2013) title
border
grestore
(LEKTA TRAINING) rhead
(11/26) (Training Session 2) (LEKTA) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 12
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.780000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (/***************************************************************************) p n
(2) # ( * SOURCEFILE => Devices_01_NLU_G.lkt) N
(3) # ( ***************************************************************************/) N
(4) # () N
(5) # (      \(R1: [ Device -> DeviceId ]) N
(6) # (         { ^.DeviceId <- #1; } \)) N
(7) # () N
(8) # (      \(R2: [ Operation -> OperationId ]) N
(9) # (         { ^.OperationId <- #1; } \)) N
(10) # () N
(11) # (      \(R3: [ Command -> CommandId ]) N
(12) # (         { ^.CommandId <- #1; } \)) N
(13) # () N
(Devices_01_NLU_G.lkt) (Page 1/1) (jueves julio 18, 2013) title
border
grestore
(LEKTA TRAINING) rhead
(12/26) (Training Session 2) (LEKTA) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 13
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.780000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (/***************************************************************************) p n
(2) # ( * SOURCEFILE => Devices_01_NLU_L.lkt) N
(3) # ( ***************************************************************************/) N
(4) # () N
(5) # (      \("alarma",        DeviceId,   'alarm'\)) N
(6) # (      \("calefaccion",   DeviceId,   'heating'\)) N
(7) # (      \("riego",         DeviceId,   'irrigation'\)) N
(8) # () N
(9) # (      \("activar",       OperationId,   'activate'\)) N
(10) # (      \("desactivar",    OperationId,   'deactivate'\)) N
(11) # () N
(12) # (      \("ayuda",         CommandId,   'help'\)) N
(13) # (      \("volver",        CommandId,   'back'\)) N
(14) # (      \("adios",         CommandId,   'exit'\)) N
(Devices_01_NLU_L.lkt) (Page 1/1) (jueves julio 18, 2013) title
border
grestore
(LEKTA TRAINING) rhead
(13/26) (Training Session 2) (LEKTA) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 14
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.780000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (/***************************************************************************) p n
(2) # ( * SOURCEFILE => Devices_01_DM_Senso.lkt) N
(3) # ( ***************************************************************************/) N
(4) # () N
(5) # (         \(SensoScheme RSetup : [Control]) N
(6) # (            SensoCapture {) N
(7) # (               #OBJSENSO-1.Position == 'start') N
(8) # (            }) N
(9) # (            SensoAction {) N
(10) # (               $MINDBOARD@Control <- #OBJSENSO-1;) N
(11) # (            }) N
(12) # (         \)) N
(13) # () N
(14) # (         \(SensoScheme RDis : [Device]) N
(15) # (            SensoAction {) N
(16) # (               $MINDBOARD@Input.Device <- #OBJSENSO-1;) N
(17) # (            }) N
(18) # (         \)) N
(19) # () N
(20) # (         \(SensoScheme RFun : [Operation]) N
(21) # (            SensoAction {) N
(22) # (               $MINDBOARD@Input.Operation <- #OBJSENSO-1;) N
(23) # (            }) N
(24) # (         \)) N
(25) # () N
(26) # (         \(SensoScheme RGen : [Command]) N
(27) # (            SensoAction {) N
(28) # (               $MINDBOARD@Input.Command <- #OBJSENSO-1;) N
(29) # (            }) N
(30) # (         \)) N
(Devices_01_DM_Senso.lkt) (Page 1/1) (jueves julio 18, 2013) title
border
grestore
(LEKTA TRAINING) rhead
(14/26) (Training Session 2) (LEKTA) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 15
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.780000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (/***************************************************************************) p n
(2) # ( * SOURCEFILE => Devices_01_DM_Cogito.lkt) N
(3) # ( ***************************************************************************/) N
(4) # () N
(5) # (         \(CogitoScheme CogitoStart :) N
(6) # (            CogitoCapture {) N
(7) # (               $MINDBOARD@Control.Position == 'start') N
(8) # (            }) N
(9) # (            CogitoAction {) N
(10) # (               OutputItem outputitem <- \(AnswerCommand:'interactivate',AnswerClass:'welcome'\);) N
(11) # (               BatchInsertEnd\($MINDBOARD@Output.OutputBatch,outputitem\);) N
(12) # (               $MINDBOARD@Control.Position <- 'askDevice';) N
(13) # (            }) N
(14) # (         \)) N
(15) # () N
(16) # (         \(CogitoScheme CogitoQuit :) N
(17) # (            CogitoCapture {) N
(18) # (               $MINDBOARD@Control.Position == 'quit') N
(19) # (            }) N
(20) # (            CogitoAction {) N
(21) # (               Quit\(\);) N
(22) # (            }) N
(23) # (         \)) N
(24) # () N
(25) # (         \(CogitoScheme CogitoAskDevice :) N
(26) # (            CogitoCapture {) N
(27) # (               $MINDBOARD@Control.Position == 'askDevice') N
(28) # (            }) N
(29) # (            CogitoAction {) N
(30) # (               if \($MINDBOARD@Input.Device\) {) N
(31) # (                  switch \($MINDBOARD@Input.Device.DeviceId\) {) N
(32) # (                     case 'alarm' {) N
(33) # (                        $MINDBOARD@Control.Position <- 'askOperationAlarm';) N
(34) # (                     }) N
(35) # (                     case 'heating' {) N
(36) # (                        $MINDBOARD@Control.Position <- 'askOperationHeating';) N
(37) # (                     }) N
(38) # (                     case 'irrigation' {) N
(39) # (                        $MINDBOARD@Control.Position <- 'askOperationIrrigation';) N
(40) # (                     }) N
(41) # (                  }) N
(42) # (                  Erase\($MINDBOARD@Input.Device\);) N
(43) # (               } else {) N
(44) # (                  if \($MINDBOARD@Input.Command\) {) N
(45) # (                     switch \($MINDBOARD@Input.Command.CommandId\) {) N
(46) # (                        case 'help' {) N
(47) # (                           $MINDBOARD@Control.Position <- 'askHelp';) N
(48) # (                        }) N
(49) # (                        case 'exit' {) N
(50) # (                           $MINDBOARD@Control.Position <- 'quit';) N
(51) # (                           Quit\(\);) N
(52) # (                        }) N
(53) # (                     }) N
(54) # (                     Erase\($MINDBOARD@Input.Command\);) N
(55) # (                  } else {) N
(56) # (                     Menu\(\);) N
(57) # (                  }) N
(58) # (               }) N
(59) # (            }) N
(60) # (         \)) N
(61) # () N
(62) # (         \(CogitoScheme CogitoAskHelp :) N
(63) # (            CogitoCapture {) N
(64) # (               $MINDBOARD@Control.Position == 'askHelp') N
(65) # (            }) N
(66) # (            CogitoAction {) N
(67) # (               OutputItem outputitem <- \(AnswerCommand:'mensaje',AnswerClass:'askHelp'\);) N
(68) # (               BatchInsertEnd\($MINDBOARD@Output.OutputBatch,outputitem\);) N
(69) # (               $MINDBOARD@Control.Position <- 'askDevice';) N
(70) # (            }) N
(71) # (         \)) N
(72) # () N
(73) # (         \(CogitoScheme CogitoAskOperationAlarm :) N
(74) # (            CogitoCapture {) N
(75) # (               $MINDBOARD@Control.Position == 'askOperationAlarm') N
(76) # (            }) N
(77) # (            CogitoAction {) N
(Devices_01_DM_Cogito.lkt) (Page 1/3) (jueves julio 18, 2013) title
border
grestore
(LEKTA TRAINING) rhead
(15/26) (Training Session 2) (LEKTA) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2) 16
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.780000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(78) # (               if \($MINDBOARD@Input.Operation\) {) p n
(79) # (                  switch \($MINDBOARD@Input.Operation.OperationId\) {) N
(80) # (                     case 'activate' {) N
(81) # (                        AlarmActivate\(\);) N
(82) # (                        $MINDBOARD@Control.Position <- 'askDevice';) N
(83) # (                        Menu\(\);) N
(84) # (                     }) N
(85) # (                     case 'deactivate' {) N
(86) # (                        AlarmDeactivate\(\);) N
(87) # (                        $MINDBOARD@Control.Position <- 'askDevice';) N
(88) # (                        Menu\(\);) N
(89) # (                     }) N
(90) # (                  }) N
(91) # (                  Erase\($MINDBOARD@Input.Operation\);) N
(92) # (               } else {) N
(93) # (                  if \($MINDBOARD@Input.Command\) {) N
(94) # (                     switch \($MINDBOARD@Input.Command.CommandId\) {) N
(95) # (                        case 'help' {) N
(96) # (                           AlarmHelp\(\);) N
(97) # (                        }) N
(98) # (                        case 'back' {) N
(99) # (                           $MINDBOARD@Control.Position <- 'askDevice';) N
(100) # (                           Menu\(\);) N
(101) # (                        }) N
(102) # (                        case 'exit' {) N
(103) # (                           $MINDBOARD@Control.Position <- 'quit';) N
(104) # (                           Quit\(\);) N
(105) # (                        }) N
(106) # (                     }) N
(107) # (                     Erase\($MINDBOARD@Input.Command\);) N
(108) # (                  } else {) N
(109) # (                     OutputItem outputitem <- \(AnswerCommand:'mensaje',) N
(110) # () S 8 T () S 16 T () S 24 T () S 32 T (     ) S 40 T (       AnswerClass:'askOperationAlarm'\);) N
(111) # (                     BatchInsertEnd\($MINDBOARD@Output.OutputBatch,outputitem\);) N
(112) # (                  }) N
(113) # (               }) N
(114) # (            }) N
(115) # (         \)) N
(116) # () N
(117) # (         \(CogitoScheme CogitoAskOperationHeating :) N
(118) # (            CogitoCapture {) N
(119) # (               $MINDBOARD@Control.Position == 'askOperationHeating') N
(120) # (            }) N
(121) # (            CogitoAction {) N
(122) # (               if \($MINDBOARD@Input.Operation\) {) N
(123) # (                  switch \($MINDBOARD@Input.Operation.OperationId\) {) N
(124) # (                     case 'activate' {) N
(125) # (                        HeatingActivate\(\);) N
(126) # (                        $MINDBOARD@Control.Position <- 'askDevice';) N
(127) # (                        Menu\(\);) N
(128) # (                     }) N
(129) # (                     case 'deactivate' {) N
(130) # (                        HeatingDeactivate\(\);) N
(131) # (                        $MINDBOARD@Control.Position <- 'askDevice';) N
(132) # (                        Menu\(\);) N
(133) # (                     }) N
(134) # (                  }) N
(135) # (                  Erase\($MINDBOARD@Input.Operation\);) N
(136) # (               } else {) N
(137) # (                  if \($MINDBOARD@Input.Command\) {) N
(138) # (                     switch \($MINDBOARD@Input.Command.CommandId\) {) N
(139) # (                        case 'help' {) N
(140) # (                           HeatingHelp\(\);) N
(141) # (                        }) N
(142) # (                        case 'back' {) N
(143) # (                           $MINDBOARD@Control.Position <- 'askDevice';) N
(144) # (                           Menu\(\);) N
(145) # (                        }) N
(146) # (                        case 'exit' {) N
(147) # (                           $MINDBOARD@Control.Position <- 'quit';) N
(148) # (                           Quit\(\);) N
(149) # (                        }) N
(150) # (                     }) N
(151) # (                     Erase\($MINDBOARD@Input.Command\);) N
(152) # (                  } else {) N
(153) # (                     OutputItem outputitem <- \(AnswerCommand:'mensaje',) N
(154) # () S 8 T () S 16 T () S 24 T () S 32 T (     ) S 40 T (       AnswerClass:'askOperationHeating'\);) N
(Devices_01_DM_Cogito.lkt) (Page 2/3) (jueves julio 18, 2013) title
border
grestore
(LEKTA TRAINING) rhead
(16/26) (Training Session 2) (LEKTA) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 17
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.780000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(155) # (                     BatchInsertEnd\($MINDBOARD@Output.OutputBatch,outputitem\);) p n
(156) # (                  }) N
(157) # (               }) N
(158) # (            }) N
(159) # (         \)) N
(160) # () N
(161) # (         \(CogitoScheme CogitoAskOperationIrrigation :) N
(162) # (            CogitoCapture {) N
(163) # (               $MINDBOARD@Control.Position == 'askOperationIrrigation') N
(164) # (            }) N
(165) # (            CogitoAction {) N
(166) # (               if \($MINDBOARD@Input.Operation\) {) N
(167) # (                  switch \($MINDBOARD@Input.Operation.OperationId\) {) N
(168) # (                     case 'activate' {) N
(169) # (                        IrrigationActivate\(\);) N
(170) # (                        $MINDBOARD@Control.Position <- 'askDevice';) N
(171) # (                        Menu\(\);) N
(172) # (                     }) N
(173) # (                     case 'deactivate' {) N
(174) # (                        IrrigationDeactivate\(\);) N
(175) # (                        $MINDBOARD@Control.Position <- 'askDevice';) N
(176) # (                        Menu\(\);) N
(177) # (                     }) N
(178) # (                  }) N
(179) # (                  Erase\($MINDBOARD@Input.Operation\);) N
(180) # (               } else {) N
(181) # (                  if \($MINDBOARD@Input.Command\) {) N
(182) # (                     switch \($MINDBOARD@Input.Command.CommandId\) {) N
(183) # (                        case 'help' {) N
(184) # (                           IrrigationHelp\(\);) N
(185) # (                        }) N
(186) # (                        case 'back' {) N
(187) # (                           $MINDBOARD@Control.Position <- 'askDevice';) N
(188) # (                           Menu\(\);) N
(189) # (                        }) N
(190) # (                        case 'exit' {) N
(191) # (                           $MINDBOARD@Control.Position <- 'quit';) N
(192) # (                           Quit\(\);) N
(193) # (                        }) N
(194) # (                     }) N
(195) # (                     Erase\($MINDBOARD@Input.Command\);) N
(196) # (                  } else {) N
(197) # (                     OutputItem outputitem <- \(AnswerCommand:'mensaje',) N
(198) # () S 8 T () S 16 T () S 24 T () S 32 T (               AnswerClass:'askOperationIrrigation'\);) N
(199) # (                     BatchInsertEnd\($MINDBOARD@Output.OutputBatch,outputitem\);) N
(200) # (                  }) N
(201) # (               }) N
(202) # (            }) N
(203) # (         \)) N
(204) # () N
(Devices_01_DM_Cogito.lkt) (Page 3/3) (jueves julio 18, 2013) title
border
grestore
(LEKTA TRAINING) rhead
(17/26) (Training Session 2) (LEKTA) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 18
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.780000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (/***************************************************************************) p n
(2) # ( * SOURCEFILE => Devices_01_DM_Respondo.lkt) N
(3) # ( ***************************************************************************/) N
(4) # () N
(5) # (         \(RespondoScheme DS: [OutputItem]) N
(6) # (            RespondoCapture {) N
(7) # (                 \(BatchSize\($MINDBOARD@Output.OutputBatch\) > 0\)) N
(8) # (            }) N
(9) # (            RespondoAction {) N
(10) # (                 OutputItem outputitem;) N
(11) # (                 BatchExtractInit\($MINDBOARD@Output.OutputBatch,outputitem\);) N
(12) # (                 ^OBJRESPONDO <- outputitem;) N
(13) # (                 RespondoRetry\(\);) N
(14) # (             }) N
(15) # (         \)) N
(Devices_01_DM_Respondo.lkt) (Page 1/1) (jueves julio 18, 2013) title
border
grestore
(LEKTA TRAINING) rhead
(18/26) (Training Session 2) (LEKTA) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 19
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.780000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (/***************************************************************************) p n
(2) # ( * SOURCEFILE => Devices_01_NLG.lkt) N
(3) # ( ***************************************************************************/) N
(4) # () N
(5) # (         \(ScriboScheme GenerateWelcome: [OutputItem]) N
(6) # (             ScriboCapture {) N
(7) # (                 #OBJLOCUTIO-1 =:= \(AnswerCommand:'interactivate',AnswerClass:'welcome'\)) N
(8) # (             }) N
(9) # (             ScriboAction {) N
(10) # (                 SetMainAnswer\("Bienvenido al sistema Devices. "\);) N
(11) # (             }) N
(12) # (         \)) N
(13) # () N
(14) # (         \(ScriboScheme GenerateAskDevice: [OutputItem]) N
(15) # (             ScriboCapture {) N
(16) # (                 #OBJLOCUTIO-1 =:= \(AnswerCommand:'mensaje',AnswerClass:'askDevice'\)) N
(17) # (             }) N
(18) # (             ScriboAction {) N
(19) # (                 SetMainAnswer\("Indique que dispositivo desea controlar o bien diga ayuda. "\);) N
(20) # (             }) N
(21) # (         \)) N
(22) # () N
(23) # (         \(ScriboScheme GenerateAskHelp: [OutputItem]) N
(24) # (             ScriboCapture {) N
(25) # (                 #OBJLOCUTIO-1 =:= \(AnswerCommand:'mensaje',AnswerClass:'askHelp'\)) N
(26) # (             }) N
(27) # (             ScriboAction {) N
(28) # (                 SetMainAnswer\("Desde este sistema puede controlar la alarma, la calefaccion "\);) N
(29) # (                 SetMainAnswer\("y el riego. "\);) N
(30) # (             }) N
(31) # (         \)) N
(32) # () N
(33) # (         \(ScriboScheme GenerateGoodbye: [OutputItem]) N
(34) # (             ScriboCapture {) N
(35) # (                 #OBJLOCUTIO-1 =:= \(AnswerCommand:'interactivate',AnswerClass:'goodbye'\)) N
(36) # (             }) N
(37) # (             ScriboAction {) N
(38) # (                 SetMainAnswer\("Adios. Muchas gracias por usar Devices. "\);) N
(39) # (             }) N
(40) # (         \)) N
(41) # () N
(42) # (         \(ScriboScheme GenerateOperationAlarm: [OutputItem]) N
(43) # (             ScriboCapture {) N
(44) # (                 #OBJLOCUTIO-1 =:= \(AnswerCommand:'mensaje',AnswerClass:'askOperationAlarm'\)) N
(45) # (             }) N
(46) # (             ScriboAction {) N
(47) # (                 SetMainAnswer\("Indique si desea activar o desactivar la alarma. "\);) N
(48) # (             }) N
(49) # (         \)) N
(50) # () N
(51) # (         \(ScriboScheme GenerateHelpAlarm: [OutputItem]) N
(52) # (             ScriboCapture {) N
(53) # (                 #OBJLOCUTIO-1 =:= \(AnswerCommand:'mensaje',AnswerClass:'helpAlarm'\)) N
(54) # (             }) N
(55) # (             ScriboAction {) N
(56) # (                 SetMainAnswer\("Usted puede activar o desactivar la alarma, pedir ayuda "\);) N
(57) # (                 SetMainAnswer\("o volver al menu principal. "\);) N
(58) # (             }) N
(59) # (         \)) N
(60) # () N
(61) # (         \(ScriboScheme GenerateAlarmActivated: [OutputItem]) N
(62) # (             ScriboCapture {) N
(63) # (                 #OBJLOCUTIO-1 =:= \(AnswerCommand:'outcome',AnswerClass:'informAlarmOn'\)) N
(64) # (             }) N
(65) # (             ScriboAction {) N
(66) # (                 SetMainAnswer\("La alarma ha sido activada. "\);) N
(67) # (             }) N
(68) # (         \)) N
(69) # () N
(70) # (         \(ScriboScheme GenerateAlarmDeactivated: [OutputItem]) N
(71) # (             ScriboCapture {) N
(72) # (                 #OBJLOCUTIO-1 =:= \(AnswerCommand:'outcome',AnswerClass:'informAlarmOff'\)) N
(73) # (             }) N
(74) # (             ScriboAction {) N
(75) # (                 SetMainAnswer\("La alarma ha sido desactivada. "\);) N
(76) # (             }) N
(77) # (         \)) N
(Devices_01_NLG.lkt) (Page 1/2) (jueves julio 18, 2013) title
border
grestore
(LEKTA TRAINING) rhead
(19/26) (Training Session 2) (LEKTA) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2) 20
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.780000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(78) # () p n
(79) # (         \(ScriboScheme GenerationOperationHeating: [OutputItem]) N
(80) # (             ScriboCapture {) N
(81) # (                 #OBJLOCUTIO-1 =:= \(AnswerCommand:'mensaje',AnswerClass:'askOperationHeating'\)) N
(82) # (             }) N
(83) # (             ScriboAction {) N
(84) # (                 SetMainAnswer\("Indique si desea activar o desactivar la calefaccion. "\);) N
(85) # (             }) N
(86) # (         \)) N
(87) # () N
(88) # (         \(ScriboScheme GenerateHelpHeating: [OutputItem]) N
(89) # (             ScriboCapture {) N
(90) # (                 #OBJLOCUTIO-1 =:= \(AnswerCommand:'mensaje',AnswerClass:'helpHeating'\)) N
(91) # (             }) N
(92) # (             ScriboAction {) N
(93) # (                 SetMainAnswer\("Usted puede activar o desactivar la calefaccion, pedir ayuda "\);) N
(94) # (                 SetMainAnswer\("o volver al menu principal. "\);) N
(95) # (             }) N
(96) # (         \)) N
(97) # () N
(98) # (         \(ScriboScheme GenerateHeatingActivated: [OutputItem]) N
(99) # (             ScriboCapture {) N
(100) # (                 #OBJLOCUTIO-1 =:= \(AnswerCommand:'outcome',AnswerClass:'informHeatingOn'\)) N
(101) # (             }) N
(102) # (             ScriboAction {) N
(103) # (                 SetMainAnswer\("La calefaccion ha sido activada. "\);) N
(104) # (             }) N
(105) # (         \)) N
(106) # () N
(107) # (         \(ScriboScheme GenerateHeatingDeactivated: [OutputItem]) N
(108) # (             ScriboCapture {) N
(109) # (                 #OBJLOCUTIO-1 =:= \(AnswerCommand:'outcome',AnswerClass:'informHeatingOff'\)) N
(110) # (             }) N
(111) # (             ScriboAction {) N
(112) # (                 SetMainAnswer\("La calefaccion ha sido desactivada. "\);) N
(113) # (             }) N
(114) # (         \)) N
(115) # () N
(116) # (         \(ScriboScheme GenerateOperationIrrigation: [OutputItem]) N
(117) # (             ScriboCapture {) N
(118) # (                 #OBJLOCUTIO-1 =:= \(AnswerCommand:'mensaje',AnswerClass:'askOperationIrrigation'\)) N
(119) # (             }) N
(120) # (             ScriboAction {) N
(121) # (                 SetMainAnswer\("Indique si desea activar o desactivar el riego. "\);) N
(122) # (             }) N
(123) # (         \)) N
(124) # () N
(125) # (         \(ScriboScheme GenerateHelpIrrigation: [OutputItem]) N
(126) # (             ScriboCapture {) N
(127) # (                 #OBJLOCUTIO-1 =:= \(AnswerCommand:'mensaje',AnswerClass:'helpIrrigation'\)) N
(128) # (             }) N
(129) # (             ScriboAction {) N
(130) # (                 SetMainAnswer\("Usted puede activar o desactivar el riego, pedir ayuda "\);) N
(131) # (                 SetMainAnswer\("o volver al menu principal. "\);) N
(132) # (             }) N
(133) # (         \)) N
(134) # () N
(135) # (         \(ScriboScheme GenerateIrrigationActivated: [OutputItem]) N
(136) # (             ScriboCapture {) N
(137) # (                 #OBJLOCUTIO-1 =:= \(AnswerCommand:'outcome',AnswerClass:'informIrrigationOn'\)) N
(138) # (             }) N
(139) # (             ScriboAction {) N
(140) # (                 SetMainAnswer\("El riego ha sido activado. "\);) N
(141) # (             }) N
(142) # (         \)) N
(143) # () N
(144) # (         \(ScriboScheme GenerateIrrigationDeactivated: [OutputItem]) N
(145) # (             ScriboCapture {) N
(146) # (                 #OBJLOCUTIO-1 =:= \(AnswerCommand:'outcome',AnswerClass:'informIrrigationOff'\)) N
(147) # (             }) N
(148) # (             ScriboAction {) N
(149) # (                 SetMainAnswer\("El riego ha sido desactivado. "\);) N
(150) # (             }) N
(151) # (         \)) N
(152) # () N
(Devices_01_NLG.lkt) (Page 2/2) (jueves julio 18, 2013) title
border
grestore
(LEKTA TRAINING) rhead
(20/26) (Training Session 2) (LEKTA) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 21
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.780000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (/***************************************************************************) p n
(2) # ( * SOURCEFILE => Devices_01_FUN_Decl.lkt) N
(3) # ( ***************************************************************************/) N
(4) # () N
(5) # (      integer Menu\(\);) N
(6) # (      integer Quit\(\);) N
(7) # () N
(8) # (      integer AlarmActivate\(\);) N
(9) # (      integer AlarmDeactivate\(\);) N
(10) # (      integer AlarmHelp\(\);) N
(11) # () N
(12) # (      integer HeatingActivate\(\);) N
(13) # (      integer HeatingDeactivate\(\);) N
(14) # (      integer HeatingHelp\(\);) N
(15) # () N
(16) # (      integer IrrigationActivate\(\);) N
(17) # (      integer IrrigationDeactivate\(\);) N
(18) # (      integer IrrigationHelp\(\);) N
(Devices_01_FUN_Decl.lkt) (Page 1/1) (jueves julio 18, 2013) title
border
grestore
(LEKTA TRAINING) rhead
(21/26) (Training Session 2) (LEKTA) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 22
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.780000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (/***************************************************************************) p n
(2) # ( * SOURCEFILE => Devices_01_FUN_Spec.lkt) N
(3) # ( ***************************************************************************/) N
(4) # () N
(5) # (      integer Menu\(\) {) N
(6) # (         OutputItem ol <- \(AnswerCommand:'mensaje',AnswerClass:'askDevice'\);) N
(7) # (         BatchInsertEnd\($MINDBOARD@Output.OutputBatch,ol\);) N
(8) # (      }) N
(9) # () N
(10) # (      integer Quit\(\) {) N
(11) # (         OutputItem ol <- \(AnswerCommand:'interactivate',AnswerClass:'goodbye'\);) N
(12) # (         BatchInsertEnd\($MINDBOARD@Output.OutputBatch,ol\);) N
(13) # (         CloseDialogue\(\);) N
(14) # (         return 1;) N
(15) # (      }) N
(16) # () N
(17) # (      integer AlarmActivate\(\) {) N
(18) # (         OutputItem ol <- \(AnswerCommand:'outcome',AnswerClass:'informAlarmOn'\);) N
(19) # (         BatchInsertEnd\($MINDBOARD@Output.OutputBatch,ol\);) N
(20) # (         return 1;) N
(21) # (      }) N
(22) # () N
(23) # (      integer AlarmDeactivate\(\) {) N
(24) # (         OutputItem ol <- \(AnswerCommand:'outcome',AnswerClass:'informAlarmOff'\);) N
(25) # (         BatchInsertEnd\($MINDBOARD@Output.OutputBatch,ol\);) N
(26) # (         return 1;) N
(27) # (      }) N
(28) # () N
(29) # (      integer AlarmHelp\(\) {) N
(30) # (         OutputItem ol <- \(AnswerCommand:'mensaje',AnswerClass:'helpAlarm'\);) N
(31) # (         BatchInsertEnd\($MINDBOARD@Output.OutputBatch,ol\);) N
(32) # (         return 1;) N
(33) # (      }) N
(34) # () N
(35) # (      integer HeatingActivate\(\) {) N
(36) # (         OutputItem ol <- \(AnswerCommand:'outcome',AnswerClass:'informHeatingOn'\);) N
(37) # (         BatchInsertEnd\($MINDBOARD@Output.OutputBatch,ol\);) N
(38) # (         return 1;) N
(39) # (      }) N
(40) # () N
(41) # (      integer HeatingDeactivate\(\) {) N
(42) # (         OutputItem ol <- \(AnswerCommand:'outcome',AnswerClass:'informHeatingOff'\);) N
(43) # (         BatchInsertEnd\($MINDBOARD@Output.OutputBatch,ol\);) N
(44) # (         return 1;) N
(45) # (      }) N
(46) # () N
(47) # (      integer HeatingHelp\(\) {) N
(48) # (         OutputItem ol <- \(AnswerCommand:'mensaje',AnswerClass:'helpHeating'\);) N
(49) # (         BatchInsertEnd\($MINDBOARD@Output.OutputBatch,ol\);) N
(50) # (         return 1;) N
(51) # (      }) N
(52) # () N
(53) # (      integer IrrigationActivate\(\) {) N
(54) # (         OutputItem ol <- \(AnswerCommand:'outcome',AnswerClass:'informIrrigationOn'\);) N
(55) # (         BatchInsertEnd\($MINDBOARD@Output.OutputBatch,ol\);) N
(56) # (         return 1;) N
(57) # (      }) N
(58) # () N
(59) # (      integer IrrigationDeactivate\(\) {) N
(60) # (         OutputItem ol <- \(AnswerCommand:'outcome',AnswerClass:'informIrrigationOff'\);) N
(61) # (         BatchInsertEnd\($MINDBOARD@Output.OutputBatch,ol\);) N
(62) # (         return 1;) N
(63) # (      }) N
(64) # () N
(65) # (      integer IrrigationHelp\(\) {) N
(66) # (         OutputItem ol <- \(AnswerCommand:'mensaje',AnswerClass:'helpIrrigation'\);) N
(67) # (         BatchInsertEnd\($MINDBOARD@Output.OutputBatch,ol\);) N
(68) # (         return 1;) N
(69) # (      }) N
(70) # () N
(Devices_01_FUN_Spec.lkt) (Page 1/1) (jueves julio 18, 2013) title
border
grestore
(LEKTA TRAINING) rhead
(22/26) (Training Session 2) (LEKTA) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 23
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.780000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (/***************************************************************************) p n
(2) # ( * SOURCEFILE => Calculator_02.lkt) N
(3) # ( ***************************************************************************/) N
(4) # () N
(5) # (lektaProject) N
(6) # () N
(7) # (   projectHead) N
(8) # () S 8 T (projectDescriptor       : "Calculator") N
(9) # () S 8 T (projectLanguageScope    : [ es ]) N
(10) # () S 8 T (projectOperationScope   : [ test ]) N
(11) # () S 8 T (projectInterfaceScope   : [ dialogue ]) N
(12) # () S 8 T (projectCompileOutput    : ".Calculator.olk") N
(13) # () N
(14) # (   projectSetup) N
(15) # (      setupParserRoots = Expresion ) N
(16) # () N
(17) # (   classModel) N
(18) # (      classDef:Void \( suma, resta, multiplica, divide, elevado \)) N
(19) # (      classDef:Void \( abre_parentesis, cierra_parentesis \)) N
(20) # (      classDef:ElementInt \( integer \)) N
(21) # () N
(22) # (      classDef:ElementInt \( Valor, ValorActual \)) N
(23) # (      classDef:ElementRange \( Operador: { '+', '-', '*', '/', '^' } \)) N
(24) # (      classDef:StructureComplex \( Expresion, Expresion1, Expresion2, ExpresionEntrada, ExpresionCa) N
0 T (lculo, ExpresionSalida: ) N
(25) # (            \(Valor, Operador, Expresion1, Expresion2\) \)) N
(26) # () N
(27) # (      classDef:StructureComplex \( Memoria: \( ExpresionEntrada, ExpresionCalculo \) \)) N
(28) # () N
(29) # (   lexicalModel forLanguage es) N
(30) # (      setupTokenizerIntegerClass   \(integer,".,"\)) N
(31) # (      setupTokenizerPunctuation   \("+", suma\)) N
(32) # (      setupTokenizerPunctuation   \("-", resta\)) N
(33) # (      setupTokenizerPunctuation   \("*", multiplica\)) N
(34) # (      setupTokenizerPunctuation   \("/", divide\)) N
(35) # (      setupTokenizerPunctuation   \("^", elevado\)) N
(36) # (      setupTokenizerPunctuation   \("\(", abre_parentesis\)) N
(37) # (      setupTokenizerPunctuation   \("\)", cierra_parentesis\)) N
(38) # () N
(39) # (      \("cero",   integer,      0\)) N
(40) # (      \("uno",    integer,      1\)) N
(41) # (      \("dos",    integer,      2\)) N
(42) # (      \("tres",   integer,      3\)) N
(43) # (      \("cuatro", integer,      4\)) N
(44) # (      \("cinco",  integer,      5\)) N
(45) # (      \("seis",   integer,      6\)) N
(46) # (      \("siete",  integer,      7\)) N
(47) # (      \("ocho",   integer,      8\)) N
(48) # (      \("nueve",  integer,      9\)) N
(49) # () N
(50) # (      \("mas",     suma\)) N
(51) # (      \("menos",   resta\)) N
(52) # (      \("entre",   divide\)) N
(53) # (      \("por",     multiplica\)) N
(54) # (      \("elevado a",   elevado\)) N
(55) # () N
(56) # (      \("abre",             abre_parentesis\)) N
(57) # (      \("abre parentesis",  abre_parentesis\)) N
(58) # (      \("cierra",           cierra_parentesis\)) N
(59) # (      \("cierra parentesis",cierra_parentesis\)) N
(60) # () N
(61) # () N
(62) # (   grammaticalModel forLanguage es) N
(63) # () N
(64) # (      \(R1: [ Expresion/0 -> integer ]) N
(65) # (         { ^.Valor <- #1; } \)) N
(66) # () N
(67) # (      \(R2: [ Expresion/0 -> &[-Expresion] resta integer ]) N
(68) # (         { ^.Valor <- - #2; } \)) N
(69) # () N
(70) # (      \(R3: [ Expresion/0 -> abre_parentesis Expresion/10 cierra_parentesis ]) N
(71) # (         { ^ <- #2; } \)) N
(72) # () N
(73) # (      \(R4: [ Expresion/3 -> Expresion/3 suma Expresion/2 ]) N
(74) # (         { ^.Operador <- '+';) N
(75) # (           ^.Valor <- #1.Valor + #3.Valor;) N
(76) # (           ^.Expresion1 <- #1;) N
(Calculator_02.lkt) (Page 1/3) (jueves julio 18, 2013) title
border
grestore
(LEKTA TRAINING) rhead
(23/26) (Training Session 2) (LEKTA) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2) 24
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.780000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(77) # (           ^.Expresion2 <- #3; } \)) p n
(78) # () N
(79) # (      \(R5: [ Expresion/3 -> Expresion/3 resta Expresion/2 ]) N
(80) # (         { ^.Operador <- '-';) N
(81) # (           ^.Valor <- #1.Valor - #3.Valor;) N
(82) # (           ^.Expresion1 <- #1;) N
(83) # (           ^.Expresion2 <- #3; } \)) N
(84) # () N
(85) # (      \(R6: [ Expresion/2 -> Expresion/2 multiplica Expresion/1 ]) N
(86) # (         { ^.Operador <- '*';) N
(87) # (           ^.Valor <- #1.Valor * #3.Valor;) N
(88) # (           ^.Expresion1 <- #1;) N
(89) # (           ^.Expresion2 <- #3; } \)) N
(90) # () N
(91) # (      \(R7: [ Expresion/2 -> Expresion/2 divide Expresion/1 ]) N
(92) # (         { ^.Operador <- '/';) N
(93) # (           ^.Valor <- #1.Valor / #3.Valor;) N
(94) # (           ^.Expresion1 <- #1;) N
(95) # (           ^.Expresion2 <- #3; } \)) N
(96) # () N
(97) # (      \(R8: [ Expresion/1 -> Expresion/1 elevado Expresion/0 ]) N
(98) # (         { ^.Operador <- '^';) N
(99) # (           ^.Valor <- Pow\(#1.Valor,#3.Valor\);) N
(100) # (           ^.Expresion1 <- #1;) N
(101) # (           ^.Expresion2 <- #3; } \)) N
(102) # () N
(103) # (      \(R9: [ Expresion/20 -> suma Expresion/10 ]) N
(104) # (         { ^.Operador <- '+';) N
(105) # (           ^.Expresion2 <- #2; } \)) N
(106) # () N
(107) # (      \(R10: [ Expresion/20 -> resta Expresion/10 ]) N
(108) # (         { ^.Operador <- '-';) N
(109) # (           ^.Expresion2 <- #2; } \)) N
(110) # () N
(111) # (      \(R11: [ Expresion/20 -> multiplica Expresion/10 ]) N
(112) # (         { ^.Operador <- '*';) N
(113) # (           ^.Expresion2 <- #2; } \)) N
(114) # () N
(115) # (      \(R12: [ Expresion/20 -> divide Expresion/10 ]) N
(116) # (         { ^.Operador <- '/';) N
(117) # (           ^.Expresion2 <- #2; } \)) N
(118) # () N
(119) # (      \(R13: [ Expresion/20 -> elevado Expresion/10 ]) N
(120) # (         { ^.Operador <- '^';) N
(121) # (           ^.Expresion2 <- #2; } \)) N
(122) # () N
(123) # () N
(124) # (   conversationalModel) N
(125) # (      MindBoardStructure: {) N
(126) # (         \(Memoria / Memoria\)) N
(127) # (      }) N
(128) # () N
(129) # (      SensoSchemata) N
(130) # (         \(SensoScheme RExpresion : [Expresion]) N
(131) # (            SensoAction {) N
(132) # (               $MINDBOARD@Memoria.ExpresionEntrada <- #OBJSENSO-1;) N
(133) # (            }) N
(134) # (         \)) N
(135) # () N
(136) # (      CogitoSchemata) N
(137) # (         \(CogitoScheme TExpresion :) N
(138) # (            CogitoAction {) N
(139) # (               if \($MINDBOARD@Memoria.ExpresionEntrada.Operador\) {) N
(140) # (                  if \($MINDBOARD@Memoria.ExpresionEntrada.Expresion1\) {) N
(141) # (                     $MINDBOARD@Memoria.ExpresionCalculo <- ) N
(142) # (                        $MINDBOARD@Memoria.ExpresionEntrada;) N
(143) # (                  } else {) N
(144) # (                     Expresion fexp <- $MINDBOARD@Memoria.ExpresionEntrada;) N
(145) # (                     fexp.Expresion1 <- $MINDBOARD@Memoria.ExpresionCalculo;) N
(146) # (                     $MINDBOARD@Memoria.ExpresionCalculo <- fexp;) N
(147) # (                     switch \($MINDBOARD@Memoria.ExpresionCalculo.Operador\) {) N
(148) # (                        case '+' {) N
(149) # (                           $MINDBOARD@Memoria.ExpresionCalculo.Valor <-) N
(150) # (                              $MINDBOARD@Memoria.ExpresionCalculo.Expresion1.Valor +) N
(151) # (                              $MINDBOARD@Memoria.ExpresionCalculo.Expresion2.Valor;) N
(152) # (                        }) N
(153) # (                        case '-' {) N
(Calculator_02.lkt) (Page 2/3) (jueves julio 18, 2013) title
border
grestore
(LEKTA TRAINING) rhead
(24/26) (Training Session 2) (LEKTA) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 25
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.780000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(154) # (                           $MINDBOARD@Memoria.ExpresionCalculo.Valor <-) p n
(155) # (                              $MINDBOARD@Memoria.ExpresionCalculo.Expresion1.Valor -) N
(156) # (                              $MINDBOARD@Memoria.ExpresionCalculo.Expresion2.Valor;) N
(157) # (                        }) N
(158) # (                        case '*' {) N
(159) # (                           $MINDBOARD@Memoria.ExpresionCalculo.Valor <-) N
(160) # (                              $MINDBOARD@Memoria.ExpresionCalculo.Expresion1.Valor *) N
(161) # (                              $MINDBOARD@Memoria.ExpresionCalculo.Expresion2.Valor;) N
(162) # (                        }) N
(163) # (                        case '/' {) N
(164) # (                           $MINDBOARD@Memoria.ExpresionCalculo.Valor <-) N
(165) # (                              $MINDBOARD@Memoria.ExpresionCalculo.Expresion1.Valor /) N
(166) # (                              $MINDBOARD@Memoria.ExpresionCalculo.Expresion2.Valor;) N
(167) # (                        }) N
(168) # (                        case '^' {) N
(169) # (                           $MINDBOARD@Memoria.ExpresionCalculo.Valor <-) N
(170) # (                              Pow\($MINDBOARD@Memoria.ExpresionCalculo.Expresion1.Valor,) N
(171) # (                              $MINDBOARD@Memoria.ExpresionCalculo.Expresion2.Valor\);) N
(172) # (                        }) N
(173) # (                     }) N
(174) # (                  }) N
(175) # (               } else {) N
(176) # (                  $MINDBOARD@Memoria.ExpresionCalculo <- $MINDBOARD@Memoria.ExpresionEntrada;) N
(177) # (               }) N
(178) # (            }) N
(179) # (         \)) N
(180) # () N
(181) # (      RespondoSchemata) N
(182) # (         \(RespondoScheme DExpresion: [ExpresionSalida] ) N
(183) # (            RespondoAction {) N
(184) # (               ^OBJRESPONDO <- $MINDBOARD@Memoria.ExpresionCalculo;) N
(185) # (            }) N
(186) # (         \)) N
(187) # () N
(188) # (   ) N
(189) # (   scriboModel forLanguage es) N
(190) # (      ScriboSchemata) N
(191) # (         \(ScriboScheme GExpresion: [ExpresionSalida]) N
(192) # (            ScriboAction {) N
(193) # (               SetMainAnswer\(#OBJLOCUTIO-1.Valor\);) N
(194) # (            }) N
(195) # (         \)) N
(196) # () N
(Calculator_02.lkt) (Page 3/3) (jueves julio 18, 2013) title
border
grestore
(LEKTA TRAINING) rhead
(25/26) (Training Session 2) (LEKTA) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 26
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.780000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (/***************************************************************************) p n
(2) # ( * SOURCEFILE => Calculator_02.lkt) N
(3) # ( ***************************************************************************/) N
(4) # () N
(5) # (LaunchLektaKernel\(\)) N
(6) # () N
(7) # (UseProject) N
(8) # (        \(ProjectCompile        : ".Calculator.olk"\)) N
(9) # () N
(10) # (CreateDialogue\(\)) N
(Calculator_02.slk) (Page 1/1) (jueves julio 18, 2013) title
border
grestore
(LEKTA TRAINING) rhead
(26/26) (Training Session 2) (LEKTA) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
