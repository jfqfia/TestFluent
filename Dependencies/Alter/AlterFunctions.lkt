// **************************************************
//
//	
// 
// **************************************************
//
//	PROJECT	:	
//	MODULE  :	
// 	PACKAGE	:	
//	FILE	:	
//
// **************************************************

procedure checkParameter(string parameterString)
{
	ScriptNode currentNode <- getCurrentNode();
	int infoNumber <- ShapeToInt( parameterString );
	DialogueScript script <- getCurrentScript();
	ScriptInfoItem scriptInfoItem;
	BatchRecoverPosition( script.ScriptInfoItems, infoNumber , scriptInfoItem );
	Parameter parameter <- scriptInfoItem.InfoItemValue.Parameter; 

	bool correct <- True;
	if(correct)
	{
		correct <- checkParameterKernel(parameter);
	}

	// Domain: BankingManagement
	if(correct)
	{
		correct <- checkParameterBankingManagement( parameter );
	}

	// Domain: MedicalAppointment
	if(correct)
	{
		correct <- checkParameterMedicalAppointment( parameter );
	}

	if( correct )
	{
		setNodeState( script.ScriptDescriptor, currentNode.ScriptNodeDescriptor, 'correct' );		
	}
	else
	{
		setNodeState( script.ScriptDescriptor, currentNode.ScriptNodeDescriptor, 'incorrect' );		
	}
}

bool compatibleExpectativeTypes(ParameterType type1, ParameterType type2)
{
	bool ret;

	ret <- False;

	if(!! ret )
	{
		ret = compatibleExpectativeTypesKernel(type1, type2);
	}

	// Domain: BankingManagement
	if(!! ret )
	{
		ret = compatibleExpectativeTypesBankingManagement(type1, type2);
	}

	// Domain: MedicalAppointment
	if(!! ret )
	{
		ret = compatibleExpectativeTypesMedicalAppointment(type1, type2);
	}

	return ret;
}

ProferenceChunk convertProferenceToExpectative(ParameterType typeTarget, ProferenceChunk originalProference)
{
	ProferenceChunk ret;

	if(!! ret)
	{
		ret <- convertProferenceToExpectativeKernel(typeTarget, originalProference);
	}

	// Domain: BankingManagement
	if(!! ret)
	{
		ret <- convertProferenceToExpectativeBankingManagement(typeTarget, originalProference);
	}

	// Domain: MedicalAppointment
	if(!! ret)
	{
		ret <- convertProferenceToExpectativeMedicalAppointment(typeTarget, originalProference);
	}

	return ret;
}


Parameter executeBackOfficeFunction(string backOfficeFunctionName, Parameters parameters)
{
	// Domain: BankingManagement
	if( backOfficeFunctionName == 'get_balance' )
	{
		return getBalance(parameters);
	}
}

Parameter executeBackOfficeNegotiateFunction(string backOfficeFunctionName, InfoItemHistory history, Parameters parameters)
{
	// Domain: MedicalAppointment
	if( backOfficeFunctionName == 'negotiate_datetime_medical_appointment' )
	{
		return negotiateDateTimeMedicalAppointment(history, parameters);
	}
}

bool executeBackOfficeBooleanFunction(string backOfficeFunctionName, Parameters parameters)
{
	// Domain: BankingManagement
	if( backOfficeFunctionName == 'get_nearest_atm' )
	{
		return getNearestATM(parameters);
	}
	// Domain: BankingManagement
	if( backOfficeFunctionName == 'execute_transfer' )
	{
		return executeTransfer(parameters);
	}
}

bool coherentActionScopeAlter(string action, string scope)
{
	bool ret;
	ret = False;

	// Domain: MedicalAppointment
	ret = ret || coherentActionScopeMedicalAppointment(action, scope);

	// Domain: BankingManagement
	ret = ret || coherentActionScopeBankingManagement(action, scope);

	return ret;
}

Action getActionDomainFromLemma(string lemma)
{
	Action ret;
	string action;
		
	// Domain: MedicalAppointment
	action <- getActionDomainFromLemmaMedicalAppointment(lemma);
	if( action != 'unknown' )
	{
		BatchInsertEnd(ret, action);
	}
	
	// Domain: BankingManagement
	action <- getActionDomainFromLemmaBankingManagement(lemma);
	if( action != 'unknown' )
	{
		BatchInsertEnd(ret, action);
	}

	return ret;
}

Parameter changeParameterCategoryRecursive(Parameter parameter, ParameterCategory category)
{
	Parameter ret;

	ret <- parameter;
	if(parameter.ParameterCategory != 'terminal' && parameter.ParameterCategory != 'negation')
	{
		ret.ParameterCategory <- category;
		ret.ParameterOperand1 <- changeParameterCategoryRecursive(parameter.ParameterOperand1, category);
		ret.ParameterOperand2 <- changeParameterCategoryRecursive(parameter.ParameterOperand2, category);
	}

	return ret;
}

bool canMergeWithSequential(Parameter parameter1, Parameter parameter2)
{
	bool ret;

	switch (parameter1.ParameterType) 
	{
		case 'datetime' 
		{
			ret <- canMergeWithSequentialDateTime(parameter1, parameter2);
		}
		case 'number' 
		{
			ret <- canMergeWithSequentialNumber(parameter1, parameter2);
		}
		case 'ordinal' 
		{
			ret <- canMergeWithSequentialOrdinal(parameter1, parameter2);
		}
		case 'medicalspeciality' 
		{
			ret <- canMergeWithSequentialSpeciality(parameter1, parameter2);
		}
		case 'letter' 
		{
			ret <- canMergeWithSequentialLetter(parameter1, parameter2);
		}
		case 'countryplace' 
		{
			ret <- canMergeWithSequentialCountryPlace(parameter1, parameter2);
		}
		case 'phonenumber' 
		{
			ret <- canMergeWithSequentialPhoneNumber(parameter1, parameter2);
		}
		case 'peselnumber' 
		{
			ret <- canMergeWithSequentialPeselNumber(parameter1, parameter2);
		}
		case 'accountnumber' 
		{
			ret <- canMergeWithSequentialAccountNumber(parameter1, parameter2);
		}
		case 'moneyamount' 
		{
			ret <- canMergeWithSequentialMoneyAmount(parameter1, parameter2);
		}
		default
		{	
			ret <- True;
		}
	}
	return ret;
}

bool canMergeWithOr(Parameter parameter1, Parameter parameter2)
{
	bool ret;

	switch (parameter1.ParameterType) 
	{
		case 'datetime' 
		{
			ret <- canMergeWithOrDateTime(parameter1, parameter2);
		}
		case 'number' 
		{
			ret <- canMergeWithOrNumber(parameter1, parameter2);
		}
		case 'ordinal' 
		{
			ret <- canMergeWithOrOrdinal(parameter1, parameter2);
		}
		case 'medicalspeciality' 
		{
			ret <- canMergeWithOrSpeciality(parameter1, parameter2);
		}
		case 'letter' 
		{
			ret <- canMergeWithOrLetter(parameter1, parameter2);
		}
		case 'countryplace' 
		{
			ret <- canMergeWithOrCountryPlace(parameter1, parameter2);
		}
		case 'phonenumber' 
		{
			ret <- canMergeWithOrPhoneNumber(parameter1, parameter2);
		}
		case 'peselnumber' 
		{
			ret <- canMergeWithOrPeselNumber(parameter1, parameter2);
		}
		case 'accountnumber' 
		{
			ret <- canMergeWithOrAccountNumber(parameter1, parameter2);
		}
		case 'moneyamount' 
		{
			ret <- canMergeWithOrMoneyAmount(parameter1, parameter2);
		}
		default
		{	
			ret <- True;
		}
	}
	return ret;
}

bool canMergeWithAnd(Parameter parameter1, Parameter parameter2)
{
	bool ret;

	switch (parameter1.ParameterType) 
	{
		case 'datetime' 
		{
			ret <- canMergeWithAndDateTime(parameter1, parameter2);
		}
		case 'number' 
		{
			ret <- canMergeWithAndNumber(parameter1, parameter2);
		}
		case 'ordinal' 
		{
			ret <- canMergeWithAndOrdinal(parameter1, parameter2);
		}
		case 'medicalspeciality' 
		{
			ret <- canMergeWithAndSpeciality(parameter1, parameter2);
		}
		case 'letter' 
		{
			ret <- canMergeWithAndLetter(parameter1, parameter2);
		}
		case 'countryplace' 
		{
			ret <- canMergeWithAndCountryPlace(parameter1, parameter2);
		}
		case 'phonenumber' 
		{
			ret <- canMergeWithAndPhoneNumber(parameter1, parameter2);
		}
		case 'peselnumber' 
		{
			ret <- canMergeWithAndPeselNumber(parameter1, parameter2);
		}
		case 'accountnumber' 
		{
			ret <- canMergeWithAndAccountNumber(parameter1, parameter2);
		}
		case 'moneyamount' 
		{
			ret <- canMergeWithAndMoneyAmount(parameter1, parameter2);
		}
		default
		{	
			ret <- True;
		}
	}
	return ret;
}



