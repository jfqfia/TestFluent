// ****************************************************************************
//
//	Functions in Banking Management domain
//
// ****************************************************************************
//
//	PROJECT	: Fluency
// 	DOMAIN  : BankingManagement
//	MODULE  : Functions
//	PACKAGE	: -
// 	FOLDER  : -
// 	FILE	: BankingManagementFunctions
//
// ****************************************************************************

ParameterValue concatenateHistoryBankingManagement(InfoItemHistory history, Parameter lastParameter)
{
	ParameterValue ret;

	if(lastParameter.ParameterType == 'accountnumber')
	{
		ret <- concatenateHistoryAccountNumber(history, lastParameter);
	}

	return ret;
}


ParameterFormats getFormatsFromParameterTypeBankingManagement(ParameterType parameterType)
{
	ParameterFormats ret;

	if(parameterType == 'accountnumber')
	{
		ret <- getParameterFormatsAccountNumber();
	}

	return ret;
}

ScriptNodeStateName checkParameterBankingManagement(Parameter parameter)
{
	ScriptNodeStateName ret;
	
	if(parameter.ParameterType == 'accountnumber')
	{
		ret <- checkAccountNumberValidity( parameter );
	}

	return ret;
}

ScriptNodeStateName checkParameterIntersententialBankingManagement(InfoItemHistory history, Parameter parameter)
{
	ScriptNodeStateName ret;
	
	if(parameter.ParameterType == 'accountnumber')
	{
		ret <- checkAccountNumberIntersententialValidity(history, parameter );
	}

	return ret;
}

ProferenceChunk convertProferenceToExpectativeBankingManagement(ParameterType typeTarget, ProferenceChunk originalProference)
{
	ProferenceChunk ret;

	if( typeTarget == 'accountnumber' && originalProference.Parameter.ParameterType == 'number' )
	{
		AccountNumber accountNumber <- convertNumberToAccountNumber(originalProference.Parameter);
		ret.Parameter.ParameterValue.AccountNumber <- accountNumber;
		ret.Parameter.ParameterType <- 'accountnumber';
		ret.Parameter.ParameterCategory <- 'terminal';
		if( originalProference.Parameter.ParameterCategory == 'negation' )
		{
			ret.Parameter.ParameterCategory <- 'negation';
		}
	}
	if( typeTarget == 'accountnumber' && originalProference.Parameter.ParameterType == 'signchunk' )
	{
		AccountNumber accountNumber <- convertSignChunkToAccountNumber(originalProference.Parameter);
		ret.Parameter.ParameterValue.AccountNumber <- accountNumber;
		ret.Parameter.ParameterType <- 'accountnumber';
		ret.Parameter.ParameterCategory <- 'terminal';
		if( originalProference.Parameter.ParameterCategory == 'negation' )
		{
			ret.Parameter.ParameterCategory <- 'negation';
		}
	}	

	return ret;
}

bool compatibleExpectativeTypesBankingManagement(ParameterType type1, ParameterType type2)
{
	bool ret;

	ret <- False;

	if( type1 == 'accountnumber' && type2 == 'number' )
	{
		ret <- True;
	}
	if( type1 == 'accountnumber' && type2 == 'signchunk' )
	{
		ret <- True;
	}

	return ret;
}

bool coherentActionScopeBankingManagement(string action, string scope)
{
	bool ret;

	ret =   (action == 'close' && scope == 'bankaccount') ||
		(action == 'consult' && scope == 'bankaccount') || 
		(action == 'locate' && scope == 'atm') || 
		(action == 'execute' && scope == 'transfer');

	return ret;	
}

string getActionDomainFromLemmaBankingManagement(string lemma)
{
	switch (lemma) 
	{
		// Action close (scope: 'bankaccount')
		case 'close'		{ return 'close'; }
		case 'cancel'		{ return 'close'; }
		case 'erase'		{ return 'close'; }
		case 'delete'		{ return 'close'; }
		case 'drop'		{ return 'close'; }
		case 'eliminate'	{ return 'close'; }
		case 'remove'		{ return 'close'; }
		case 'revoke'		{ return 'close'; }
		case 'supress'		{ return 'close'; }
		case 'discard'		{ return 'close'; }
		case 'call off'		{ return 'close'; }
		case 'annul'		{ return 'close'; }
		case 'get rid of'	{ return 'close'; }

		// Action consult (scope: 'bankaccount')
		case 'consult'		{ return 'consult'; }
		case 'check'		{ return 'consult'; }
		case 'read'		{ return 'consult'; }
		case 'see'		{ return 'consult'; }
		case 'look'		{ return 'consult'; }
		case 'examine'		{ return 'consult'; }
		case 'determine'	{ return 'consult'; }

		// Action locate (scope: 'atm')
		case 'locate'		{ return 'locate'; }
		case 'localize'		{ return 'locate'; }
		case 'look for'		{ return 'locate'; }
		case 'search'		{ return 'locate'; }
		case 'search for'	{ return 'locate'; }
		case 'seek'		{ return 'locate'; }
		case 'find'		{ return 'locate'; }

		// Action execute (scope: 'transfer')
		case 'make'		{ return 'execute'; }
		case 'move'		{ return 'execute'; }
		case 'execute'		{ return 'execute'; }
		case 'perform'		{ return 'execute'; }
		case 'do'		{ return 'execute'; }
		case 'accomplish'	{ return 'execute'; }
		case 'fulfill'		{ return 'execute'; }
		case 'effectuate'	{ return 'execute'; }
		case 'carry out'	{ return 'execute'; }
		case 'complete'		{ return 'execute'; }
		case 'realize'		{ return 'execute'; }
		case 'realise'		{ return 'execute'; }
	}

	return 'unknown';
}

