// ****************************************************************************
//
//	English grammar in Account Number parameter
//
// ****************************************************************************
//
//	PROJECT	: Fluency
// 	DOMAIN  : BankingManagement
//	MODULE  : AccountNumber
//	PACKAGE	: English
// 	FOLDER  : Grammar
// 	FILE	: AccountNumberEnglishGrammar
//
// ****************************************************************************

(AccountNumber_Rule01_1 :
 	[ Parameter -> AccountNumber ]
	{
		^.ParameterCategory <- 'terminal';
		^.ParameterType <- 'accountnumber';
		^.ParameterValue.AccountNumber <- #1;
	}
)

(AccountNumber_Rule02 :
 	[ AccountNumber -> lexDetMy? lexAccountNumberPreffix? lexAccountNumberPreffix lexAccountNumberTerm lexAccountNumberTerm? lexColon? Number ]
	{
		^.AccountNumberValue <- #7.NumberLiteral;
	}
)

(AccountNumber_Rule03 :
 	[ AccountNumber -> AccountNumber < lexComma | lexConjAnd >? Number ]
	{
		^.AccountNumberValue <- LiteralConcat(#1.AccountNumberValue, #3.NumberLiteral);
	}
)

(AccountNumber_Rule03 :
 	[ AccountNumber -> lexDetMy? lexAccountNumberPreffix? lexAccountNumberPreffix lexAccountNumberTerm lexAccountNumberTerm? lexColon? SignChunk ]
	{
		^.AccountNumberValue <- #7.SignChunkLiteral;
	}
)

(AccountNumber_Rule04 :
 	[ AccountNumber -> AccountNumber < lexComma | lexConjAnd >? SignChunk ]
	{
		^.AccountNumberValue <- LiteralConcat(#1.AccountNumberValue, #3.SignChunkLiteral);
	}
)


