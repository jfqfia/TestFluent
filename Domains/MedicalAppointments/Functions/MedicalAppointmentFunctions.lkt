// ****************************************************************************
//
//	Functions in Medical Appointment domain
//
// ****************************************************************************
//
//	PROJECT	: Fluency
// 	DOMAIN  : MedicalAppointments
//	MODULE  : Functions
//	PACKAGE	: -
// 	FOLDER  : -
// 	FILE	: MedicalAppointmentFunctions
//
// ****************************************************************************

ParameterValue concatenateHistoryMedicalAppointment(InfoItemHistory history, Parameter lastParameter)
{
	ParameterValue ret;

	if(lastParameter.ParameterType == 'peselnumber')
	{
		ret <- concatenateHistoryPeselNumber(history, lastParameter);
	}

	return ret;
}

ParameterFormats getFormatsFromParameterTypeMedicalAppointment(ParameterType parameterType)
{
	ParameterFormats ret;

	if(parameterType == 'peselnumber')
	{
		ret <- getParameterFormatsPeselNumber();
	}

	return ret;
}

ScriptNodeStateName checkParameterMedicalAppointment(Parameter parameter)
{
	ScriptNodeStateName ret;
	
	if(parameter.ParameterType == 'medicalspeciality')
	{
		ret <- checkMedicalSpecialityValidity( parameter );
	}
	if(parameter.ParameterType == 'peselnumber')
	{
		ret <- checkPeselNumberValidity( parameter );
	}

	return ret;
}

ScriptNodeStateName checkParameterIntersententialMedicalAppointment(InfoItemHistory history, Parameter parameter)
{
	ScriptNodeStateName ret;
	
	if(parameter.ParameterType == 'peselnumber')
	{
		ret <- checkPeselNumberIntersententialValidity(history, parameter );
	}

	return ret;
}

ProferenceChunk convertProferenceToExpectativeMedicalAppointment(ParameterType typeTarget, ProferenceChunk originalProference)
{
	ProferenceChunk ret;

	if( typeTarget == 'peselnumber' && originalProference.Parameter.ParameterType == 'number' )
	{
		PeselNumber peselNumber <- convertNumberToPeselNumber(originalProference.Parameter);
		ret.Parameter.ParameterValue.PeselNumber <- peselNumber;
		ret.Parameter.ParameterType <- 'peselnumber';
		ret.Parameter.ParameterCategory <- 'terminal';
		if( originalProference.Parameter.ParameterCategory == 'negation' )
		{
			ret.Parameter.ParameterCategory <- 'negation';
		}
	}	
	
	return ret;
}

bool compatibleExpectativeTypesMedicalAppointment(ParameterType type1, ParameterType type2)
{
	bool ret;

	ret <- False;

	if( type1 == 'peselnumber' && type2 == 'number' )
	{
		ret <- True;
	}

	return ret;
}

bool coherentActionScopeMedicalAppointment(string action, string scope)
{
	bool ret;

	ret =   (action == 'book' && scope == 'appointment') ||
		(action == 'cancel' && scope == 'appointment') || 
		(action == 'confirm' && scope == 'appointment') || 
		(action == 'modify' && scope == 'appointment');

	return ret;
}

string getActionDomainFromLemmaMedicalAppointment(string lemma)
{
	switch (lemma) 
	{
		// Action book (scope: 'appointment')
		case 'book'		{ return 'book'; }
		case 'establish'	{ return 'book'; }
		case 'have'		{ return 'book'; }
		case 'make'		{ return 'book'; }
		case 'get'		{ return 'book'; }
		case 'schedule'		{ return 'book'; }
		case 'ask'		{ return 'book'; }
		case 'set up'		{ return 'book'; }

		// Action cancel (scope: 'appointment')
		case 'cancel'		{ return 'cancel'; }
		case 'erase'		{ return 'cancel'; }
		case 'delete'		{ return 'cancel'; }
		case 'drop'		{ return 'cancel'; }
		case 'eliminate'	{ return 'cancel'; }
		case 'remove'		{ return 'cancel'; }
		case 'revoke'		{ return 'cancel'; }
		case 'supress'		{ return 'cancel'; }
		case 'discard'		{ return 'cancel'; }
		case 'call off'		{ return 'cancel'; }
		case 'annul'		{ return 'cancel'; }
		case 'get rid of'	{ return 'cancel'; }

		// Action confirm (scope: 'appointment')
		case 'confirm'		{ return 'confirm'; }
		case 'settle'		{ return 'confirm'; }
		case 'validate'		{ return 'confirm'; }
		case 'verify'		{ return 'confirm'; }
		case 'corroborate'	{ return 'confirm'; }
		case 'make firm'	{ return 'confirm'; }

		// Action modify (scope: 'appointment')
		case 'change'		{ return 'modify'; }
		case 'interchange'	{ return 'modify'; }
		case 'exchange'		{ return 'modify'; }
		case 'modify'		{ return 'modify'; }
		case 'swap'		{ return 'modify'; }
		case 'switch'		{ return 'modify'; }
		case 'replace'		{ return 'modify'; }
		case 'substitute'	{ return 'modify'; }
		case 'alter'		{ return 'modify'; }
	}

	return 'unknown';
}

