// **************************************************
//
//	
// 
// **************************************************
//
//	PROJECT	:	
//	MODULE  :	
// 	PACKAGE	:	
//	FILE	:	
//
// **************************************************

bool canMergeWithSequentialPeselNumber(Parameter parameter1, Parameter parameter2)
{
	return False;
}

bool canMergeWithOrPeselNumber(Parameter parameter1, Parameter parameter2)
{
	return False;
}

bool canMergeWithAndPeselNumber(Parameter parameter1, Parameter parameter2)
{
	return False;
}

ParameterFormats getParameterFormatsPeselNumber()
{
	// A pesel number is a 11 digits (0-9) string
	ParameterFormats ret;
	ParameterFormat format;

	format <- '###########';
	BatchInsertEnd(ret, format);

	return ret;
}

PeselNumber convertNumberToPeselNumber(Parameter parameter)
{
	PeselNumber ret;

	if(parameter.ParameterCategory == 'terminal' || parameter.ParameterCategory == 'negation')
	{
		Number number <- parameter.ParameterValue.Number;
		ret.PeselNumberValue <- ShapeToString(number.NumberLiteral);
	}
	if(parameter.ParameterCategory == 'sequential')
	{
		ret.PeselNumberValue <- getConcatenatedNumber( parameter );
	}

	return ret;
}


ScriptNodeStateName checkPeselNumberValidity( Parameter parameter )
{
	ScriptNodeStateName ret;

	ret <- validFormat( parameter.ParameterType, parameter.ParameterValue.PeselNumber.PeselNumberValue );

	// TODO Additional checks not related with mask format

	return ret;
}

ScriptNodeStateName checkPeselNumberIntersententialValidity(InfoItemHistory history, Parameter lastParameter )
{
	ScriptNodeStateName ret;
	Parameter parameter;

	parameter.ParameterType <- lastParameter.ParameterType;
	parameter.ParameterValue <- concatenateHistoryPeselNumber(history, lastParameter);

	ret <- checkPeselNumberValidity( parameter );

	return ret;
}

ParameterValue concatenateHistoryPeselNumber(InfoItemHistory history, Parameter lastParameter)
{
	ParameterValue ret;

	string concatenated <- '';
	int size <- BatchSize(history);
	for(int position <- 1; position <= size; position++)
	{
		Parameter recoveredParameter;
		BatchRecoverPosition(history, position, recoveredParameter);		

		concatenated <- LiteralConcat(concatenated, recoveredParameter.ParameterValue.PeselNumber.PeselNumberValue);		
	}

	ret.PeselNumber.PeselNumberValue <-  LiteralConcat(concatenated, lastParameter.ParameterValue.PeselNumber.PeselNumberValue);

	return ret;
}



