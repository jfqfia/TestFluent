// **************************************************
//
//	Rules for dates in english.
//
// **************************************************
// 
//	PROJECT	:	Fluency
//	MODULE  :	Kernel
//	PACKAGE	:	Understanding.English.Grammar
//	FILE	:	DateEnglishGrammar.lkt
// 
// **************************************************

// TODO I think this should be in another file
// If we detect a DateTime in the loneliness
(DateRule01_1 :
    	[ DialogueAct -> DateTime ] 
	{
		^.CoreDialogueAct.Dimension <- 'statement';
		^.CoreDialogueAct.Function <- 'inform';
		^.SemanticContent.Parameters.DateTime <- #1;
    	}
)

(DateRule01_2 :
    	[ DateTime -> OffsetDate ] 
	{
		^.OffsetDate <- #1;
    	}
)

// today
// tomorrow
// yesterday
// this day
// now
// after today
// after tomorrow
// after yesterday
// after this day
// after now
// next to this day
(DateRule02 :
    	[ OffsetDate -> lexTemporalModifier? lexOffsetDay ] 
	{
		if(#1)
		{
			if(#1 + #2 < 0)
			{
				^.Date.Day <- -(#1 + #2);
				^.DirectionOfTime <- 'backward';
			}
			else if(#1 + #2 > 0)
			{
				^.Date.Day <- #1 + #2;
				^.DirectionOfTime <- 'forward';	
			}
		}
		else
		{
			if(#2 < 0)
			{
				^.Date.Day <- -#2;
				^.DirectionOfTime <- 'backward';
			}
			else if(#2 > 0)
			{
				^.Date.Day <- #2;
				^.DirectionOfTime <- 'forward';	
			}
		}
    	}
)

// in 4 days
// in 1 day
// 4 days
// 1 day
// within 2 days
(DateRule04_1 :
    	[ OffsetDate -> lexPrepIn? lexNumberDigits lexDayTerm ] 
	{
		^.Date.Day <- #2;
		^.DirectionOfTime <- 'forward';
    	}
)

// in 2 mondays
(DateRule04_2 :
    	[ OffsetDate -> lexPrepIn? lexNumberDigits lexDayInWeek ] 
	{
		^.Date.DayInWeek <- #3;
		^.DayInWeekOffset <- #2;
		^.DirectionOfTime <- 'forward';    	
	}
)

// in 2 weeks
(DateRule04_3 :
    	[ OffsetDate -> lexPrepIn? lexNumberDigits lexWeekTerm ] 
	{
		^.Date.Week <- #2;
		^.DirectionOfTime <- 'forward';    	
	}
)

// in 2 months
(DateRule04_4 :
    	[ OffsetDate -> lexPrepIn? lexNumberDigits lexMonthTerm ] 
	{
		^.Date.Month <- #2;
		^.DirectionOfTime <- 'forward';    	
	}
)

// in 2 years
(DateRule04_5 :
    	[ OffsetDate -> lexPrepIn? lexNumberDigits lexYearTerm ] 
	{
		^.Date.Year <- #2;
		^.DirectionOfTime <- 'forward';    	
	}
)


// next day
// following day
(DateRule05_1 :
    	[ OffsetDate -> lexTemporalModifier lexDayTerm ] 
	{
		^.Date.Day <- #1;
		^.DirectionOfTime <- 'forward';    	
    	}
)

// on monday
// next monday
// following monday
(DateRule05_2 :
    	[ OffsetDate -> lexTemporalModifier lexDayInWeek ] 
	{
		^.Date.DayInWeek <- #2;
		^.DayInWeekOffset <- #1;
		^.DirectionOfTime <- 'forward';    	
    	}
)

// next week
(DateRule05_3 :
    	[ OffsetDate -> lexTemporalModifier lexWeekTerm ] 
	{
		^.Date.Week <- #1;
		^.DirectionOfTime <- 'forward';    	    	
	}
)

// next month
(DateRule05_4 :
    	[ OffsetDate -> lexTemporalModifier lexMonthTerm ] 
	{
		^.Date.Month <- #1;
		^.DirectionOfTime <- 'forward';    	    	
    	}
)

// next year
(DateRule05_5 :
    	[ OffsetDate -> lexTemporalModifier lexYearTerm ] 
	{
		^.Date.Year <- #1;
		^.DirectionOfTime <- 'forward';    	    	
    	}
)


// from today
// from tomorrow
(DateRule06 :
    	[ OffsetDate -> lexPrepFrom OffsetDate ] 
	{
		^ <- #2;
    	}
)

// next day from tomorrow
// next day from today
// next week from tomorrow

// Seguir probando con los ejemplos de arriba
(DateRule07 :
    	[ OffsetDate/1 -> OffsetDate/1 OffsetDate/0 ] 
	{
		^ <- #1;
		^ <& #2;
		if(#1.Date.Day && #2.Date.Day)
		{
			^.Date.Day <- #1.Date.Day + #2.Date.Day;
		}
		//^.Date.Week <- #1.Date.Week + #2.Date.Week;
		//^.Date.Month <- #1.Date.Month + #2.Date.Month;
		//^.Date.Year <- #1.Date.Year + #2.Date.Year;
    	}
)

/*
// 2 days ago
// 3 days in advance
(DateRule08 :
    	[ OffsetDate -> OffsetDate lexMetaTemporalModifier ] 
	{
		^.Day <- #1.Day * #2;
		^.DayInWeek <- #1.DayInWeek;
		^.Week <- #1.Week * #2;
		^.Month <- #1.Month * #2;
		^.Year <- #1.Year * #2;
    	}
)

// after a couple of weeks
// after next week
// the next day after the next day after tomorrow
(DateRule09 :
    	[ OffsetDate -> lexTemporalModifier OffsetDate ] 
	{
		^ <- #2;
		if(#2.Day != 0)
		{
			^.Day <- #1 + #2.Day;
		}
		else if(#2.Week != 0)
		{
			^.Week <- #1 + #2.Week;
		}
		else if(#2.Month != 0)
		{
			^.Month <- #1 + #2.Month;
		}
		else if(#2.Year != 0)
		{
			^.Year <- #1 + #2.Year;
		}
		else
		{
			^.Day <- #1 + #2.Day;
		}
    	}
)

// on monday
// next monday
// following monday
(DateRule10_1 :
    	[ OffsetDate -> lexTemporalModifier lexDayInWeek ] 
	{
		^.Day <- #1;
		^.DayInWeek <- #2;
		^.Week <- 0;
		^.Month <- 0;
		^.Year <- 0;
    	}
)

// this monday
(DateRule10_2 :
    	[ OffsetDate -> lexDetThis lexDayInWeek ] 
	{
		^.Day <- 1;
		^.DayInWeek <- #2;
		^.Week <- 0;
		^.Month <- 0;
		^.Year <- 0;
    	}
)

// in 2 mondays
// 3 tuesdays ago
(DateRule11 :
    	[ OffsetDate -> lexPrepPlace? lexNumberDigits lexDayInWeek ] 
	{
		^.Day <- #2;
		^.DayInWeek <- #3;
		^.Week <- 0;
		^.Month <- 0;
		^.Year <- 0;
    	}
)

// august the 1st 1999
// august 1st 1999
// august 1 1999
// august the 1 1999
// august the 1st
// august 1st
// august 1
// august the 1
(DateRule12 :
	[ BaseDate -> lexBaseMonth lexDetThe? <lexBaseDay | lexNumberDigits> lexNumberDigits? ]
	{
	        ^.Day <- #3;
        	^.Month <- #1;
        	^.Year <- #4;
    	}
)

// the 1st of august 2016
// the 1st of august 
// the 1st august 2016
// the 1st august 
// the 1 of august 2016
// the 1 of august 
// the 1 august 2016
// the 1 august 
// 1st of august 2016
// 1st of august 
// 1st august 2016
// 1st august 
// 1 of august 2016
// 1 of august 
// 1 august 2016
// 1 august 
(DateRule13 :
	[ BaseDate -> lexDetThe? <lexBaseDay | lexNumberDigits> lexPrepOf? lexBaseMonth lexNumberDigits? ]
	{
	        ^.Day <- #2;
        	^.Month <- #4;
        	^.Year <- #5;
    	}
)

// in march 2010
// in march
(DateRule14 :
	[ BaseDate -> lexPrepPlace? lexBaseMonth lexNumberDigits?]
	{
		^.Day <- 1;
		^.Month <- #2;
		^.Year <- #3;
	}
)



// following from 25 of august
(DateRule15 :
	[ DialogueDate -> lexTemporalModifier BaseDate ]
	{
		^.BaseDate <- #2;
		^.OffsetDate.Day <- #1;	
		^.OffsetDate.DayInWeek <- 0;
		^.OffsetDate.Month <- 0;
		^.OffsetDate.Year <- 0;				
	}
)

// next day from 25 of august
(DateRule16_1 :
	[ DialogueDate -> OffsetDate BaseDate ]
	{
		^.OffsetDate <- #1;
		^.BaseDate <- #2;
	}
)

// from 25 of august next day
(DateRule16_2 :
	[ DialogueDate -> BaseDate OffsetDate ]
	{
		^.OffsetDate <- #2;
		^.BaseDate <- #1;
	}
)
*/
