// **************************************************
//
//	
//
// **************************************************
//
//	PROJECT	:	
//	MODULE  :	
//	PACKAGE :	
//	FILE	:	
//
// **************************************************

(CogitoScheme BootingDialogue :
	CogitoCapture 
	{
        	( $MINDBOARD@DialogueState.DialoguePhase == 'bootingDialogue' )
	}
	CogitoAction 
	{
		SpyMessage("$$>> CogitoScheme (Start): BootingDialogue");

		createDialogueScheme();

		initMindBoard();

		initDialogueScheme();

	        $MINDBOARD@DialogueState.DialoguePhase <- 'startTalking';

		displayMindBoard();

		SpyMessage("$$>> CogitoScheme (End): BootingDialogue");
	}
)

(CogitoScheme StartTalking :
	CogitoCapture 
	{
        	( $MINDBOARD@DialogueState.DialoguePhase == 'startTalking' )
	}
	CogitoAction 
	{
		SpyMessage("$$>> CogitoScheme (Start): StartTalking");

		displayMindBoardInput();

		startTalkingTurn();

		// digestDialogueInput();
		
	        $MINDBOARD@DialogueState.DialoguePhase <- 'processTalking';

		SpyMessage("$$>> CogitoScheme (End): StartTalking");
	}
)

(CogitoScheme ProcessTalkingTell :
	CogitoCapture 
	{
        	( $MINDBOARD@DialogueState.DialoguePhase == 'processTalking' ) &&
		( $MINDBOARD@CurrentNode.ScriptNodeType == 'tell' )
	}
	CogitoAction 
	{
		SpyMessage("$$>> CogitoScheme (Start): ProcessTalking / Tell");

		displayMindBoard();

//		assignCurrentNodeToDialogueOutput();

//		advanceNodeInScript();
		$MINDBOARD@CurrentNode.ScriptNodeType <- 'wait' ;

		CogitoRetry();

		BatchInsertEnd( $MINDBOARD@DialogueOutput.DialogueActs, $MINDBOARD@CurrentNode.ScriptNodeContent.DialogueAct );

	        // $MINDBOARD@DialogueState.DialoguePhase <- 'closeTalking';

		SpyMessage("$$>> CogitoScheme (End): ProcessTalking / Tell");
	}
)

(CogitoScheme ProcessTalkingSafety :
	CogitoCapture 
	{
        	( $MINDBOARD@DialogueState.DialoguePhase == 'processTalking' )
	}
	CogitoAction 
	{
		SpyMessage("$$>> CogitoScheme (Start): ProcessTalking / Safety");

	        $MINDBOARD@DialogueState.DialoguePhase <- 'closeTalking';

		SpyMessage("$$>> CogitoScheme (End): ProcessTalking / Safety");
	}
)

(CogitoScheme CloseTalking :
	CogitoCapture 
	{
        	( $MINDBOARD@DialogueState.DialoguePhase == 'closeTalking' )
	}
	CogitoAction 
	{
		SpyMessage("$$>> CogitoScheme (Start): CloseTalking");

		displayMindBoardOutput();

		closeTalkingTurn();

	        $MINDBOARD@DialogueState.DialoguePhase <- 'startTalking';

		CogitoQuit();

		SpyMessage("$$>> CogitoScheme (End): CloseTalking");
	}
)

