// **************************************************
//
//	
//
// **************************************************
//
//	PROJECT	:	
//	MODULE  :	
//	PACKAGE :	
//	FILE	:	
//
// **************************************************

bool executeBooleanDialogueAction( DialogueAction dialogueAction )
{
	bool ret;

	if(dialogueAction.DialogueActionName == 'is_node_state')
	{
		string node, state;
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, node );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 2, state );
		ret = isNodeState(node, state);
	}
	else if(dialogueAction.DialogueActionName == 'is_info_state')
	{
		string number, state;
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, number );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 2, state );
		ret = isInfoState(number, state);
	}
	else if(dialogueAction.DialogueActionName == 'digested_core')
	{
		string dimensionString, functionString;
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, dimensionString );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 2, functionString );
		ret = digestedCore( dimensionString, functionString );
	}
	else
	{
		SpyMessage("");
		SpyMessage("");
		SpyMessage("Dialogue Action ", dialogueAction.DialogueActionName, "not implemented (Boolean)");
		SpyMessage("");
		SpyMessage("");
	}

	return ret;	
}

bool digestedCore(string dimensionString, string functionString)
{
	Dimension dimension <- ShapeToRange( dimensionString );
	Function function <- ShapeToRange( functionString );

	bool ret <- False;
	ProferenceChunk proference;

	int size <- BatchSize( $MINDBOARD@DialogueState.NotDigestedProferenceChunks );
	for( int position <- 1; position <= size; position++ )
	{
		BatchRecoverPosition( $MINDBOARD@DialogueState.NotDigestedProferenceChunks, position, proference );
		if( proference.CoreDialogueAct.Dimension == dimension && proference.CoreDialogueAct.Function == function )
		{
			ret <- True;
		}
	}

	return ret;
}

bool isInfoState(string number, string state)
{
	DialogueScript script;
	int infoNumber;
	ScriptInfoItem scriptInfoItem;
	InfoItemState infoItemState;

	script <- getCurrentScript();
	infoItemState <- ShapeToRange( state );
	infoNumber <- ShapeToInt( number );
	BatchRecoverPosition( script.ScriptInfoItems, infoNumber, scriptInfoItem );

	if( scriptInfoItem.InfoItemState == infoItemState )
	{
		return True;
	}
		
	return False;
}

bool isNodeState(string nodeDescriptor, string state)
{
	bool ret;
	ScriptNode node;
	ScriptNodeStateName scriptNodeStateName;

	ret <- False;
	scriptNodeStateName <- ShapeToRange(state);
	node <- getNodeFromCurrentScript( nodeDescriptor );

	if(node.ScriptNodeState.ScriptNodeStateName == scriptNodeStateName )
	{
		ret <- True;
	}

	return ret;
}

