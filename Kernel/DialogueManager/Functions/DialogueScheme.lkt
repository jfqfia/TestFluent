// ******************************************************
//      Lekta Application
// ***************************
//      PROJECT :       Alter
//      MODULE  :       DManager/Library (Dialogue Scheme)
//      FILE    :       DialogueScheme.lkt
// ******************************************************

procedure	createDialogueScheme()
{
	DialogueScheme dialogueScheme;
	DialogueScript dialogueScript;

	dialogueScheme.SchemeDescriptor <- 'Fluency';

	// Script - ScriptManager
	dialogueScript <- createDialogueScriptManager( );
	BatchInsertEnd( dialogueScheme.DialogueScripts,
			dialogueScript );

	/*
	// Script - ScriptMedicalAppointment
	dialogueScript <- createDialogueScriptMedicalAppointment( );
	BatchInsertEnd( dialogueScheme.DialogueScripts,
			dialogueScript );

	// Script - ScriptBankConsultBalance
	dialogueScript <- createDialogueScriptBankConsultBalance( );
	BatchInsertEnd( dialogueScheme.DialogueScripts,
			dialogueScript );

	// Script - ScriptBankConsultBalance
	dialogueScript <- createDialogueScriptBankLocateATM( );
	BatchInsertEnd( dialogueScheme.DialogueScripts,
			dialogueScript );

	// Script - ScriptBankTransfer
	dialogueScript <- createDialogueScriptBankTransfer( );
	BatchInsertEnd( dialogueScheme.DialogueScripts,
			dialogueScript );
	*/

	$MINDBOARD@DialogueScheme <- dialogueScheme;
}

procedure	initDialogueScheme()
{
	$MINDBOARD@CurrentScript <- selectDialogueScript( 'Manager' );
	$MINDBOARD@CurrentNode <- selectInitialScriptNode( $MINDBOARD@CurrentScript );
}

DialogueScript selectDialogueScript(string scriptDescriptor)
{
	DialogueScript dialogueScript;

	int schemeSize <- BatchSize( $MINDBOARD@DialogueScheme.DialogueScripts);
	for ( int position <- 1; position <= schemeSize; position ++) 
	{
		BatchRecoverPosition( $MINDBOARD@DialogueScheme.DialogueScripts, position, dialogueScript );

		if (scriptDescriptor == dialogueScript.ScriptDescriptor)
		{
			return dialogueScript;
		}
	}

	DialogueScript nullDialogueScript;
	return nullDialogueScript;
}

ScriptNode selectInitialScriptNode(DialogueScript dialogueScript)
{
	ScriptNode node;

	int scriptSize <- BatchSize( dialogueScript.ScriptNodes );
	for(int position <- 1; position <= scriptSize; position++) 
	{
		BatchRecoverPosition( dialogueScript.ScriptNodes, position, node );

		if ( node.ScriptNodeIsInitial )
		{
			return node;
		}
	}

	ScriptNode nullScriptNode;
	return nullScriptNode;
}
