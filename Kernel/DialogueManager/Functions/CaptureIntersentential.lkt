// **************************************************
//
//	
//
// **************************************************
//
//	PROJECT	:	
//	MODULE  :	
//	PACKAGE :	
//	FILE	:	
//
// **************************************************

procedure pushCaptureIntersententialParameter(string parameter)
{
	DialogueScript dialogueScript;
	
	dialogueScript <- createCaptureIntersententialParameter(parameter);

	BatchInsertEnd( $MINDBOARD@DialogueScheme.DialogueScripts, dialogueScript );
	BatchInsertEnd( $MINDBOARD@WorkingDialogueScheme.DialogueScripts, dialogueScript );
	BatchInsertEnd( $MINDBOARD@DialogueState.ActivatedScriptsStack, dialogueScript.ScriptDescriptor );
}

DialogueScript createCaptureIntersententialParameter(string parameter)
{
	// Script Descriptor
	DialogueScript dialogueScript;
	string scriptDescriptor <- '';
	scriptDescriptor <- LiteralConcat(scriptDescriptor, 'capture_intersentential_parameter_' );
	scriptDescriptor <- LiteralConcat(scriptDescriptor, parameter );
	dialogueScript.ScriptDescriptor <- scriptDescriptor;

	// Capture parameter of calling script
	DialogueScript script <- getCurrentScript();
	int infoNumber <- ShapeToInt( parameter );
	ScriptInfoItem recoveredScriptInfoItem;
	BatchRecoverPosition( script.ScriptInfoItems, infoNumber, recoveredScriptInfoItem );
	
	// Trigger
	BatchInsertEnd( dialogueScript.ScriptTrigger.ParameterTypes , recoveredScriptInfoItem.InfoItemParameterType );

	// Info
	ScriptInfoItem scriptInfoItem, emptyScriptInfoItem;

	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'parameter';	
	scriptInfoItem.InfoItemParameterType <- recoveredScriptInfoItem.InfoItemParameterType;
	scriptInfoItem.InfoItemValue <- recoveredScriptInfoItem.InfoItemValue;	
	scriptInfoItem.InfoItemState <- 'captured';	
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	// Node - CapturedParameter
	ScriptNode nodeCapturedParameter <- createScriptNode( 'capturednode', 'execute', 1 );
	BatchInsertEnd( nodeCapturedParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '1', 'captured' ));
	BatchInsertEnd( nodeCapturedParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '1', 'checking' ));
	BatchInsertEnd( nodeCapturedParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'checkingnode', 'notfinalized' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeCapturedParameter );

	// Node - FirstParameterDisagree
	ScriptNode nodeFirstParameterDisagree <- createScriptNode( 'firstparameterdisagree', 'execute', 1 );
	nodeFirstParameterDisagree.ScriptNodeContent <- setNodeContent( 'statement', 'request', 'repeat', 'intersentential' );
	BatchInsertEnd( nodeFirstParameterDisagree.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_counter_leq', 'capturednode', '1' ));
	BatchInsertEnd( nodeFirstParameterDisagree.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '1', 'rejected' ));
	BatchInsertEnd( nodeFirstParameterDisagree.ScriptNodePostconditions, createDialogueAction2Arguments( 'clear_info_value_of_script', script.ScriptDescriptor, parameter));
	BatchInsertEnd( nodeFirstParameterDisagree.ScriptNodePostconditions, createDialogueAction3Arguments( 'set_info_state_of_script', script.ScriptDescriptor, parameter, 'empty'));
	BatchInsertEnd( nodeFirstParameterDisagree.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));	
	BatchInsertEnd( nodeFirstParameterDisagree.ScriptNodePostconditions, createDialogueAction0Arguments( 'pull_script_fast' ));	

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeFirstParameterDisagree );

	// Node - ParameterDisagree
	ScriptNode nodeParameterDisagree <- createScriptNode( 'parameterdisagree', 'execute', 1 );
	nodeParameterDisagree.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'intersentential', 'parameter' );
	BatchInsertEnd( nodeParameterDisagree.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_counter_leq', 'capturednode', '1' ));
	BatchInsertEnd( nodeParameterDisagree.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '1', 'rejected' ));
	BatchInsertEnd( nodeParameterDisagree.ScriptNodePostconditions, createDialogueAction2Arguments( 'clear_info_value_of_script', dialogueScript.ScriptDescriptor, '1'));
	BatchInsertEnd( nodeParameterDisagree.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_history_parameter', '1' ));
	BatchInsertEnd( nodeParameterDisagree.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '1', 'checking' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeParameterDisagree );

	// Node - CheckingParameter 
	ScriptNode nodeCheckingParameter <- createScriptNode( 'checkingnode', 'execute', 2 );
	BatchInsertEnd( nodeCheckingParameter.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'checkingnode', 'correct' ));
	BatchInsertEnd( nodeCheckingParameter.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'checkingnode', 'pending' ));
	BatchInsertEnd( nodeCheckingParameter.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'checkingnode', 'incorrect' ));
	BatchInsertEnd( nodeCheckingParameter.ScriptNodePostconditions, createDialogueAction1Arguments( 'check_parameter_intersentential', '1' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeCheckingParameter );

	// Node - CorrectParameter 
	ScriptNode nodeCorrectParameter <- createScriptNode( 'correctnode', 'wait', 2 );
	nodeCorrectParameter.ScriptNodeContent <- setNodeContent( 'question', 'propositional', 'explicit', 'parameter' );
	BatchInsertEnd( nodeCorrectParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'checkingnode', 'correct' ));
	BatchInsertEnd( nodeCorrectParameter.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'correctnode', 'pending' ));
	BatchInsertEnd( nodeCorrectParameter.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_history_parameter', '1' ));	
	BatchInsertEnd( nodeCorrectParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'correctnode', 'pending' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeCorrectParameter );

	// Node - Agreement
	ScriptNode nodeAgreement <- createScriptNode( 'agreementnode', 'execute', 3 );
	BatchInsertEnd( nodeAgreement.ScriptNodePreconditions, createPrecondition2Arguments( 'digested_core', 'basicanswer', 'agreement' ));
	BatchInsertEnd( nodeAgreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'correctnode', 'pending' ));
	BatchInsertEnd( nodeAgreement.ScriptNodePostconditions, createDialogueAction1Arguments( 'unroll_parameter', '1' ));
	BatchInsertEnd( nodeAgreement.ScriptNodePostconditions, createDialogueAction3Arguments( 'set_info_value_of_script', script.ScriptDescriptor, parameter, '1'));
	BatchInsertEnd( nodeAgreement.ScriptNodePostconditions, createDialogueAction3Arguments( 'set_info_state_of_script', script.ScriptDescriptor, parameter, 'checking'));
	BatchInsertEnd( nodeAgreement.ScriptNodePostconditions, createDialogueAction0Arguments( 'pull_script_fast' ));	

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeAgreement );

	// Node - Disagreement
	ScriptNode nodeDisagreement <- createScriptNode( 'disagreementnode', 'execute', 3 );
	nodeDisagreement.ScriptNodeContent <- setNodeContent( 'statement', 'request', 'repeat', 'intersentential' );
	BatchInsertEnd( nodeDisagreement.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'digested_core', 'basicanswer', 'agreement' ));
	BatchInsertEnd( nodeDisagreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'correctnode', 'pending' ));
	BatchInsertEnd( nodeDisagreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'clear_info_value_of_script', script.ScriptDescriptor, parameter));
	BatchInsertEnd( nodeDisagreement.ScriptNodePostconditions, createDialogueAction3Arguments( 'set_info_state_of_script', script.ScriptDescriptor, parameter, 'empty'));
	BatchInsertEnd( nodeDisagreement.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));	
	BatchInsertEnd( nodeDisagreement.ScriptNodePostconditions, createDialogueAction0Arguments( 'pull_script_fast' ));	

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeDisagreement );
	
	// Node - IncorrectParameter 
	ScriptNode nodeIncorrectParameter <- createScriptNode( 'incorrectnode', 'execute', 2 );
	BatchInsertEnd( nodeIncorrectParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'checkingnode', 'incorrect' ));
	BatchInsertEnd( nodeIncorrectParameter.ScriptNodePostconditions, createDialogueAction1Arguments( 'unroll_parameter', '1' ));
	BatchInsertEnd( nodeIncorrectParameter.ScriptNodePostconditions, createDialogueAction3Arguments( 'set_info_value_of_script', script.ScriptDescriptor, parameter, '1'));
	BatchInsertEnd( nodeIncorrectParameter.ScriptNodePostconditions, createDialogueAction3Arguments( 'set_info_state_of_script', script.ScriptDescriptor, parameter, 'captured'));
	BatchInsertEnd( nodeIncorrectParameter.ScriptNodePostconditions, createDialogueAction0Arguments( 'pull_script_fast' ));		

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeIncorrectParameter );

	// Node - RepeatParameter
	ScriptNode nodeRepeatParameter <- createScriptNode( 'repeatnode', 'execute', 4 );
	nodeRepeatParameter.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'raw', 'parameter' );
	BatchInsertEnd( nodeRepeatParameter.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_info_state', '1', 'empty' ));
	BatchInsertEnd( nodeRepeatParameter.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'repeatnode', 'finalized' ));
	BatchInsertEnd( nodeRepeatParameter.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', '1' ));	
	BatchInsertEnd( nodeRepeatParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'repeatnode', 'finalized' ));
	
	BatchInsertEnd( dialogueScript.ScriptNodes, nodeRepeatParameter );

	// Node - Continue
	ScriptNode nodeContinue <- createScriptNode( 'continuenode', 'wait', 5 );
	nodeContinue.ScriptNodeContent <- setNodeContent( 'statement', 'request', 'continue', 'intersentential' );
	BatchInsertEnd( nodeContinue.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));	
	BatchInsertEnd( nodeContinue.ScriptNodePostconditions, createDialogueAction1Arguments( 'set_expectative_parameter', ShapeToString(recoveredScriptInfoItem.InfoItemParameterType) ));
	BatchInsertEnd( nodeContinue.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '1', 'echoed' ));
	BatchInsertEnd( nodeContinue.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'repeatnode', 'notfinalized' ));		

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeContinue );

	return dialogueScript;
}


/*
S: What's your phone number?
U: 686.
S: 686, ok, go on.
U: 57.
S: 57, yes.
U: 59.
S: 59, all right.
U: no, no!
S: Ok, we have 686 57, please continue.
U: 58.
S: 58, right.
S: 85.
S: OK, let me confirm your phone number, is it 686 57 58 85?
*/
