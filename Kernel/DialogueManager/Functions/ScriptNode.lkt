// **************************************************
//
//	
//
// **************************************************
//
//	PROJECT	:	
//	MODULE  :	
//	PACKAGE :	
//	FILE	:	
//
// **************************************************

ScriptNode createScriptNode( string nodeDescriptor, string nodeType, ScriptNodePriorityLevel priorityLevel )
{
	ScriptNode ret;

	ret.ScriptNodeDescriptor <- nodeDescriptor;
	ret.ScriptNodeType <- ShapeToRange( nodeType );
	ret.ScriptNodePriorityLevel <- priorityLevel;

	return ret;
}

ScriptNodeContent setNodeContent( string dimension, string function, string action, string scope )
{
	ScriptNodeContent ret;
	ret.DialogueAct.CoreDialogueAct.Dimension <- ShapeToRange( dimension );
	ret.DialogueAct.CoreDialogueAct.Function <- ShapeToRange( function );
	ret.DialogueAct.TaskDialogueAct.Scope <- scope;
	BatchInsertEnd( ret.DialogueAct.TaskDialogueAct.Action, action );

	return ret;
}

DialogueActionPrecondition createNegatedPrecondition2Arguments( string name, string arg1, string arg2 )
{
	DialogueActionPrecondition precondition;

	precondition.NegatedPrecondition <- True;
	precondition.DialogueAction <- createDialogueAction2Arguments( name, arg1, arg2 );

	return precondition;
}

DialogueActionPrecondition createNegatedPrecondition1Arguments( string name, string arg1 )
{
	DialogueActionPrecondition precondition;

	precondition.NegatedPrecondition <- True;
	precondition.DialogueAction <- createDialogueAction1Arguments( name, arg1 );

	return precondition;
}

DialogueActionPrecondition createPrecondition3Arguments( string name, string arg1, string arg2, string arg3 )
{
	DialogueActionPrecondition precondition;

	precondition.NegatedPrecondition <- False;
	precondition.DialogueAction <- createDialogueAction3Arguments( name, arg1, arg2, arg3 );

	return precondition;
}

DialogueActionPrecondition createPrecondition2Arguments( string name, string arg1, string arg2 )
{
	DialogueActionPrecondition precondition;

	precondition.NegatedPrecondition <- False;
	precondition.DialogueAction <- createDialogueAction2Arguments( name, arg1, arg2 );

	return precondition;
}

DialogueActionPrecondition createPrecondition1Arguments( string name, string arg1)
{
	DialogueActionPrecondition precondition;

	precondition.NegatedPrecondition <- False;
	precondition.DialogueAction <- createDialogueAction1Arguments( name, arg1 );

	return precondition;
}

DialogueActionPrecondition createPrecondition0Arguments( string name )
{
	DialogueActionPrecondition precondition;

	precondition.NegatedPrecondition <- False;
	precondition.DialogueAction <- createDialogueAction0Arguments( name );

	return precondition;
}

DialogueAction createDialogueAction5Arguments( string name, string arg1, string arg2, string arg3, string arg4, string arg5 )
{
	DialogueAction dialogueAction;

	dialogueAction.DialogueActionName <- name;
	BatchInsertEnd( dialogueAction.DialogueActionArguments, arg1 );
	BatchInsertEnd( dialogueAction.DialogueActionArguments, arg2 );
	BatchInsertEnd( dialogueAction.DialogueActionArguments, arg3 );
	BatchInsertEnd( dialogueAction.DialogueActionArguments, arg4 );
	BatchInsertEnd( dialogueAction.DialogueActionArguments, arg5 );
	
	return dialogueAction;
}

DialogueAction createDialogueAction4Arguments( string name, string arg1, string arg2, string arg3, string arg4 )
{
	DialogueAction dialogueAction;

	dialogueAction.DialogueActionName <- name;
	BatchInsertEnd( dialogueAction.DialogueActionArguments, arg1 );
	BatchInsertEnd( dialogueAction.DialogueActionArguments, arg2 );
	BatchInsertEnd( dialogueAction.DialogueActionArguments, arg3 );
	BatchInsertEnd( dialogueAction.DialogueActionArguments, arg4 );
	
	return dialogueAction;
}

DialogueAction createDialogueAction3Arguments( string name, string arg1, string arg2, string arg3 )
{
	DialogueAction dialogueAction;

	dialogueAction.DialogueActionName <- name;
	BatchInsertEnd( dialogueAction.DialogueActionArguments, arg1 );
	BatchInsertEnd( dialogueAction.DialogueActionArguments, arg2 );
	BatchInsertEnd( dialogueAction.DialogueActionArguments, arg3 );
	
	return dialogueAction;
}

DialogueAction createDialogueAction2Arguments( string name, string arg1, string arg2 )
{
	DialogueAction dialogueAction;

	dialogueAction.DialogueActionName <- name;
	BatchInsertEnd( dialogueAction.DialogueActionArguments, arg1 );
	BatchInsertEnd( dialogueAction.DialogueActionArguments, arg2 );
	
	return dialogueAction;
}

DialogueAction createDialogueAction1Arguments( string name, string arg1)
{
	DialogueAction dialogueAction;

	dialogueAction.DialogueActionName <- name;
	BatchInsertEnd( dialogueAction.DialogueActionArguments, arg1 );
	
	return dialogueAction;
}

DialogueAction createDialogueAction0Arguments( string name )
{
	DialogueAction dialogueAction;

	dialogueAction.DialogueActionName <- name;
	
	return dialogueAction;
}



