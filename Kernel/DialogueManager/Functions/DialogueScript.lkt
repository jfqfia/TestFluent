// **************************************************
//
//	
//
// **************************************************
//
//	PROJECT	:	
//	MODULE  :	
//	PACKAGE :	
//	FILE	:	
//
// **************************************************

DialogueScript	createDialogueScriptManager()
{
	DialogueScript dialogueScript;
	DialogueAction dialogueAction, emptyDialogueAction;
	DialogueActionArgument dialogueActionArgument;

	ScriptNode nodeWelcome;
	ScriptNode nodeHmihy;
	ScriptNode nodeExplicit1;
	ScriptNode nodeExplicit2;
	ScriptNode nodeBye;
	ScriptNode nodeEnd;

	dialogueScript.ScriptDescriptor <- 'Manager';

	// Node - Welcome
	nodeWelcome <- createScriptNode( 'welcome', 'execute' );
	nodeWelcome.ScriptNodeContent <- setNodeContent( 'social', 'greeting', 'offer', 'welcome' );
	BatchInsertEnd( nodeWelcome.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'welcome', 'finalized'));
	BatchInsertEnd( nodeWelcome.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'welcome', 'finalized' ));
	BatchInsertEnd( nodeWelcome.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeWelcome );

	// Node - Hmihy
	nodeHmihy <- createScriptNode( 'hmihy', 'wait' );
	nodeHmihy.ScriptNodeContent <- setNodeContent( 'social', 'greeting', 'offer', 'hmihy' );
	BatchInsertEnd( nodeHmihy.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'welcome', 'finalized' ));
	BatchInsertEnd( nodeHmihy.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'hmihy', 'finalized' ));
	BatchInsertEnd( nodeHmihy.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'hmihy', 'finalized' ));
	BatchInsertEnd( nodeHmihy.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeHmihy );

	// Node - Explicit1
	nodeExplicit1 <- createScriptNode( 'explicit1', 'wait' );
	nodeExplicit1.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'explicit', 'continuemanager' );
	BatchInsertEnd( nodeExplicit1.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'hmihy', 'finalized' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'explicit1', 'finalized' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'explicit1', 'finalized' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeExplicit1 );

	// Node - Explicit2
	nodeExplicit2 <- createScriptNode( 'explicit2', 'execute' );
	BatchInsertEnd( nodeExplicit2.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'explicit1', 'finalized' ));
	BatchInsertEnd( nodeExplicit2.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'explicit2', 'finalized' ));
	BatchInsertEnd( nodeExplicit2.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'explicit1', 'notfinalized' ));
	BatchInsertEnd( nodeExplicit2.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'hmihy', 'notfinalized' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeExplicit2 );
	
	// Node - Bye
	nodeBye <- createScriptNode( 'bye', 'execute' );
	nodeBye.ScriptNodeContent <- setNodeContent( 'social', 'goodbye', '', '' );
	BatchInsertEnd( nodeBye.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'bye', 'finalized' ));
	BatchInsertEnd( nodeBye.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'explicit1', 'finalized' ));
	BatchInsertEnd( nodeBye.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'bye', 'finalized' ));
	BatchInsertEnd( nodeBye.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeBye );

	// Node - End
	nodeEnd <- createScriptNode( 'end', 'execute' );
	BatchInsertEnd( nodeEnd.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'bye', 'finalized' ));
	BatchInsertEnd( nodeEnd.ScriptNodePostconditions, createDialogueAction0Arguments( 'pull_script' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeEnd );
				
	return dialogueScript;
}

DialogueScript createDialogueScriptConsultBalance()
{
	// Script Descriptor
	DialogueScript dialogueScript;
	dialogueScript.ScriptDescriptor <- 'ConsultBalance';

	// Trigger
	dialogueScript.ScriptTrigger.CoreDialogueAct.Dimension <- 'statement';
	dialogueScript.ScriptTrigger.CoreDialogueAct.Function <- 'request';
	dialogueScript.ScriptTrigger.ActionDomain <- 'consult';
	dialogueScript.ScriptTrigger.Scope <- 'bankaccount';
	BatchInsertEnd( dialogueScript.ScriptTrigger.ParameterTypes , 'accountnumber' );
	
	// Info
	ScriptInfoItem scriptInfoItem, emptyScriptInfoItem;

	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'core';	
	scriptInfoItem.InfoItemState <- 'empty';	
	scriptInfoItem.InfoItemValue.CoreDialogueAct.Dimension <- 'statement';
	scriptInfoItem.InfoItemValue.CoreDialogueAct.Function <- 'request';
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );
	
	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'action';	
	scriptInfoItem.InfoItemState <- 'empty';	
	scriptInfoItem.InfoItemValue.ActionDomain <- 'consult';
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'scope';	
	scriptInfoItem.InfoItemState <- 'empty';	
	scriptInfoItem.InfoItemValue.Scope <- 'bankaccount';
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'parameter';	
	scriptInfoItem.InfoItemParameterType <- 'accountnumber';	
	scriptInfoItem.InfoItemState <- 'empty';	
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'parameter';	
	scriptInfoItem.InfoItemParameterType <- 'moneyamount';	
	scriptInfoItem.InfoItemState <- 'empty';	
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	// Phases

	// Phase 1
	dialogueScript <- scriptActivation(dialogueScript, 1);
	SpyMessage("");
	SpyMessage(dialogueScript.ScriptNodes);
	SpyMessage("");

	/*	
	// Phase 2
	dialogueScript <- captureParameter(dialogueScript, 2, 'mandatory', 'accountnumber');

	// Phase 3
	dialogueScript <- proposeInfoItem1(dialogueScript, 3, 'moneyamount', 'get_balance', 'accountnumber');
	
	// Phase 4	
	dialogueScript <- informExplicitParameter(dialogueScript, 4, 'moneyamount');

	// Phase 5
	dialogueScript <- endScript();
	
	*/

	// Nodes 
	ScriptNode nodeExplicitTrigger;
	ScriptNode nodeExplicitTriggerAgreement;
	ScriptNode nodeExplicitTriggerDisagreement;
	ScriptNode nodeImplicitTrigger;
	ScriptNode nodeAskAccountNumber;
	ScriptNode nodeIdontknowAccountNumber;
	ScriptNode nodeImplicitTriggerDisagreement;
	ScriptNode nodeImplicitAccountNumber;
	ScriptNode nodeCheckAccountNumber;
	ScriptNode nodeIncorrectAccountNumber;
	ScriptNode nodeCorrectAccountNumber;
	ScriptNode nodeInfoMoneyAmount;
	
/*
	// Node - ExplicitTrigger
	nodeExplicitTrigger <- createScriptNodeWithPriority( 'explicittrigger', 'wait', 10 );
	nodeExplicitTrigger.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'explicit', 'triggerconsultbalance' );
	BatchInsertEnd( nodeExplicitTrigger.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'explicittrigger', 'finalized' ));
	BatchInsertEnd( nodeExplicitTrigger.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '3', 'empty' ));
	BatchInsertEnd( nodeExplicitTrigger.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'explicittrigger', 'finalized' ));
	BatchInsertEnd( nodeExplicitTrigger.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeExplicitTrigger.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '1', 'proposed' ));
	BatchInsertEnd( nodeExplicitTrigger.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '2', 'proposed' ));
	BatchInsertEnd( nodeExplicitTrigger.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '3', 'proposed' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeExplicitTrigger );

	// Node - ExplicitTriggerAgreement
	nodeExplicitTriggerAgreement <- createScriptNode( 'explicittriggeragreement', 'execute' );
	BatchInsertEnd( nodeExplicitTriggerAgreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'explicittrigger', 'finalized' ));
	BatchInsertEnd( nodeExplicitTriggerAgreement.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'explicittriggeragreement', 'finalized' ));
	BatchInsertEnd( nodeExplicitTriggerAgreement.ScriptNodePreconditions, createPrecondition2Arguments( 'digested_core', 'basicanswer', 'agreement' ));
	BatchInsertEnd( nodeExplicitTriggerAgreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'explicittriggeragreement', 'finalized' ));
	BatchInsertEnd( nodeExplicitTriggerAgreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'implicittrigger', 'finalized' ));
	BatchInsertEnd( nodeExplicitTriggerAgreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '1', 'grounded' ));
	BatchInsertEnd( nodeExplicitTriggerAgreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '2', 'grounded' ));
	BatchInsertEnd( nodeExplicitTriggerAgreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '3', 'grounded' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeExplicitTriggerAgreement );

	// Node - ExplicitTriggerDisagreement
	nodeExplicitTriggerDisagreement <- createScriptNode( 'explicittriggerdisagreement', 'execute' );
	BatchInsertEnd( nodeExplicitTriggerDisagreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'explicittrigger', 'finalized' ));
	BatchInsertEnd( nodeExplicitTriggerDisagreement.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'explicittriggeragreement', 'finalized' ));
	BatchInsertEnd( nodeExplicitTriggerDisagreement.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'digested_core', 'basicanswer', 'agreement' ));
	BatchInsertEnd( nodeExplicitTriggerDisagreement.ScriptNodePostconditions, createDialogueAction0Arguments( 'pull_script' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeExplicitTriggerDisagreement );

	// Node - ImplicitTrigger
	nodeImplicitTrigger <- createScriptNodeWithPriority( 'implicittrigger', 'execute', 10);
	nodeImplicitTrigger.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'implicit', 'triggerconsultbalance' );
	BatchInsertEnd( nodeImplicitTrigger.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'implicittrigger', 'finalized' ));
	BatchInsertEnd( nodeImplicitTrigger.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '3', 'captured' ));
	BatchInsertEnd( nodeImplicitTrigger.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'implicittrigger', 'finalized' ));
	BatchInsertEnd( nodeImplicitTrigger.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeImplicitTrigger.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '1', 'echoed' ));
	BatchInsertEnd( nodeImplicitTrigger.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '2', 'echoed' ));
	BatchInsertEnd( nodeImplicitTrigger.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '3', 'echoed' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeImplicitTrigger );

	// Node - ImplicitTriggerDisagreement
	nodeImplicitTriggerDisagreement <- createScriptNodeWithPriority( 'implicittriggerdisagreement', 'execute', 5);
	BatchInsertEnd( nodeImplicitTriggerDisagreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'implicittrigger', 'finalized' ));
	BatchInsertEnd( nodeImplicitTriggerDisagreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '1', 'rejected' ));
	BatchInsertEnd( nodeImplicitTriggerDisagreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '2', 'rejected' ));
	BatchInsertEnd( nodeImplicitTriggerDisagreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '3', 'rejected' ));
	BatchInsertEnd( nodeImplicitTriggerDisagreement.ScriptNodePostconditions, createDialogueAction0Arguments( 'pull_script' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeImplicitTriggerDisagreement );
*/
	// Node - AskAccountNumber
	nodeAskAccountNumber <- createScriptNode( 'askaccountnumber', 'wait' );
	nodeAskAccountNumber.ScriptNodeContent <- setNodeContent( 'question', 'whquestion', 'what', 'accountnumber' );
	BatchInsertEnd( nodeAskAccountNumber.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'implicittrigger', 'finalized' ));
	BatchInsertEnd( nodeAskAccountNumber.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '4', 'empty' ));
	BatchInsertEnd( nodeAskAccountNumber.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'askaccountnumber', 'finalized' ));
	BatchInsertEnd( nodeAskAccountNumber.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeAskAccountNumber.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'askaccountnumber', 'finalized' ));
	BatchInsertEnd( nodeAskAccountNumber.ScriptNodePostconditions, createDialogueAction1Arguments( 'set_expectative_parameter', 'accountnumber' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeAskAccountNumber );

	// Node - IdontknowAccountNumber
	nodeIdontknowAccountNumber <- createScriptNode( 'idontknowaccountnumber', 'execute' );
	nodeIdontknowAccountNumber.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'idontknow', 'parameter' );
	BatchInsertEnd( nodeIdontknowAccountNumber.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'implicittrigger', 'finalized' ));
	BatchInsertEnd( nodeIdontknowAccountNumber.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '4', 'empty' ));
	BatchInsertEnd( nodeIdontknowAccountNumber.ScriptNodePreconditions, createPrecondition2Arguments( 'digested_core', 'basicanswer', 'dontknow' ));
	BatchInsertEnd( nodeIdontknowAccountNumber.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', '4' ));
	BatchInsertEnd( nodeIdontknowAccountNumber.ScriptNodePostconditions, createDialogueAction0Arguments( 'pull_script' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeIdontknowAccountNumber );

	// Node - ImplicitAccountNumber
	nodeImplicitAccountNumber <- createScriptNode( 'implicitaccountnumber', 'execute');
	nodeImplicitAccountNumber.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'implicit', 'parameter' );
	BatchInsertEnd( nodeImplicitAccountNumber.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '4', 'captured' ));
	BatchInsertEnd( nodeImplicitAccountNumber.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', '4' ));
	BatchInsertEnd( nodeImplicitAccountNumber.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '4', 'echoed' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeImplicitAccountNumber );

	// Node - CheckAccountNumber
	nodeCheckAccountNumber <- createScriptNode( 'checkaccountnumber', 'execute' );
	BatchInsertEnd( nodeCheckAccountNumber.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '4', 'echoed' ));
	BatchInsertEnd( nodeCheckAccountNumber.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'checkaccountnumber', 'correct' ));
	BatchInsertEnd( nodeCheckAccountNumber.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'checkaccountnumber', 'incorrect' ));
	BatchInsertEnd( nodeCheckAccountNumber.ScriptNodePostconditions, createDialogueAction1Arguments( 'check_parameter', '4' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeCheckAccountNumber );

	// Node - IncorrectAccountNumber
	nodeIncorrectAccountNumber <- createScriptNode( 'incorrectaccountnumber', 'execute' );
	nodeIncorrectAccountNumber.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'incorrect', 'parameter' );
	BatchInsertEnd( nodeIncorrectAccountNumber.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '4', 'echoed' ));
	BatchInsertEnd( nodeIncorrectAccountNumber.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'checkaccountnumber', 'incorrect' ));
	BatchInsertEnd( nodeIncorrectAccountNumber.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', '4' ));
	BatchInsertEnd( nodeIncorrectAccountNumber.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '4', 'empty' ));
	BatchInsertEnd( nodeIncorrectAccountNumber.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'checkaccountnumber', 'notfinalized' ));
	BatchInsertEnd( nodeIncorrectAccountNumber.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'askaccountnumber', 'notfinalized' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeIncorrectAccountNumber );

	// Node - CorrectAccountNumber
	nodeCorrectAccountNumber <- createScriptNode( 'correctaccountnumber', 'execute' );
	nodeCorrectAccountNumber.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'correct', 'parameter' );
	BatchInsertEnd( nodeCorrectAccountNumber.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '4', 'echoed' ));
	BatchInsertEnd( nodeCorrectAccountNumber.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'checkaccountnumber', 'correct' ));
	BatchInsertEnd( nodeCorrectAccountNumber.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', '4' ));
	BatchInsertEnd( nodeCorrectAccountNumber.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '4', 'grounded' ));
	BatchInsertEnd( nodeCorrectAccountNumber.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'checkaccountnumber', 'notfinalized' ));
	BatchInsertEnd( nodeCorrectAccountNumber.ScriptNodePostconditions, createDialogueAction3Arguments( 'propose_info_item1', '5', 'get_balance', '4' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeCorrectAccountNumber );

	// Node - infomoneyamount
	nodeInfoMoneyAmount <- createScriptNode( 'infomoneyamount', 'execute' );
	nodeInfoMoneyAmount.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'explicit', 'parameter' );
	BatchInsertEnd( nodeInfoMoneyAmount.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '5', 'proposed' ));
	BatchInsertEnd( nodeInfoMoneyAmount.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', '5' ));
	BatchInsertEnd( nodeInfoMoneyAmount.ScriptNodePostconditions, createDialogueAction0Arguments( 'pull_script' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeInfoMoneyAmount );

	// End Nodes	

	return dialogueScript;
}

DialogueScript createDialogueScriptLocateAtm()
{
	// Script Descriptor
	DialogueScript dialogueScript;
	dialogueScript.ScriptDescriptor <- 'LocateAtm';

	// Trigger
	dialogueScript.ScriptTrigger.CoreDialogueAct.Dimension <- 'statement';
	dialogueScript.ScriptTrigger.CoreDialogueAct.Function <- 'request';
	dialogueScript.ScriptTrigger.ActionDomain <- 'locate';
	dialogueScript.ScriptTrigger.Scope <- 'atm';
	BatchInsertEnd( dialogueScript.ScriptTrigger.ParameterTypes , 'countryplace' );
	
	// Info
	ScriptInfoItem scriptInfoItem, emptyScriptInfoItem;

	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'core';	
	scriptInfoItem.InfoItemState <- 'empty';	
	scriptInfoItem.InfoItemValue.CoreDialogueAct.Dimension <- 'statement';
	scriptInfoItem.InfoItemValue.CoreDialogueAct.Function <- 'request';
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );
	
	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'action';	
	scriptInfoItem.InfoItemState <- 'empty';	
	scriptInfoItem.InfoItemValue.ActionDomain <- 'locate';
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'scope';	
	scriptInfoItem.InfoItemState <- 'empty';	
	scriptInfoItem.InfoItemValue.Scope <- 'atm';
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'parameter';	
	scriptInfoItem.InfoItemParameterType <- 'countryplace';	
	scriptInfoItem.InfoItemState <- 'empty';	
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	// Nodes 
	ScriptNode nodeExplicit1;
	ScriptNode nodeExplicit2;
	ScriptNode nodeExplicit3;
	ScriptNode nodeImplicit1;
	ScriptNode nodeCountryPlaceAsk;
	ScriptNode nodeCountryPlaceImplicit;
	ScriptNode nodeCheckCountryplace;
	ScriptNode nodeIncorrectCountryPlace;
	ScriptNode nodeRejectCountryPlace;
	ScriptNode nodeCorrectCountryPlace;

	// Node - Explicit1
	nodeExplicit1 <- createScriptNode( 'explicit1', 'wait' );
	nodeExplicit1.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'explicit', 'triggerlocateatm' );
	BatchInsertEnd( nodeExplicit1.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'explicit1', 'finalized' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '3', 'empty' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'explicit1', 'finalized' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '1', 'proposed' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '2', 'proposed' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '3', 'proposed' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePostconditions, createDialogueAction1Arguments( 'set_expectative_dimension', 'basicanswer' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeExplicit1 );

	// Node - Explicit2
	nodeExplicit2 <- createScriptNode( 'explicit2', 'execute' );
	BatchInsertEnd( nodeExplicit2.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'explicit1', 'finalized' ));
	BatchInsertEnd( nodeExplicit2.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'explicit2', 'finalized' ));
	BatchInsertEnd( nodeExplicit2.ScriptNodePreconditions, createPrecondition1Arguments( 'is_expectative_function', 'agreement' ));
	BatchInsertEnd( nodeExplicit2.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'explicit2', 'finalized' ));
	BatchInsertEnd( nodeExplicit2.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '1', 'grounded' ));
	BatchInsertEnd( nodeExplicit2.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '2', 'grounded' ));
	BatchInsertEnd( nodeExplicit2.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '3', 'grounded' ));
	BatchInsertEnd( nodeExplicit2.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'implicit1', 'finalized' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeExplicit2 );

	// Node - Explicit3
	nodeExplicit3 <- createScriptNode( 'explicit3', 'execute' );
	BatchInsertEnd( nodeExplicit3.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'explicit1', 'finalized' ));
	BatchInsertEnd( nodeExplicit3.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'explicit2', 'finalized' ));
	BatchInsertEnd( nodeExplicit3.ScriptNodePreconditions, createNegatedPrecondition1Arguments( 'is_expectative_function', 'agreement' ));
	BatchInsertEnd( nodeExplicit3.ScriptNodePostconditions, createDialogueAction0Arguments( 'pull_script' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeExplicit3 );

	// Node - Implicit1
	nodeImplicit1 <- createScriptNode( 'implicit1', 'execute' );
	nodeImplicit1.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'implicit', 'triggerlocateatm' );
	BatchInsertEnd( nodeImplicit1.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'implicit1', 'finalized' ));
	BatchInsertEnd( nodeImplicit1.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '3', 'captured' ));
	BatchInsertEnd( nodeImplicit1.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'implicit1', 'finalized' ));
	BatchInsertEnd( nodeImplicit1.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeImplicit1.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '1', 'echoed' ));
	BatchInsertEnd( nodeImplicit1.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '2', 'echoed' ));
	BatchInsertEnd( nodeImplicit1.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '3', 'echoed' ));
	BatchInsertEnd( nodeImplicit1.ScriptNodePostconditions, createDialogueAction1Arguments( 'set_expectative_dimension', 'basicanswer' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeImplicit1 );

	// Node - CountryPlaceAsk
	nodeCountryPlaceAsk <- createScriptNode( 'askcountryplace', 'wait' );
	nodeCountryPlaceAsk.ScriptNodeContent <- setNodeContent( 'question', 'whquestion', 'what', 'countryplacetown' );
	BatchInsertEnd( nodeCountryPlaceAsk.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'implicit1', 'finalized' ));
	BatchInsertEnd( nodeCountryPlaceAsk.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '4', 'empty' ));
	BatchInsertEnd( nodeCountryPlaceAsk.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeCountryPlaceAsk.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'askcountryplace', 'finalized' ));
	BatchInsertEnd( nodeCountryPlaceAsk.ScriptNodePostconditions, createDialogueAction1Arguments( 'set_expectative_parameter', 'countryplace' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeCountryPlaceAsk );

	// Node - RejectCountryPlace
	nodeRejectCountryPlace <- createScriptNode( 'rejectcountryplace', 'execute' );
	BatchInsertEnd( nodeRejectCountryPlace.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'askcountryplace', 'finalized' ));
	BatchInsertEnd( nodeRejectCountryPlace.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'implicit1', 'finalized' ));
	BatchInsertEnd( nodeRejectCountryPlace.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '4', 'empty' ));
	BatchInsertEnd( nodeRejectCountryPlace.ScriptNodePreconditions, createNegatedPrecondition1Arguments( 'is_expectative_function', 'agreement' ));
	BatchInsertEnd( nodeRejectCountryPlace.ScriptNodePostconditions, createDialogueAction0Arguments( 'pull_script' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeRejectCountryPlace );

	// Node - ImplicitCountryPlace
	nodeCountryPlaceImplicit <- createScriptNode( 'countryplaceimplicit', 'execute' );
	nodeCountryPlaceImplicit.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'implicit', 'parameter' );
	BatchInsertEnd( nodeCountryPlaceImplicit.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'implicit1', 'finalized' ));
	BatchInsertEnd( nodeCountryPlaceImplicit.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '4', 'captured' ));
	BatchInsertEnd( nodeCountryPlaceImplicit.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', '4' ));
	BatchInsertEnd( nodeCountryPlaceImplicit.ScriptNodePostconditions, createDialogueAction1Arguments( 'set_expectative_dimension', 'basicanswer' ));
	BatchInsertEnd( nodeCountryPlaceImplicit.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '4', 'echoed' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeCountryPlaceImplicit );

	// Node - CheckCountryPlace
	nodeCheckCountryplace <- createScriptNode( 'countryplacecheck', 'execute' );
	BatchInsertEnd( nodeCheckCountryplace.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '4', 'echoed' ));
	BatchInsertEnd( nodeCheckCountryplace.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'countryplacecheck', 'correct' ));
	BatchInsertEnd( nodeCheckCountryplace.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'countryplacecheck', 'incorrect' ));
	BatchInsertEnd( nodeCheckCountryplace.ScriptNodePostconditions, createDialogueAction1Arguments( 'check_parameter', '4' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeCheckCountryplace );

	// Node - IncorrectCountryPlace
	nodeIncorrectCountryPlace <- createScriptNode( 'countryplaceincorrect', 'execute' );
	nodeIncorrectCountryPlace.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'incorrect', 'parameter' );
	BatchInsertEnd( nodeIncorrectCountryPlace.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '4', 'echoed' ));
	BatchInsertEnd( nodeIncorrectCountryPlace.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'countryplacecheck', 'incorrect' ));
	BatchInsertEnd( nodeIncorrectCountryPlace.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', '4' ));
	BatchInsertEnd( nodeIncorrectCountryPlace.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '4', 'empty' ));
	BatchInsertEnd( nodeIncorrectCountryPlace.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'countryplacecheck', 'finalized' ));
	BatchInsertEnd( nodeIncorrectCountryPlace.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'askcountryplace', 'notfinalized' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeIncorrectCountryPlace );

	// Node - CorrectCountryPlace
	nodeCorrectCountryPlace <- createScriptNode( 'countryplacecorrect', 'execute' );
	nodeCorrectCountryPlace.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'locate', 'atm' );
	BatchInsertEnd( nodeCorrectCountryPlace.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '4', 'echoed' ));
	BatchInsertEnd( nodeCorrectCountryPlace.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'countryplacecheck', 'correct' ));
	BatchInsertEnd( nodeCorrectCountryPlace.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '4', 'checked' ));
	BatchInsertEnd( nodeCorrectCountryPlace.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'countryplacecheck', 'finalized' ));
	BatchInsertEnd( nodeCorrectCountryPlace.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeCorrectCountryPlace.ScriptNodePostconditions, createDialogueAction0Arguments( 'pull_script' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeCorrectCountryPlace );
	
	// End Nodes	

	return dialogueScript;
}

DialogueScript createDialogueScriptMakeTransfer()
{
	// Script Descriptor
	DialogueScript dialogueScript;
	dialogueScript.ScriptDescriptor <- 'MakeTransfer';

	// Trigger
	dialogueScript.ScriptTrigger.CoreDialogueAct.Dimension <- 'statement';
	dialogueScript.ScriptTrigger.CoreDialogueAct.Function <- 'request';
	dialogueScript.ScriptTrigger.ActionDomain <- 'execute';
	dialogueScript.ScriptTrigger.Scope <- 'transfer';
	BatchInsertEnd( dialogueScript.ScriptTrigger.ParameterTypes , 'accountnumber' );
	BatchInsertEnd( dialogueScript.ScriptTrigger.ParameterTypes , 'moneyamount' );
	
	// Info
	ScriptInfoItem scriptInfoItem, emptyScriptInfoItem;

	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'core';	
	scriptInfoItem.InfoItemState <- 'empty';	
	scriptInfoItem.InfoItemValue.CoreDialogueAct.Dimension <- 'statement';
	scriptInfoItem.InfoItemValue.CoreDialogueAct.Function <- 'request';
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );
	
	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'action';	
	scriptInfoItem.InfoItemState <- 'empty';	
	scriptInfoItem.InfoItemValue.ActionDomain <- 'execute';
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'scope';	
	scriptInfoItem.InfoItemState <- 'empty';	
	scriptInfoItem.InfoItemValue.Scope <- 'transfer';
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'parameter';	
	scriptInfoItem.InfoItemParameterType <- 'accountnumber';	
	scriptInfoItem.InfoItemState <- 'empty';	
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'parameter';	
	scriptInfoItem.InfoItemParameterType <- 'moneyamount';	
	scriptInfoItem.InfoItemState <- 'empty';	
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	// Nodes 
	ScriptNode nodeExplicit1;
	ScriptNode nodeExplicit2;
	ScriptNode nodeExplicit3;
	ScriptNode nodeImplicit1;
	ScriptNode nodeAccountNumber;
	ScriptNode nodeAccountNumberImplicit;
	ScriptNode nodeCheckAccountNumber;
	ScriptNode nodeIncorrectAccountNumber;
	ScriptNode nodeCorrectAccountNumber;
	ScriptNode nodeRejectAccountNumberAsk;
	ScriptNode nodeMoneyAmountAsk;
	ScriptNode nodeMoneyAmountImplicit;
	ScriptNode nodeCorrectEverything;
	ScriptNode nodeConfirmEverything;
	ScriptNode nodeCancelEverything;
	ScriptNode nodeEndFine;
	ScriptNode nodeEndBad;

	// Node - Explicit1
	nodeExplicit1 <- createScriptNode( 'explicit1', 'wait' );
	nodeExplicit1.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'explicit', 'triggerexecutetransfer' );
	BatchInsertEnd( nodeExplicit1.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'explicit1', 'finalized' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '3', 'empty' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'explicit1', 'finalized' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '1', 'proposed' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '2', 'proposed' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '3', 'proposed' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePostconditions, createDialogueAction1Arguments( 'set_expectative_dimension', 'basicanswer' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeExplicit1 );
	
	// Node - Explicit2
	nodeExplicit2 <- createScriptNode( 'explicit2', 'execute' );
	BatchInsertEnd( nodeExplicit2.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'explicit1', 'finalized' ));
	BatchInsertEnd( nodeExplicit2.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'explicit2', 'finalized' ));
	BatchInsertEnd( nodeExplicit2.ScriptNodePreconditions, createPrecondition1Arguments( 'is_expectative_function', 'agreement' ));
	BatchInsertEnd( nodeExplicit2.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'explicit2', 'finalized' ));
	BatchInsertEnd( nodeExplicit2.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '1', 'grounded' ));
	BatchInsertEnd( nodeExplicit2.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '2', 'grounded' ));
	BatchInsertEnd( nodeExplicit2.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '3', 'grounded' ));
	BatchInsertEnd( nodeExplicit2.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'implicit1', 'finalized' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeExplicit2 );

	// Node - Explicit3
	nodeExplicit3 <- createScriptNode( 'explicit3', 'execute' );
	BatchInsertEnd( nodeExplicit3.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'explicit1', 'finalized' ));
	BatchInsertEnd( nodeExplicit3.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'explicit2', 'finalized' ));
	BatchInsertEnd( nodeExplicit3.ScriptNodePreconditions, createNegatedPrecondition1Arguments( 'is_expectative_function', 'agreement' ));
	BatchInsertEnd( nodeExplicit3.ScriptNodePostconditions, createDialogueAction0Arguments( 'pull_script' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeExplicit3 );
	
	// Node - Implicit1
	nodeImplicit1 <- createScriptNode( 'implicit1', 'execute' );
	nodeImplicit1.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'implicit', 'triggerexecutetransfer' );
	BatchInsertEnd( nodeImplicit1.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'implicit1', 'finalized' ));
	BatchInsertEnd( nodeImplicit1.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '3', 'captured' ));
	BatchInsertEnd( nodeImplicit1.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'implicit1', 'finalized' ));
	BatchInsertEnd( nodeImplicit1.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeImplicit1.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '1', 'echoed' ));
	BatchInsertEnd( nodeImplicit1.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '2', 'echoed' ));
	BatchInsertEnd( nodeImplicit1.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '3', 'echoed' ));
	BatchInsertEnd( nodeImplicit1.ScriptNodePostconditions, createDialogueAction1Arguments( 'set_expectative_dimension', 'basicanswer' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeImplicit1 );

	// Node - AccountNumberAsk
	nodeAccountNumber <- createScriptNode( 'askaccountnumber', 'wait' );
	nodeAccountNumber.ScriptNodeContent <- setNodeContent( 'question', 'whquestion', 'what', 'accountnumbertarget' );
	BatchInsertEnd( nodeAccountNumber.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'implicit1', 'finalized' ));
	BatchInsertEnd( nodeAccountNumber.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '4', 'empty' ));
	BatchInsertEnd( nodeAccountNumber.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeAccountNumber.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'askaccountnumber', 'finalized' ));
	BatchInsertEnd( nodeAccountNumber.ScriptNodePostconditions, createDialogueAction1Arguments( 'set_expectative_parameter', 'accountnumber' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeAccountNumber );

	// Node - MoneyAmountAsk
	nodeMoneyAmountAsk <- createScriptNode( 'askmoneyamount', 'wait' );
	nodeMoneyAmountAsk.ScriptNodeContent <- setNodeContent( 'question', 'whquestion', 'howmuch', 'moneyamount' );
	BatchInsertEnd( nodeMoneyAmountAsk.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'implicit1', 'finalized' ));
	BatchInsertEnd( nodeMoneyAmountAsk.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '5', 'empty' ));
	BatchInsertEnd( nodeMoneyAmountAsk.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeMoneyAmountAsk.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'askmoneyamount', 'finalized' ));
	BatchInsertEnd( nodeMoneyAmountAsk.ScriptNodePostconditions, createDialogueAction1Arguments( 'set_expectative_parameter', 'moneyamount' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeMoneyAmountAsk );

	// Node - RejectAccountNumber
	nodeRejectAccountNumberAsk <- createScriptNode( 'rejectaccountnumber', 'execute' );
	BatchInsertEnd( nodeRejectAccountNumberAsk.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'askaccountnumber', 'finalized' ));
	BatchInsertEnd( nodeRejectAccountNumberAsk.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'implicit1', 'finalized' ));
	BatchInsertEnd( nodeRejectAccountNumberAsk.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '4', 'empty' ));
	BatchInsertEnd( nodeRejectAccountNumberAsk.ScriptNodePreconditions, createNegatedPrecondition1Arguments( 'is_expectative_function', 'agreement' ));
	BatchInsertEnd( nodeRejectAccountNumberAsk.ScriptNodePostconditions, createDialogueAction0Arguments( 'pull_script' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeRejectAccountNumberAsk );

	// Node - ImplicitAccountNumber
	nodeAccountNumberImplicit <- createScriptNode( 'accountnumberimplicit', 'execute' );
	nodeAccountNumberImplicit.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'implicit', 'parameter' );
	BatchInsertEnd( nodeAccountNumberImplicit.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'implicit1', 'finalized' ));
	BatchInsertEnd( nodeAccountNumberImplicit.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '4', 'captured' ));
	BatchInsertEnd( nodeAccountNumberImplicit.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', '4' ));
	BatchInsertEnd( nodeAccountNumberImplicit.ScriptNodePostconditions, createDialogueAction1Arguments( 'set_expectative_dimension', 'basicanswer' ));
	BatchInsertEnd( nodeAccountNumberImplicit.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '4', 'echoed' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeAccountNumberImplicit );

	// Node - CheckAccountNumber
	nodeCheckAccountNumber <- createScriptNode( 'accountnumbercheck', 'execute' );
	BatchInsertEnd( nodeCheckAccountNumber.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '4', 'echoed' ));
	BatchInsertEnd( nodeCheckAccountNumber.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'accountnumbercheck', 'correct' ));
	BatchInsertEnd( nodeCheckAccountNumber.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'accountnumbercheck', 'incorrect' ));
	BatchInsertEnd( nodeCheckAccountNumber.ScriptNodePostconditions, createDialogueAction1Arguments( 'check_parameter', '4' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeCheckAccountNumber );

	// Node - IncorrectAccountNumber
	nodeIncorrectAccountNumber <- createScriptNode( 'accountnumberincorrect', 'execute' );
	nodeIncorrectAccountNumber.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'incorrect', 'parameter' );
	BatchInsertEnd( nodeIncorrectAccountNumber.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '4', 'echoed' ));
	BatchInsertEnd( nodeIncorrectAccountNumber.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'accountnumbercheck', 'incorrect' ));
	BatchInsertEnd( nodeIncorrectAccountNumber.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', '4' ));
	BatchInsertEnd( nodeIncorrectAccountNumber.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '4', 'empty' ));
	BatchInsertEnd( nodeIncorrectAccountNumber.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'accountnumbercheck', 'finalized' ));
	BatchInsertEnd( nodeIncorrectAccountNumber.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'askaccountnumber', 'notfinalized' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeIncorrectAccountNumber );

	// Node - CorrectAccountNumber
	nodeCorrectAccountNumber <- createScriptNode( 'accountnumbercorrect', 'execute' );
	BatchInsertEnd( nodeCorrectAccountNumber.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '4', 'echoed' ));
	BatchInsertEnd( nodeCorrectAccountNumber.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'accountnumbercheck', 'correct' ));
	BatchInsertEnd( nodeCorrectAccountNumber.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '4', 'checked' ));
	BatchInsertEnd( nodeCorrectAccountNumber.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'accountnumbercheck', 'finalized' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeCorrectAccountNumber );
	
	// Node - ImplicitMoneyAmount
	nodeMoneyAmountImplicit <- createScriptNode( 'moneyamountimplicit', 'execute' );
	nodeMoneyAmountImplicit.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'implicit', 'parameter' );
	BatchInsertEnd( nodeMoneyAmountImplicit.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'implicit1', 'finalized' ));
	BatchInsertEnd( nodeMoneyAmountImplicit.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '5', 'captured' ));
	BatchInsertEnd( nodeMoneyAmountImplicit.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', '5' ));
	BatchInsertEnd( nodeMoneyAmountImplicit.ScriptNodePostconditions, createDialogueAction1Arguments( 'set_expectative_dimension', 'basicanswer' ));
	BatchInsertEnd( nodeMoneyAmountImplicit.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '5', 'echoed' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeMoneyAmountImplicit );

	// Node - CorrectEverything
	nodeCorrectEverything <- createScriptNode( 'everythingcorrect', 'wait' );
	nodeCorrectEverything.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'explicit', 'parameter' );
	BatchInsertEnd( nodeCorrectEverything.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '5', 'echoed' ));
	BatchInsertEnd( nodeCorrectEverything.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '4', 'checked' ));
	BatchInsertEnd( nodeCorrectEverything.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'everythingcorrect', 'finalized' ));
	BatchInsertEnd( nodeCorrectEverything.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'everythingcorrect', 'finalized' ));
	BatchInsertEnd( nodeCorrectEverything.ScriptNodePostconditions, createDialogueAction2Arguments( 'generate_2_parameter', '4', '5' ));
	BatchInsertEnd( nodeCorrectEverything.ScriptNodePostconditions, createDialogueAction1Arguments( 'set_expectative_dimension', 'basicanswer' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeCorrectEverything );

	// Node - CancelEverything	
	nodeCancelEverything <- createScriptNode( 'canceleverything', 'execute' );
	nodeCancelEverything.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'say', 'everythingcancel' );
	BatchInsertEnd( nodeCancelEverything.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'everythingcorrect', 'finalized' ));
	BatchInsertEnd( nodeCancelEverything.ScriptNodePreconditions, createNegatedPrecondition1Arguments( 'is_expectative_function', 'agreement' ));
	BatchInsertEnd( nodeCancelEverything.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeCancelEverything.ScriptNodePostconditions, createDialogueAction0Arguments( 'pull_script' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeCancelEverything );

	// Node - ConfirmEverything
	nodeConfirmEverything <- createScriptNode( 'confirmeverything', 'execute' );
	BatchInsertEnd( nodeConfirmEverything.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'everythingcorrect', 'finalized' ));
	BatchInsertEnd( nodeConfirmEverything.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'confirmeverything', 'correct' ));
	BatchInsertEnd( nodeConfirmEverything.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'confirmeverything', 'incorrect' ));
	BatchInsertEnd( nodeConfirmEverything.ScriptNodePreconditions, createPrecondition1Arguments( 'is_expectative_function', 'agreement' ));
	BatchInsertEnd( nodeConfirmEverything.ScriptNodePostconditions, createDialogueAction3Arguments( 'execute_boolean_backoffice_2', 'execute_transfer', '4', '5' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeConfirmEverything );

	// Node - Ending fine
	nodeEndFine <- createScriptNode( 'endingfine', 'execute' );
	nodeEndFine.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'say', 'everythingok' );
	BatchInsertEnd( nodeEndFine.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'confirmeverything', 'correct' ));
	BatchInsertEnd( nodeEndFine.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeEndFine.ScriptNodePostconditions, createDialogueAction0Arguments( 'pull_script' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeEndFine );

	// Node - Ending bad
	nodeEndBad <- createScriptNode( 'endingbad', 'execute' );
	nodeEndBad.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'say', 'somethingfailed' );
	BatchInsertEnd( nodeEndBad.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'confirmeverything', 'incorrect' ));
	BatchInsertEnd( nodeEndBad.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeEndBad.ScriptNodePostconditions, createDialogueAction0Arguments( 'pull_script' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeEndBad );

	// End Nodes	

	return dialogueScript;
}

DialogueScript createDialogueScriptMedicalAppointment()
{
	// Script Descriptor
	DialogueScript dialogueScript;
	dialogueScript.ScriptDescriptor <- 'BookAppointment';

	// Trigger
	dialogueScript.ScriptTrigger.CoreDialogueAct.Dimension <- 'statement';
	dialogueScript.ScriptTrigger.CoreDialogueAct.Function <- 'request';
	dialogueScript.ScriptTrigger.ActionDomain <- 'book';
	dialogueScript.ScriptTrigger.Scope <- 'appointment';
	BatchInsertEnd( dialogueScript.ScriptTrigger.ParameterTypes , 'medicalspeciality' );
	BatchInsertEnd( dialogueScript.ScriptTrigger.ParameterTypes , 'countryplace' );
	BatchInsertEnd( dialogueScript.ScriptTrigger.ParameterTypes , 'datetime' );
	BatchInsertEnd( dialogueScript.ScriptTrigger.ParameterTypes , 'phonenumber' );
	BatchInsertEnd( dialogueScript.ScriptTrigger.ParameterTypes , 'peselnumber' );
	
	// Info
	ScriptInfoItem scriptInfoItem, emptyScriptInfoItem;

	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'core';	
	scriptInfoItem.InfoItemState <- 'empty';	
	scriptInfoItem.InfoItemValue.CoreDialogueAct.Dimension <- 'statement';
	scriptInfoItem.InfoItemValue.CoreDialogueAct.Function <- 'request';
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );
	
	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'action';	
	scriptInfoItem.InfoItemState <- 'empty';	
	scriptInfoItem.InfoItemValue.ActionDomain <- 'book';
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'scope';	
	scriptInfoItem.InfoItemState <- 'empty';	
	scriptInfoItem.InfoItemValue.Scope <- 'appointment';
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'parameter';	
	scriptInfoItem.InfoItemParameterType <- 'medicalspeciality';	
	scriptInfoItem.InfoItemState <- 'empty';	
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'parameter';	
	scriptInfoItem.InfoItemParameterType <- 'countryplace';	
	scriptInfoItem.InfoItemState <- 'empty';	
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'parameter';	
	scriptInfoItem.InfoItemParameterType <- 'datetime';	
	scriptInfoItem.InfoItemState <- 'empty';	
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'parameter';	
	scriptInfoItem.InfoItemParameterType <- 'phonenumber';	
	scriptInfoItem.InfoItemState <- 'empty';	
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'parameter';	
	scriptInfoItem.InfoItemParameterType <- 'peselnumber';	
	scriptInfoItem.InfoItemState <- 'empty';	
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	// Nodes 
	ScriptNode nodeExplicitTriggerConfirmation;
	ScriptNode nodeTriggerConfirmationAgreement;
	ScriptNode nodeTriggerConfirmationDisagreement;
	ScriptNode nodeImplicitTriggerConfirmation;
	ScriptNode nodeImplicitTriggerConfirmationDisagree;
	ScriptNode nodeImplicitMedicalSpeciality;
	ScriptNode nodeAskMedicalSpeciality;
	ScriptNode nodeImplicitCountryPlace;
	ScriptNode nodeAskCountryPlace;
	ScriptNode nodeImplicitDefaultDateTime;

	// Node - ExplicitTriggerConfirmation
	nodeExplicitTriggerConfirmation <- createScriptNode( 'explicittriggerconfirmation', 'wait' );
	nodeExplicitTriggerConfirmation.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'explicit', 'triggerbookappointment' );
	BatchInsertEnd( nodeExplicitTriggerConfirmation.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'explicittriggerconfirmation', 'finalized' ));
	BatchInsertEnd( nodeExplicitTriggerConfirmation.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '3', 'empty' ));
	BatchInsertEnd( nodeExplicitTriggerConfirmation.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'explicittriggerconfirmation', 'finalized' ));
	BatchInsertEnd( nodeExplicitTriggerConfirmation.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeExplicitTriggerConfirmation.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '1', 'proposed' ));
	BatchInsertEnd( nodeExplicitTriggerConfirmation.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '2', 'proposed' ));
	BatchInsertEnd( nodeExplicitTriggerConfirmation.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '3', 'proposed' ));
	BatchInsertEnd( nodeExplicitTriggerConfirmation.ScriptNodePostconditions, createDialogueAction1Arguments( 'set_expectative_dimension', 'basicanswer' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeExplicitTriggerConfirmation );
	
	// Node - TriggerConfirmationAgreement
	nodeTriggerConfirmationAgreement <- createScriptNode( 'triggerconfirmationagreement', 'execute' );
	BatchInsertEnd( nodeTriggerConfirmationAgreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '1', 'proposed' ));
	BatchInsertEnd( nodeTriggerConfirmationAgreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '2', 'proposed' ));
	BatchInsertEnd( nodeTriggerConfirmationAgreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '3', 'proposed' ));
	BatchInsertEnd( nodeTriggerConfirmationAgreement.ScriptNodePreconditions, createPrecondition1Arguments( 'is_expectative_function', 'agreement' ));
	BatchInsertEnd( nodeTriggerConfirmationAgreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '1', 'grounded' ));
	BatchInsertEnd( nodeTriggerConfirmationAgreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '2', 'grounded' ));
	BatchInsertEnd( nodeTriggerConfirmationAgreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '3', 'grounded' ));
	BatchInsertEnd( nodeTriggerConfirmationAgreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'implicittriggerconfirmation', 'finalized' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeTriggerConfirmationAgreement);

	// Node - TriggerConfirmationDisagreement
	nodeTriggerConfirmationDisagreement <- createScriptNode( 'triggerconfirmationdisagreement', 'execute' );
	BatchInsertEnd( nodeTriggerConfirmationDisagreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '1', 'proposed' ));	
	BatchInsertEnd( nodeTriggerConfirmationDisagreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '2', 'proposed' ));
	BatchInsertEnd( nodeTriggerConfirmationDisagreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '3', 'proposed' ));
	BatchInsertEnd( nodeTriggerConfirmationDisagreement.ScriptNodePreconditions, createNegatedPrecondition1Arguments( 'is_expectative_function', 'agreement' ));
	BatchInsertEnd( nodeTriggerConfirmationDisagreement.ScriptNodePostconditions, createDialogueAction0Arguments( 'pull_script' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeTriggerConfirmationDisagreement );

	// Node - ImplicitTriggerConfirmation
	nodeImplicitTriggerConfirmation <- createScriptNode( 'implicittriggerconfirmation', 'execute' );
	nodeImplicitTriggerConfirmation.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'implicit', 'triggerbookappointment' );
	BatchInsertEnd( nodeImplicitTriggerConfirmation.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '3', 'captured' ));
	BatchInsertEnd( nodeImplicitTriggerConfirmation.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '3', 'echoed' ));
	BatchInsertEnd( nodeImplicitTriggerConfirmation.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'implicittriggerconfirmation', 'finalized' ));
	BatchInsertEnd( nodeImplicitTriggerConfirmation.ScriptNodePostconditions, createDialogueAction1Arguments( 'set_expectative_dimension', 'basicanswer' ));
	BatchInsertEnd( nodeImplicitTriggerConfirmation.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeImplicitTriggerConfirmation );
	
	// Node - ImplicitTriggerConfirmationDisagree
	nodeImplicitTriggerConfirmationDisagree <- createScriptNode( 'implicittriggerconfirmationdisagree', 'execute' );
	BatchInsertEnd( nodeImplicitTriggerConfirmationDisagree.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '3', 'echoed' ));	
	BatchInsertEnd( nodeImplicitTriggerConfirmationDisagree.ScriptNodePreconditions, createPrecondition1Arguments( 'is_expectative_function', 'disagreement' ));	
	BatchInsertEnd( nodeImplicitTriggerConfirmationDisagree.ScriptNodePostconditions, createDialogueAction0Arguments( 'pull_script' ));
	
	BatchInsertEnd( dialogueScript.ScriptNodes, nodeImplicitTriggerConfirmationDisagree );

	// Node - ImplicitMedicalSpeciality
	nodeImplicitMedicalSpeciality <- createScriptNode( 'implicitmedicalspeciality', 'execute' );
	nodeImplicitMedicalSpeciality.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'implicit', 'parameter' );
	BatchInsertEnd( nodeImplicitMedicalSpeciality.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '4', 'captured' ));
	BatchInsertEnd( nodeImplicitMedicalSpeciality.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'implicittriggerconfirmation', 'finalized' ));
	BatchInsertEnd( nodeImplicitMedicalSpeciality.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '4', 'echoed' ));
	BatchInsertEnd( nodeImplicitMedicalSpeciality.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', '4' ));
	
	BatchInsertEnd( dialogueScript.ScriptNodes, nodeImplicitMedicalSpeciality );

	// Node - ImplicitCountryPlace
	nodeImplicitCountryPlace <- createScriptNode( 'implicitcountryplace', 'execute' );
	nodeImplicitCountryPlace.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'implicit', 'parameter' );
	BatchInsertEnd( nodeImplicitCountryPlace.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '5', 'captured' ));
	BatchInsertEnd( nodeImplicitCountryPlace.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'implicittriggerconfirmation', 'finalized' ));
	BatchInsertEnd( nodeImplicitCountryPlace.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '5', 'echoed' ));
	BatchInsertEnd( nodeImplicitCountryPlace.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', '5' ));
	
	BatchInsertEnd( dialogueScript.ScriptNodes, nodeImplicitCountryPlace );

	// Node - AskMedicalSpeciality
	nodeAskMedicalSpeciality <- createScriptNode( 'askmedicalspeciality', 'wait' );
	nodeAskMedicalSpeciality.ScriptNodeContent <- setNodeContent( 'question', 'whquestion', 'what', 'medicalspeciality' );
	BatchInsertEnd( nodeAskMedicalSpeciality.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '4', 'empty' ));
	BatchInsertEnd( nodeAskMedicalSpeciality.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'implicittriggerconfirmation', 'finalized' ));
	BatchInsertEnd( nodeAskMedicalSpeciality.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	
	BatchInsertEnd( dialogueScript.ScriptNodes, nodeAskMedicalSpeciality );

	// Node - AskCountryPlace
	nodeAskCountryPlace <- createScriptNode( 'askcountryplace', 'wait' );
	nodeAskCountryPlace.ScriptNodeContent <- setNodeContent( 'question', 'whquestion', 'where', 'countryplace' );
	BatchInsertEnd( nodeAskCountryPlace.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '5', 'empty' ));
	BatchInsertEnd( nodeAskCountryPlace.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'implicittriggerconfirmation', 'finalized' ));
	BatchInsertEnd( nodeAskCountryPlace.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	
	BatchInsertEnd( dialogueScript.ScriptNodes, nodeAskCountryPlace );
	
	// Node - ImplicitDefaultDateTime
	nodeImplicitDefaultDateTime <- createScriptNode( 'setdefaultdatetime', 'execute' );
	nodeImplicitDefaultDateTime.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'implicit', 'parameter' );
	BatchInsertEnd( nodeImplicitDefaultDateTime.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_info_state', '4', 'empty' ));
	BatchInsertEnd( nodeImplicitDefaultDateTime.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_info_state', '5', 'empty' ));
	BatchInsertEnd( nodeImplicitDefaultDateTime.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '6', 'captured' ));
	BatchInsertEnd( nodeImplicitCountryPlace.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', '6' ));
	BatchInsertEnd( nodeImplicitDefaultDateTime.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '6', 'echoed' ));
	
	BatchInsertEnd( dialogueScript.ScriptNodes, nodeImplicitDefaultDateTime );

	// End Nodes	

	return dialogueScript;
	
}

