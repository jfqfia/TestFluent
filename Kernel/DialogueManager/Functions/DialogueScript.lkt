// **************************************************
//
//	
//
// **************************************************
//
//	PROJECT	:	
//	MODULE  :	
//	PACKAGE :	
//	FILE	:	
//
// **************************************************

DialogueScript	createDialogueScriptManager()
{
	DialogueScript dialogueScript;
	DialogueAction dialogueAction, emptyDialogueAction;
	DialogueActionArgument dialogueActionArgument;

	ScriptNode nodeWelcome;
	ScriptNode nodeHmihy;
	ScriptNode nodeBye;
	ScriptNode nodeEnd;

	dialogueScript.ScriptDescriptor <- 'Manager';

	// Node - Welcome
	nodeWelcome <- createScriptNode( 'welcome', 'execute' );
	nodeWelcome.ScriptNodeContent <- setNodeContent( 'social', 'greeting', 'offer', 'welcome' );
	BatchInsertEnd( nodeWelcome.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'welcome', 'finalized'));
	BatchInsertEnd( nodeWelcome.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'welcome', 'finalized' ));
	BatchInsertEnd( nodeWelcome.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeWelcome );

	// Node - Hmihy
	nodeHmihy <- createScriptNode( 'hmihy', 'wait' );
	nodeHmihy.ScriptNodeContent <- setNodeContent( 'social', 'greeting', 'offer', 'hmihy' );
	BatchInsertEnd( nodeHmihy.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'welcome', 'finalized' ));
	BatchInsertEnd( nodeHmihy.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'hmihy', 'finalized' ));
	BatchInsertEnd( nodeHmihy.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'hmihy', 'finalized' ));
	BatchInsertEnd( nodeHmihy.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeHmihy );

	// Node - Bye
	nodeBye <- createScriptNode( 'bye', 'execute' );
	nodeBye.ScriptNodeContent <- setNodeContent( 'social', 'goodbye', '', '' );
	BatchInsertEnd( nodeBye.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'hmihy', 'finalized' ));
	BatchInsertEnd( nodeBye.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'bye', 'finalized' ));
	BatchInsertEnd( nodeBye.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'bye', 'finalized' ));
	BatchInsertEnd( nodeBye.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeBye );

	// Node - End
	nodeEnd <- createScriptNode( 'end', 'execute' );
	BatchInsertEnd( nodeEnd.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'bye', 'finalized' ));
	BatchInsertEnd( nodeEnd.ScriptNodePostconditions, createDialogueAction0Arguments( 'pull_script' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeEnd );
				
	return dialogueScript;
}

DialogueScript createDialogueScriptConsultBalance()
{
	// Script Descriptor
	DialogueScript dialogueScript;
	dialogueScript.ScriptDescriptor <- 'ConsultBalance';

	// Trigger
	dialogueScript.ScriptTrigger.CoreDialogueAct.Dimension <- 'statement';
	dialogueScript.ScriptTrigger.CoreDialogueAct.Function <- 'request';
	dialogueScript.ScriptTrigger.ActionDomain <- 'consult';
	dialogueScript.ScriptTrigger.Scope <- 'bankaccount';
	BatchInsertEnd( dialogueScript.ScriptTrigger.ParameterTypes , 'accountnumber' );
	
	// Info
	ScriptInfoItem scriptInfoItem, emptyScriptInfoItem;

	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'core';	
	scriptInfoItem.InfoItemState <- 'empty';	
	scriptInfoItem.InfoItemValue.CoreDialogueAct.Dimension <- 'statement';
	scriptInfoItem.InfoItemValue.CoreDialogueAct.Function <- 'request';
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );
	
	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'action';	
	scriptInfoItem.InfoItemState <- 'empty';	
	scriptInfoItem.InfoItemValue.ActionDomain <- 'consult';
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'scope';	
	scriptInfoItem.InfoItemState <- 'empty';	
	scriptInfoItem.InfoItemValue.Scope <- 'bankaccount';
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'parameter';	
	scriptInfoItem.InfoItemParameterType <- 'accountnumber';	
	scriptInfoItem.InfoItemState <- 'empty';	
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	// Nodes 
	ScriptNode nodeExplicit1;
	ScriptNode nodeExplicit2;

	// Node - Explicit1
	nodeExplicit1 <- createScriptNode( 'explicit1', 'wait' );
	nodeExplicit1.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'explicit', 'triggerconsultbalance' );
	BatchInsertEnd( nodeExplicit1.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'explicit1', 'finalized' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '2', 'empty' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '3', 'empty' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '4', 'empty' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'explicit1', 'finalized' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '1', 'proposed' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '2', 'proposed' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '3', 'proposed' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePostconditions, createDialogueAction1Arguments( 'set_expectative_dimension', 'basicanswer' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeExplicit1 );

	// Node - Explicit2
	nodeExplicit2 <- createScriptNode( 'explicit2', 'execute' );
	//nodeExplicit2.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'explicit', 'triggerconsultbalance' );
	BatchInsertEnd( nodeExplicit2.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'explicit1', 'finalized' ));
	BatchInsertEnd( nodeExplicit2.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'explicit2', 'finalized' ));
	BatchInsertEnd( nodeExplicit2.ScriptNodePreconditions, createPrecondition1Arguments( 'is_expectative_function', 'agreement' ));

	BatchInsertEnd( nodeExplicit2.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'explicit2', 'finalized' ));
	/*
	BatchInsertEnd( nodeExplicit2.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '2', 'empty' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '3', 'empty' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '4', 'empty' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'explicit1', 'finalized' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '1', 'proposed' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '2', 'proposed' ));
	BatchInsertEnd( nodeExplicit1.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '3', 'proposed' ));
	*/

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeExplicit2 );
	// End Nodes	

	return dialogueScript;
}

DialogueScript	createDialogueScriptMedicalAppointment()
{
	// Script Descriptor
	DialogueScript dialogueScript;

	dialogueScript.ScriptDescriptor <- 'BookAppointment';

	// Trigger
	dialogueScript.ScriptTrigger.CoreDialogueAct.Dimension <- 'statement';
	dialogueScript.ScriptTrigger.CoreDialogueAct.Function <- 'request';
	dialogueScript.ScriptTrigger.ActionDomain <- 'book';
	dialogueScript.ScriptTrigger.Scope <- 'appointment';
	BatchInsertEnd( dialogueScript.ScriptTrigger.ParameterTypes , 'medicalspeciality' );
	BatchInsertEnd( dialogueScript.ScriptTrigger.ParameterTypes , 'datetime' );
	BatchInsertEnd( dialogueScript.ScriptTrigger.ParameterTypes , 'countryplace' );
	BatchInsertEnd( dialogueScript.ScriptTrigger.ParameterTypes , 'phonenumber' );	
	BatchInsertEnd( dialogueScript.ScriptTrigger.ParameterTypes , 'peselnumber' );

	ScriptInfoItem scriptInfoItem;

	scriptInfoItem.InfoItemType <- 'core';	
	scriptInfoItem.InfoItemState <- 'empty';	
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	scriptInfoItem.InfoItemType <- 'action';	
	scriptInfoItem.InfoItemState <- 'empty';	
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	scriptInfoItem.InfoItemType <- 'scope';	
	scriptInfoItem.InfoItemState <- 'empty';	
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	scriptInfoItem.InfoItemType <- 'parameter';	
	scriptInfoItem.InfoItemParameterType <- 'medicalspeciality';	
	scriptInfoItem.InfoItemState <- 'empty';	
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	scriptInfoItem.InfoItemType <- 'parameter';	
	scriptInfoItem.InfoItemParameterType <- 'datetime';	
	scriptInfoItem.InfoItemState <- 'empty';	
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	scriptInfoItem.InfoItemType <- 'parameter';	
	scriptInfoItem.InfoItemParameterType <- 'countryplace';	
	scriptInfoItem.InfoItemState <- 'empty';	
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );
	
	scriptInfoItem.InfoItemType <- 'parameter';	
	scriptInfoItem.InfoItemParameterType <- 'phonenumber';	
	scriptInfoItem.InfoItemState <- 'empty';	
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	scriptInfoItem.InfoItemType <- 'parameter';	
	scriptInfoItem.InfoItemParameterType <- 'peselnumber';	
	scriptInfoItem.InfoItemState <- 'empty';	
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	// Begin Nodes 
	ScriptNode nodeStart;
	ScriptNode nodeAskMedicalSpeciality;
	ScriptNode nodeAskCountryPlace;
	ScriptNode nodeProposeDateTime;

	// Node - Start
	nodeStart <- createScriptNode( 'start', 'tell' );
	nodeStart.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'echo', 'bookappointmentscript' );
	BatchInsertEnd( nodeStart.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'start', 'finalized' ));
	BatchInsertEnd( nodeStart.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'start', 'finalized' ));

	// Node - AskMedicalSpeciality
	nodeAskMedicalSpeciality <- createScriptNode( 'askmedicalspeciality', 'wait' );
	nodeAskMedicalSpeciality.ScriptNodeContent <- setNodeContent( 'question', 'whquestion', 'what', 'medicalspeciality' );
	BatchInsertEnd( nodeAskMedicalSpeciality.ScriptNodePreconditions, createPrecondition2Arguments( 'state_info', '4', 'empty' ));
	BatchInsertEnd( nodeAskMedicalSpeciality.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'start', 'finalized' ));

	// Node - AskCountryPlace
	nodeAskCountryPlace <- createScriptNode( 'askcountryplace', 'wait' );
	nodeAskCountryPlace.ScriptNodeContent <- setNodeContent( 'question', 'whquestion', 'where', 'countryplace' );
	BatchInsertEnd( nodeAskCountryPlace.ScriptNodePreconditions, createPrecondition2Arguments( 'state_info', '6', 'empty' ));
	BatchInsertEnd( nodeAskCountryPlace.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', 'start', 'finalized' ));

	// Node - ProposeDateTime
	nodeProposeDateTime <- createScriptNode( 'proposedatetime', 'execute' );
	BatchInsertEnd( nodeProposeDateTime.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'proposedatetime', 'finalized' ));
	BatchInsertEnd( nodeProposeDateTime.ScriptNodePreconditions, createPrecondition2Arguments( 'state_info', '4', 'captured' ));
	BatchInsertEnd( nodeProposeDateTime.ScriptNodePreconditions, createPrecondition2Arguments( 'state_info', '6', 'captured' ));
	BatchInsertEnd( nodeProposeDateTime.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'proposedatetime', 'finalized' ));
	BatchInsertEnd( nodeProposeDateTime.ScriptNodePostconditions, createDialogueAction5Arguments( 'propose_info_item3', '5', 'get_medical_appointment_availability', '4', '5', '6' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeStart );
	BatchInsertEnd( dialogueScript.ScriptNodes, nodeAskMedicalSpeciality );
	BatchInsertEnd( dialogueScript.ScriptNodes, nodeAskCountryPlace );
	BatchInsertEnd( dialogueScript.ScriptNodes, nodeProposeDateTime );

	// End Nodes	

	return dialogueScript;
}

DialogueScript createDialogueScriptMakeTransfer()
{
	DialogueScript dialogueScript;
	DialogueAction dialogueAction, emptyDialogueAction;
	DialogueActionArgument dialogueActionArgument;
	Parameter parameter;

	ScriptNode nodeStart;

	dialogueScript.ScriptDescriptor <- 'MakeTransfer';

	// Trigger
	dialogueScript.ScriptTrigger.CoreDialogueAct.Dimension <- 'statement';
	dialogueScript.ScriptTrigger.CoreDialogueAct.Function <- 'request';
	dialogueScript.ScriptTrigger.ActionDomain <- 'execute';
	dialogueScript.ScriptTrigger.Scope <- 'transfer';
	BatchInsertEnd( dialogueScript.ScriptTrigger.ParameterTypes , 'accountnumber' );
	BatchInsertEnd( dialogueScript.ScriptTrigger.ParameterTypes , 'moneyamount' );

	// Node - Start
	nodeStart <- createScriptNode( 'start', 'tell' );
	nodeStart.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'echo', 'maketransferscript' );
	BatchInsertEnd( nodeStart.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'start', 'finalized' ));
	BatchInsertEnd( nodeStart.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'start', 'finalized' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeStart );

	return dialogueScript;
}


