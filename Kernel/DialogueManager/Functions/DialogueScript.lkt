// **************************************************
//
//	
//
// **************************************************
//
//	PROJECT	:	
//	MODULE  :	
//	PACKAGE :	
//	FILE	:	
//
// **************************************************

DialogueScript	createDialogueScriptManager()
{
	DialogueScript dialogueScript;
	ScriptNode nodeWelcome;
	ScriptNode nodeHMIHY;

	dialogueScript.ScriptDescriptor <- 'Manager';

	// Node - Welcome
	nodeWelcome.ScriptNodeDescriptor <- 'welcome';
	nodeWelcome.ScriptNodeType <- 'tell';
	nodeWelcome.ScriptNodeContent.DialogueAct.CoreDialogueAct.Dimension <- 'social';
	nodeWelcome.ScriptNodeContent.DialogueAct.CoreDialogueAct.Function <- 'greeting';
	nodeWelcome.ScriptNodeContent.DialogueAct.TaskDialogueAct.Scope <- 'welcome';
	nodeWelcome.ScriptNodeIsInitial <- True;
	BatchInsertEnd( dialogueScript.ScriptNodes, nodeWelcome );

	// Node - HMIHY
	nodeHMIHY.ScriptNodeDescriptor <- 'hmihy';
	nodeHMIHY.ScriptNodeType <- 'wait';
	nodeHMIHY.ScriptNodeContent.DialogueAct.CoreDialogueAct.Dimension <- 'question';
	nodeHMIHY.ScriptNodeContent.DialogueAct.CoreDialogueAct.Function <- 'choice';
	nodeHMIHY.ScriptNodeContent.DialogueAct.TaskDialogueAct.Scope <- 'hmihy';
	nodeHMIHY.ScriptNodeIsInitial <- False;
	BatchInsertEnd( dialogueScript.ScriptNodes, nodeHMIHY );
					
	return dialogueScript;
}

/*
DialogueScript	createDialogueScriptMedicalAppointment()
{
	DialogueScript dialogueScript;
	ScriptNode scriptNode;

	dialogueScript.ScriptDescriptor <- 'MedicalAppointment';

	// Item - ActionScope
	scriptNode <- createScriptNodeDCategoryDReference( 'ActionScope', 'Request/Appointment' );
	BatchInsertEnd( dialogueScript.ScriptNodes,
			scriptNode );

	// Item - MedicalSpeciality
	scriptNode <- createScriptNodeDCategory( 'Parameter/Speciality' );
	BatchInsertEnd( dialogueScript.ScriptNodes,
			scriptNode );

	// Item - AppointmentPlace
	scriptNode <- createScriptNodeDCategory( 'Parameter/City' );
	BatchInsertEnd( dialogueScript.ScriptNodes,
			scriptNode );

	// Item - AppointmentDate
	scriptNode <- createScriptNodeDCategory( 'Parameter/Schedule' );
	BatchInsertEnd( dialogueScript.ScriptNodes,
			scriptNode );

	// Item - PESEL
	scriptNode <- createScriptNodeDCategory( 'Parameter/Pesel' );
	BatchInsertEnd( dialogueScript.ScriptNodes,
			scriptNode );

	// Item - PhoneNumber
	scriptNode <- createScriptNodeDCategory( 'Parameter/PhoneNumber' );
	BatchInsertEnd( dialogueScript.ScriptNodes,
			scriptNode );

	// Item - ProposeDate
	scriptNode <- createScriptNodeDCategory( 'Propose/Date' );
	BatchInsertEnd( dialogueScript.ScriptNodes,
			scriptNode );

	return dialogueScript;
}

DialogueScript	createDialogueScriptBankConsultBalance()
{
	DialogueScript dialogueScript;
	ScriptNode scriptNode;

	dialogueScript.ScriptDescriptor <- 'BankConsultBalance';

	// Item - ActionScope
	scriptNode <- createScriptNodeDCategoryDReference( 'ActionScope', 'Consult/Balance' );
	BatchInsertEnd( dialogueScript.ScriptNodes,
			scriptNode );

	return dialogueScript;
}

DialogueScript	createDialogueScriptBankLocateATM()
{
	DialogueScript dialogueScript;
	ScriptNode scriptNode;

	dialogueScript.ScriptDescriptor <- 'BankLocateATM';

	// Item - ActionScope
	scriptNode <- createScriptNodeDCategoryDReference( 'ActionScope', 'Locate/ATM' );
	BatchInsertEnd( dialogueScript.ScriptNodes,
			scriptNode );

	return dialogueScript;
}

DialogueScript	createDialogueScriptBankTransfer()
{
	DialogueScript dialogueScript;
	ScriptNode scriptNode;

	dialogueScript.ScriptDescriptor <- 'BankTransfer';

	// Item - ActionScope
	scriptNode <- createScriptNodeDCategoryDReference( 'ActionScope', 'Command/Transfer' );
	BatchInsertEnd( dialogueScript.ScriptNodes,
			scriptNode );

	// Item - Account
	scriptNode <- createScriptNodeDCategory( 'Parameter/Account' );
	BatchInsertEnd( dialogueScript.ScriptNodes,
			scriptNode );

	// Item - Amount
	scriptNode <- createScriptNodeDCategory( 'Parameter/Amount' );
	BatchInsertEnd( dialogueScript.ScriptNodes,
			scriptNode );

	// Item - ProposeTransfer
	scriptNode <- createScriptNodeDCategory( 'Propose/Transfer' );
	BatchInsertEnd( dialogueScript.ScriptNodes,
			scriptNode );

	// Item - ConfirmTransfer
	scriptNode <- createScriptNodeDCategory( 'Confirm/Transfer' );
	BatchInsertEnd( dialogueScript.ScriptNodes,
			scriptNode );

	return dialogueScript;
}

*/

