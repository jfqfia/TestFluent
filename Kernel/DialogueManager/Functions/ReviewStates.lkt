// **************************************************
//
//	
//
// **************************************************
//
//	PROJECT	:	
//	MODULE  :	
//	PACKAGE :	
//	FILE	:	
//
// **************************************************

procedure reviewState(ScriptDescriptor scriptDescriptor, int position, ScriptInfoItem scriptInfoItem )
{
	if( scriptInfoItem.InfoItemType == 'core' || scriptInfoItem.InfoItemType == 'action' || scriptInfoItem.InfoItemType == 'scope')
	{
		reviewStateTrigger(scriptDescriptor, position, scriptInfoItem );
	}
	else if( scriptInfoItem.InfoItemType == 'parameter' )
	{
		reviewStateParameter(scriptDescriptor, position, scriptInfoItem );
	}
}

procedure reviewStateTrigger(ScriptDescriptor scriptDescriptor, int position, ScriptInfoItem scriptInfoItem )
{
	// Initial state == 'empty' => New captured parameter
	if( scriptInfoItem.InfoItemState == 'empty' && scriptInfoItem.InfoItemMoveState == 'captured' )
	{
		scriptInfoItem.InfoItemState <- 'captured';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}

	// Initial state == 'echoed' => Implicit Confirmation
	else if( scriptInfoItem.InfoItemState == 'echoed' && !! scriptInfoItem.InfoItemMoveState && !! hasBeenDisagreement() )
	{
		scriptInfoItem.InfoItemState <- 'grounded';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}
	else if( scriptInfoItem.InfoItemState == 'echoed' && scriptInfoItem.InfoItemMoveState == 'captured' )
	{
		scriptInfoItem.InfoItemState <- 'captured';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}
	else if( scriptInfoItem.InfoItemState == 'echoed' && hasBeenDisagreement() )
	{
		scriptInfoItem.InfoItemState <- 'rejected';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}

	// Initial state == 'proposed' => Negotiation
	else if( scriptInfoItem.InfoItemState == 'proposed' && !! scriptInfoItem.InfoItemMoveState )
	{
		scriptInfoItem.InfoItemState <- 'grounded';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}
	else if( scriptInfoItem.InfoItemState == 'proposed' && scriptInfoItem.InfoItemMoveState == 'captured' )
	{
		scriptInfoItem.InfoItemState <- 'captured';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}
	else if( scriptInfoItem.InfoItemState == 'proposed' && hasBeenDisagreement() )
	{
		scriptInfoItem.InfoItemState <- 'rejected';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}

	DialogueScript dialogueScript;
	ScriptInfoItems scriptInfoItems;

	dialogueScript <- getScript( scriptDescriptor );
	scriptInfoItems <- dialogueScript.ScriptInfoItems;
	BatchAssignPosition( scriptInfoItems, position, scriptInfoItem );
	dialogueScript.ScriptInfoItems <- scriptInfoItems;
	setScript( dialogueScript );
}

// TODO Revisar aquí: estrategia avanzada
// Si el parámetro es negated y los valores son iguales: Cancelar el valor del parámetro (empty)
// Si el parámetro es negated y los valores son distintos: Cambiar el valor del parámetro (captured)
procedure reviewStateParameter(ScriptDescriptor scriptDescriptor, int position, ScriptInfoItem scriptInfoItem )
{
	// Initial state == 'empty' => New captured parameter
	if( scriptInfoItem.InfoItemState == 'empty' && scriptInfoItem.InfoItemMoveState == 'captured' )
	{
		scriptInfoItem.InfoItemState <- 'captured';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}

	// Initial state == 'echoed' => Implicit Confirmation
	else if( scriptInfoItem.InfoItemState == 'echoed' && !! scriptInfoItem.InfoItemMoveState && !! hasBeenDisagreement() )
	{
		scriptInfoItem.InfoItemState <- 'grounded';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}
	else if( scriptInfoItem.InfoItemState == 'echoed' && scriptInfoItem.InfoItemMoveState == 'captured' && !! hasChanged( scriptInfoItem ) )
	{
		scriptInfoItem.InfoItemState <- 'grounded';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}
	else if( scriptInfoItem.InfoItemState == 'echoed' && scriptInfoItem.InfoItemMoveState == 'captured' && hasChanged( scriptInfoItem ) )
	{
		scriptInfoItem.InfoItemState <- 'captured';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}
	else if( scriptInfoItem.InfoItemState == 'echoed' && hasBeenDisagreement() )
	{
		scriptInfoItem.InfoItemState <- 'rejected';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}

	// Initial state == 'proposed' => Negotiation
	else if( scriptInfoItem.InfoItemState == 'proposed' && !! scriptInfoItem.InfoItemMoveState )
	{
		scriptInfoItem.InfoItemState <- 'grounded';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}
	else if( scriptInfoItem.InfoItemState == 'proposed' && scriptInfoItem.InfoItemMoveState == 'captured' && !! hasChanged( scriptInfoItem ) )
	{
		scriptInfoItem.InfoItemState <- 'grounded';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}
	else if( scriptInfoItem.InfoItemState == 'proposed' && scriptInfoItem.InfoItemMoveState == 'captured' && hasChanged( scriptInfoItem ) )
	{
		scriptInfoItem.InfoItemState <- 'captured';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}
	else if( scriptInfoItem.InfoItemState == 'proposed' && hasBeenDisagreement() )
	{
		scriptInfoItem.InfoItemState <- 'rejected';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}

	// Initial state == 'grounded' => Regretting
	else if( scriptInfoItem.InfoItemState == 'grounded' && scriptInfoItem.InfoItemMoveState == 'captured' && hasChanged( scriptInfoItem ) )
	{
		scriptInfoItem.InfoItemState <- 'changed';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}

	DialogueScript dialogueScript;
	ScriptInfoItems scriptInfoItems;

	dialogueScript <- getScript( scriptDescriptor );
	scriptInfoItems <- dialogueScript.ScriptInfoItems;
	BatchAssignPosition( scriptInfoItems, position, scriptInfoItem );
	dialogueScript.ScriptInfoItems <- scriptInfoItems;
	setScript( dialogueScript );
}

bool hasBeenDisagreement()
{
	bool ret <- False;
	ProferenceChunk proference;

	int size <- BatchSize( $MINDBOARD@DialogueState.NotDigestedProferenceChunks );
	for( int position <- 1; position <= size; position++ )
	{
		BatchRecoverPosition( $MINDBOARD@DialogueState.NotDigestedProferenceChunks, position, proference );
		if( proference.CoreDialogueAct.Dimension == 'basicanswer' && proference.CoreDialogueAct.Function == 'disagreement' )
		{
			ret <- True;
		}
	}

	return ret;
}

bool hasChanged( ScriptInfoItem currentScriptInfoItem )
{
	Parameter lastInfoItem;
	bool ret <- False;

	int size <- BatchSize( currentScriptInfoItem.InfoItemHistory );
	if( size > 0 )
	{
		BatchRecoverPosition( currentScriptInfoItem.InfoItemHistory, size, lastInfoItem );
		if( currentScriptInfoItem.InfoItemValue.Parameter != lastInfoItem )
		{
			ret <- True;
		}
	}

	return ret;
}

