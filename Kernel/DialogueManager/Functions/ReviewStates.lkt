// ****************************************************************************
//
//	Functions related with the review in the script info items that 
//	compose a node
//
// ****************************************************************************
//
//	PROJECT	: Fluency
// 	DOMAIN  : Kernel
//	MODULE  : DialogueManager
//	PACKAGE	: Functions
// 	FOLDER  : -
// 	FILE	: ReviewStates
//
// ****************************************************************************

bool reviewState(ScriptDescriptor scriptDescriptor, int position, ScriptInfoItem scriptInfoItem )
{
	if( scriptInfoItem.InfoItemType == 'core' || scriptInfoItem.InfoItemType == 'action' || scriptInfoItem.InfoItemType == 'scope')
	{
		return reviewStateTrigger(scriptDescriptor, position, scriptInfoItem );
	}
	else if( scriptInfoItem.InfoItemType == 'parameter' )
	{
		return reviewStateParameter(scriptDescriptor, position, scriptInfoItem );
	}
}

bool reviewStateTrigger(ScriptDescriptor scriptDescriptor, int position, ScriptInfoItem scriptInfoItem )
{
	bool ret <- False; 

	// Initial state == 'empty' => New captured parameter
	if( scriptInfoItem.InfoItemState == 'empty' && scriptInfoItem.InfoItemMoveState == 'captured' )
	{
		scriptInfoItem.InfoItemState <- 'captured';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}

	// Initial state == 'echoed' => Implicit Confirmation
	else if( scriptInfoItem.InfoItemState == 'echoed' && !! scriptInfoItem.InfoItemMoveState && !! hasBeenDisagreement() )
	{
		scriptInfoItem.InfoItemState <- 'grounded';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}
	else if( scriptInfoItem.InfoItemState == 'echoed' && scriptInfoItem.InfoItemMoveState == 'captured' )
	{
		scriptInfoItem.InfoItemState <- 'captured';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}
	else if( scriptInfoItem.InfoItemState == 'echoed' && hasBeenDisagreement() )
	{
		scriptInfoItem.InfoItemState <- 'rejected';
		scriptInfoItem.InfoItemMoveState <- 'marked';
		ret <- True;
	}

	// Initial state == 'proposed' => Negotiation
	else if( scriptInfoItem.InfoItemState == 'proposed' && !! scriptInfoItem.InfoItemMoveState )
	{
		scriptInfoItem.InfoItemState <- 'grounded';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}
	else if( scriptInfoItem.InfoItemState == 'proposed' && scriptInfoItem.InfoItemMoveState == 'captured' )
	{
		scriptInfoItem.InfoItemState <- 'captured';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}
	else if( scriptInfoItem.InfoItemState == 'proposed' && hasBeenDisagreement() )
	{
		scriptInfoItem.InfoItemState <- 'rejected';
		scriptInfoItem.InfoItemMoveState <- 'marked';
		ret <- True;
	}

	DialogueScript dialogueScript;
	ScriptInfoItems scriptInfoItems;

	dialogueScript <- getScript( scriptDescriptor );
	scriptInfoItems <- dialogueScript.ScriptInfoItems;
	BatchAssignPosition( scriptInfoItems, position, scriptInfoItem );
	dialogueScript.ScriptInfoItems <- scriptInfoItems;
	setScript( dialogueScript );

	return ret;
}

bool reviewStateParameter(ScriptDescriptor scriptDescriptor, int position, ScriptInfoItem scriptInfoItem )
{
	bool ret <- False;

	// Initial state == 'empty' => New captured parameter or remembering
	if( scriptInfoItem.InfoItemState == 'empty' && scriptInfoItem.InfoItemMoveState == 'captured' )
	{
		scriptInfoItem.InfoItemState <- 'captured';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}
	if( scriptInfoItem.InfoItemState == 'empty' && scriptInfoItem.InfoItemMoveState == 'recovered' )
	{
		scriptInfoItem.InfoItemState <- 'recovered';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}

	// Initial state == 'echoed' => Implicit Confirmation
	else if( scriptInfoItem.InfoItemState == 'echoed' && !! scriptInfoItem.InfoItemMoveState && !! hasBeenDisagreement() )
	{
		scriptInfoItem.InfoItemState <- 'grounded';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}
	else if( scriptInfoItem.InfoItemState == 'echoed' && scriptInfoItem.InfoItemMoveState == 'captured' && !! hasChanged( scriptInfoItem ) && !! scriptInfoItem.InfoItemValue.Parameter.ParameterCategory == 'negation')
	{
		scriptInfoItem.InfoItemState <- 'grounded';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}
	else if( scriptInfoItem.InfoItemState == 'echoed' && scriptInfoItem.InfoItemMoveState == 'captured' && !! hasChanged( scriptInfoItem ) && scriptInfoItem.InfoItemValue.Parameter.ParameterCategory == 'negation')
	{
		scriptInfoItem.InfoItemState <- 'rejected';
		Parameter parameter;
		BatchExtractEnd(scriptInfoItem.InfoItemHistory, parameter);
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}
	else if( scriptInfoItem.InfoItemState == 'echoed' && scriptInfoItem.InfoItemMoveState == 'captured' && hasChanged( scriptInfoItem )  && !! scriptInfoItem.InfoItemValue.Parameter.ParameterCategory == 'negation')
	{
		scriptInfoItem.InfoItemState <- 'captured';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}
	else if( scriptInfoItem.InfoItemState == 'echoed' && scriptInfoItem.InfoItemMoveState == 'captured' && hasChanged( scriptInfoItem )  && scriptInfoItem.InfoItemValue.Parameter.ParameterCategory == 'negation')
	{
		scriptInfoItem.InfoItemState <- 'captured';
		Parameter parameter;
		BatchExtractEnd(scriptInfoItem.InfoItemHistory, parameter);
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}
	else if( scriptInfoItem.InfoItemState == 'echoed' && scriptInfoItem.InfoItemMoveState != 'captured' && hasBeenDisagreement() )
	{
		scriptInfoItem.InfoItemState <- 'rejected';
		scriptInfoItem.InfoItemMoveState <- 'marked';
		ret <- True;
	}
	else if( scriptInfoItem.InfoItemState == 'echoed' && scriptInfoItem.InfoItemMoveState == 'captured' && hasBeenDisagreement() )
	{
		scriptInfoItem.InfoItemState <- 'captured';
		scriptInfoItem.InfoItemMoveState <- 'marked';
		ret <- True;
	}

	// Initial state == 'proposed' => Negotiation
	else if( scriptInfoItem.InfoItemState == 'proposed' && !! scriptInfoItem.InfoItemMoveState && !! hasBeenDisagreement() )
	{
		scriptInfoItem.InfoItemState <- 'grounded';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}
	else if( scriptInfoItem.InfoItemState == 'proposed' && scriptInfoItem.InfoItemMoveState == 'captured' && !! hasChanged( scriptInfoItem ) )
	{
		scriptInfoItem.InfoItemState <- 'grounded';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}
	else if( scriptInfoItem.InfoItemState == 'proposed' && scriptInfoItem.InfoItemMoveState == 'captured' && hasChanged( scriptInfoItem ) )
	{
		scriptInfoItem.InfoItemState <- 'captured';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}
	else if( scriptInfoItem.InfoItemState == 'proposed' && hasBeenDisagreement() )
	{
		scriptInfoItem.InfoItemState <- 'rejected';
		scriptInfoItem.InfoItemMoveState <- 'marked';
		ret <- True;
	}

	// Initial state == 'grounded' => Regretting
	else if( scriptInfoItem.InfoItemState == 'grounded' && scriptInfoItem.InfoItemMoveState == 'captured' && hasChanged( scriptInfoItem ) )
	{
		scriptInfoItem.InfoItemState <- 'changed';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}

	// Initial state == 'changed' => Regretting confirm/cancel
	else if( scriptInfoItem.InfoItemState == 'changed' && scriptInfoItem.InfoItemMoveState == 'captured' && !! hasChanged( scriptInfoItem ) )
	{
		scriptInfoItem.InfoItemState <- 'grounded';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}
	else if( scriptInfoItem.InfoItemState == 'changed' && scriptInfoItem.InfoItemMoveState == 'captured' && hasChanged( scriptInfoItem ) )
	{
		scriptInfoItem.InfoItemState <- 'captured';
		scriptInfoItem.InfoItemMoveState <- 'marked';
	}

	DialogueScript dialogueScript;
	ScriptInfoItems scriptInfoItems;

	dialogueScript <- getScript( scriptDescriptor );
	scriptInfoItems <- dialogueScript.ScriptInfoItems;
	BatchAssignPosition( scriptInfoItems, position, scriptInfoItem );
	dialogueScript.ScriptInfoItems <- scriptInfoItems;
	setScript( dialogueScript );

	return ret;
}

bool hasBeenDisagreement()
{
	bool ret <- False;
	ProferenceChunk proference;

	int size <- BatchSize( $MINDBOARD@DialogueState.NotDigestedProferenceChunks );
	for( int position <- 1; position <= size; position++ )
	{
		BatchRecoverPosition( $MINDBOARD@DialogueState.NotDigestedProferenceChunks, position, proference );
		if( proference.CoreDialogueAct.Dimension == 'basicanswer' && proference.CoreDialogueAct.Function == 'disagreement' )
		{
			ret <- True;
		}
	}

	return ret;
}

procedure deleteDisagreement()
{
	ProferenceChunk proference;
	NotDigestedProferenceChunks newBatch;

	int size <- BatchSize( $MINDBOARD@DialogueState.NotDigestedProferenceChunks );
	for( int position <- 1; position <= size; position++ )
	{
		BatchRecoverPosition( $MINDBOARD@DialogueState.NotDigestedProferenceChunks, position, proference );
		if( proference.CoreDialogueAct.Dimension != 'basicanswer' || proference.CoreDialogueAct.Function != 'disagreement' )
		{
			BatchInsertEnd(newBatch, proference);
		}
	}

	$MINDBOARD@DialogueState.NotDigestedProferenceChunks <- newBatch;
}

bool hasChanged( ScriptInfoItem currentScriptInfoItem )
{
	Parameter lastInfoItem;
	bool ret <- False;

	int size <- BatchSize( currentScriptInfoItem.InfoItemHistory );
	if( size > 0 )
	{
		BatchRecoverPosition( currentScriptInfoItem.InfoItemHistory, size, lastInfoItem );
		if( currentScriptInfoItem.InfoItemValue.Parameter.ParameterValue != lastInfoItem.ParameterValue )
		{
			ret <- True;
		}
	}

	return ret;
}

