// **************************************************
//
//	
//
// **************************************************
//
//	PROJECT	:	
//	MODULE  :	
//	PACKAGE :	
//	FILE	:	
//
// **************************************************

bool executeBooleanDialogueAction( DialogueAction dialogueAction )
{
	bool ret;

	if(dialogueAction.DialogueActionName == 'is_node_state')
	{
		string node, state;
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, node );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 2, state );
		ret = isNodeState(node, state);
	}
	if(dialogueAction.DialogueActionName == 'empty_slot')
	{
		string script, number;
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, script );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 2, number );
		ret = emptySlot(script, number);
	}

	return ret;	
}

bool emptySlot(string scriptDescriptor, string number)
{
	DialogueScript script;
	int slotNumber;
	Parameter parameter;

	slotNumber <- ShapeToInt(number);
	script <- getScript( scriptDescriptor );
	BatchRecoverPosition( script.DialogueTrigger.Parameters, slotNumber, parameter );

	return !! Filled( parameter.ParameterValue );
}

bool isNodeState(string nodeDescriptor, string state)
{
	bool ret;
	ScriptNode node;
	ScriptNodeStateName scriptNodeStateName;

	ret <- False;
	scriptNodeStateName <- ShapeToRange(state);
	node <- getNodeFromCurrentScript( nodeDescriptor );

	if(node.ScriptNodeState.ScriptNodeStateName == scriptNodeStateName )
	{
		ret <- True;
	}

	return ret;
}

procedure executeProcedureDialogueAction( DialogueAction dialogueAction )
{
	if(dialogueAction.DialogueActionName == 'set_node_state')
	{
		string node, state;
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, node );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 2, state );
		setNodeStateToCurrent(node, state);
	}
	if(dialogueAction.DialogueActionName == 'pull_script')
	{
		pullScript();
	}
}

procedure setNodeStateToCurrent(string nodeDescriptor, string state)
{
	setNodeState( $MINDBOARD@DialogueState.CurrentScriptDescriptor, nodeDescriptor, state );
}

procedure setNodeState(string scriptDescriptor, string nodeDescriptor, string state)
{
	DialogueScript script;
	ScriptNode node;

	script <- getScript(scriptDescriptor);
	node <- getNodeFromScript(script, nodeDescriptor );	
	node.ScriptNodeState.ScriptNodeStateName <- ShapeToRange(state);

	setNodeToScript(script, node);
}


