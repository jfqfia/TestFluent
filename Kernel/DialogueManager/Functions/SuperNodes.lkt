// ****************************************************************************
//
//	Functions related with the easy creation of some nodes structures often
//	used in the design of scripts
//
// ****************************************************************************
//
//	PROJECT	: Fluency
// 	DOMAIN  : Kernel
//	MODULE  : DialogueManager
//	PACKAGE	: Functions
// 	FOLDER  : -
// 	FILE	: SuperNodes
//
// ****************************************************************************

DialogueScript defaultNode(DialogueScript dialogueScript, int priorityLevel)
{
	ScriptNode defaultNode;
	
	string suffix = '_';
	suffix <- LiteralConcat( suffix, ShapeToString(priorityLevel) );
	string task, nodeName1;

	task = dialogueScript.ScriptTrigger.ActionDomain;
	task <- LiteralConcat ( task, dialogueScript.ScriptTrigger.Scope );

	// Node - DefaultNode
	nodeName1 <- LiteralConcat( 'defaultnode', suffix );	
	defaultNode <- createScriptNode( nodeName1, 'execute', priorityLevel );
	defaultNode.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'follow', task );
	BatchInsertEnd( defaultNode.ScriptNodePreconditions, createPrecondition0Arguments( 'never' ));
	BatchInsertEnd( defaultNode.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( defaultNode.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '1', 'grounded' ));
	BatchInsertEnd( defaultNode.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '2', 'grounded' ));
	BatchInsertEnd( defaultNode.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '3', 'grounded' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, defaultNode );

	dialogueScript.DefaultNodeDescriptor <- nodeName1;

	return dialogueScript; 
}

DialogueScript scriptActivation(DialogueScript dialogueScript, int priorityLevel)
{
	ScriptNode nodeExplicitTrigger;
	ScriptNode nodeExplicitTriggerAgreement;
	ScriptNode nodeExplicitTriggerDisagreement;
	ScriptNode nodeImplicitTrigger;
	ScriptNode nodeImplicitTriggerDisagreement;

	string suffix = '_scriptactivation';
	suffix <- LiteralConcat( suffix, '_' );
	suffix <- LiteralConcat( suffix, ShapeToString(priorityLevel) );
	string task, nodeName1, nodeName2, nodeName3, nodeName4, nodeName5;

	task = dialogueScript.ScriptTrigger.ActionDomain;
	task <- LiteralConcat ( task, dialogueScript.ScriptTrigger.Scope );

	// Node - ExplicitTrigger
	nodeName1 <- LiteralConcat( 'explicittrigger', suffix );	
	nodeExplicitTrigger <- createScriptNode( nodeName1, 'wait', priorityLevel );
	nodeExplicitTrigger.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'explicit', LiteralConcat( 'trigger', task ));
	BatchInsertEnd( nodeExplicitTrigger.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', nodeName1, 'finalized' ));
	BatchInsertEnd( nodeExplicitTrigger.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '3', 'empty' ));
	BatchInsertEnd( nodeExplicitTrigger.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName1, 'finalized' ));
	BatchInsertEnd( nodeExplicitTrigger.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeExplicitTrigger.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '1', 'proposed' ));
	BatchInsertEnd( nodeExplicitTrigger.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '2', 'proposed' ));
	BatchInsertEnd( nodeExplicitTrigger.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '3', 'proposed' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeExplicitTrigger );

	// Node - ExplicitTriggerAgreement
	nodeName2 <- LiteralConcat( 'explicittriggeragreement', suffix );	
	nodeExplicitTriggerAgreement <- createScriptNode( nodeName2, 'execute', priorityLevel );
	BatchInsertEnd( nodeExplicitTriggerAgreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName1, 'finalized' ));
	BatchInsertEnd( nodeExplicitTriggerAgreement.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', nodeName2, 'finalized' ));
	BatchInsertEnd( nodeExplicitTriggerAgreement.ScriptNodePreconditions, createPrecondition2Arguments( 'digested_core', 'basicanswer', 'agreement' ));
	BatchInsertEnd( nodeExplicitTriggerAgreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName2, 'finalized' ));
	BatchInsertEnd( nodeExplicitTriggerAgreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName4, 'finalized' ));
	BatchInsertEnd( nodeExplicitTriggerAgreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '1', 'grounded' ));
	BatchInsertEnd( nodeExplicitTriggerAgreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '2', 'grounded' ));
	BatchInsertEnd( nodeExplicitTriggerAgreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '3', 'grounded' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeExplicitTriggerAgreement );

	// Node - ExplicitTriggerDisagreement
	nodeName3 <- LiteralConcat( 'explicittriggerdisagreement', suffix );	
	nodeExplicitTriggerDisagreement <- createScriptNode( nodeName3, 'execute', priorityLevel );
	BatchInsertEnd( nodeExplicitTriggerDisagreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName1, 'finalized' ));
	BatchInsertEnd( nodeExplicitTriggerDisagreement.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', nodeName2, 'finalized' ));
	BatchInsertEnd( nodeExplicitTriggerDisagreement.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'digested_core', 'basicanswer', 'agreement' ));
	BatchInsertEnd( nodeExplicitTriggerDisagreement.ScriptNodePostconditions, createDialogueAction0Arguments( 'delete_disagreement' ));
	BatchInsertEnd( nodeExplicitTriggerDisagreement.ScriptNodePostconditions, createDialogueAction0Arguments( 'pull_script' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeExplicitTriggerDisagreement );

	// Node - ImplicitTrigger
	nodeName4 <- LiteralConcat( 'implicittrigger', suffix );	
	nodeImplicitTrigger <- createScriptNode( nodeName4, 'execute', priorityLevel);
	nodeImplicitTrigger.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'implicit', LiteralConcat( 'trigger', task ) );
	BatchInsertEnd( nodeImplicitTrigger.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', nodeName4, 'finalized' ));
	BatchInsertEnd( nodeImplicitTrigger.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '3', 'captured' ));
	BatchInsertEnd( nodeImplicitTrigger.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName4, 'finalized' ));
	BatchInsertEnd( nodeImplicitTrigger.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeImplicitTrigger.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '1', 'echoed' ));
	BatchInsertEnd( nodeImplicitTrigger.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '2', 'echoed' ));
	BatchInsertEnd( nodeImplicitTrigger.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', '3', 'echoed' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeImplicitTrigger );

	// Node - ImplicitTriggerDisagreement
	nodeName5 <- LiteralConcat( 'implicittriggerdisagreement', suffix );	
	nodeImplicitTriggerDisagreement <- createScriptNode( nodeName5, 'execute', priorityLevel);
	BatchInsertEnd( nodeImplicitTriggerDisagreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName4, 'finalized' ));
	BatchInsertEnd( nodeImplicitTriggerDisagreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '1', 'rejected' ));
	BatchInsertEnd( nodeImplicitTriggerDisagreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '2', 'rejected' ));
	BatchInsertEnd( nodeImplicitTriggerDisagreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', '3', 'rejected' ));
	BatchInsertEnd( nodeImplicitTriggerDisagreement.ScriptNodePostconditions, createDialogueAction0Arguments( 'pull_script' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeImplicitTriggerDisagreement );

	return dialogueScript;
}

DialogueScript captureCompulsoryParameter(DialogueScript dialogueScript, int priorityLevel, ParameterType parameterType)
{
	ScriptNode nodeAskParameter;
	ScriptNode nodeOverCounterParameter;
	ScriptNode nodeRecoveredParameter;
	ScriptNode nodeIdontknowParameter;
	ScriptNode nodeImplicitParameter;
	ScriptNode nodeCheckParameter;
	ScriptNode nodeIncorrectParameter;
	ScriptNode nodeCorrectParameter;
	ScriptNode nodeImplicitDisagreement;
	ScriptNode nodeChanged;
	ScriptNode nodeExplicitAgreement;
	ScriptNode nodeExplicitDisagreement;
	ScriptNode nodePendingParameter;

	string suffix = '_capturecompulsoryparameter_';
	suffix <- LiteralConcat( suffix, ShapeToString(parameterType) );
	suffix <- LiteralConcat( suffix, '_' );
	suffix <- LiteralConcat( suffix, ShapeToString(priorityLevel) );
	string task, nodeName1, nodeName2, nodeName3, nodeName4, nodeName5, nodeName6, nodeName7, nodeName8, nodeName9, nodeName10, nodeName11, nodeName12, nodeName13;
	string parameterPosition <- recoverParameterPosition(dialogueScript, parameterType);

	// Node - AskParameter
	nodeName1 <- LiteralConcat( 'askparameter', suffix );	
	nodeAskParameter <- createScriptNode( nodeName1, 'wait', priorityLevel );
	nodeAskParameter.ScriptNodeContent <- setNodeContent( 'question', 'whquestion', 'what', ShapeToString(parameterType) );
	BatchInsertEnd( nodeAskParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', parameterPosition, 'empty' ));
	BatchInsertEnd( nodeAskParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_counter_leq', nodeName1, ShapeToString(NUMBER_OF_QUESTIONS_BEFORE_ABORTING - 1) ));
	BatchInsertEnd( nodeAskParameter.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeAskParameter.ScriptNodePostconditions, createDialogueAction1Arguments( 'set_expectative_parameter', ShapeToString(parameterType) ));
	BatchInsertEnd( nodeAskParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName1, 'finalized' ));	

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeAskParameter );

	// Node - OverCounterParameter
	nodeName12 <- LiteralConcat( 'overcounterparameter', suffix );	
	nodeOverCounterParameter <- createScriptNode( nodeName12, 'execute', priorityLevel );
	nodeOverCounterParameter.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'cancel', 'task' );
	BatchInsertEnd( nodeOverCounterParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', parameterPosition, 'empty' ));
	BatchInsertEnd( nodeOverCounterParameter.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_counter_leq', nodeName1, ShapeToString(NUMBER_OF_QUESTIONS_BEFORE_ABORTING - 1) ));
	BatchInsertEnd( nodeOverCounterParameter.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeOverCounterParameter.ScriptNodePostconditions, createDialogueAction0Arguments( 'delete_disagreement' ));
	BatchInsertEnd( nodeOverCounterParameter.ScriptNodePostconditions, createDialogueAction0Arguments( 'pull_script' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeOverCounterParameter );

	// Node - IdontknowParameter
	nodeName2 <- LiteralConcat( 'idontknowparameter', suffix );	
	nodeIdontknowParameter <- createScriptNode( nodeName2, 'execute', priorityLevel );
	nodeIdontknowParameter.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'idontknow', 'parameter' );
	BatchInsertEnd( nodeIdontknowParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName1, 'finalized' ));
	BatchInsertEnd( nodeIdontknowParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', parameterPosition, 'empty' ));
	BatchInsertEnd( nodeIdontknowParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'digested_core', 'basicanswer', 'dontknow' ));
	BatchInsertEnd( nodeIdontknowParameter.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', parameterPosition ));
	BatchInsertEnd( nodeIdontknowParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName1, 'notfinalized' ));
	BatchInsertEnd( nodeIdontknowParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_counter', nodeName1, '0' ));	

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeIdontknowParameter );

	// Node - ImplicitParameter
	nodeName3 <- LiteralConcat( 'implicitparameter', suffix );	
	nodeImplicitParameter <- createScriptNode( nodeName3, 'execute', priorityLevel);
	nodeImplicitParameter.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'implicit', 'parameter' );
	BatchInsertEnd( nodeImplicitParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', parameterPosition, 'captured' ));
	BatchInsertEnd( nodeImplicitParameter.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', parameterPosition ));
	BatchInsertEnd( nodeImplicitParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', parameterPosition, 'checking' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeImplicitParameter );

	// Node - RecoveredParameter
	nodeName11 <- LiteralConcat( 'recoveredparameter', suffix );	
	nodeRecoveredParameter <- createScriptNode( nodeName11, 'execute', priorityLevel);
	nodeRecoveredParameter.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'recovered', 'parameter' );
	BatchInsertEnd( nodeRecoveredParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', parameterPosition, 'recovered' ));
	BatchInsertEnd( nodeRecoveredParameter.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', parameterPosition ));
	BatchInsertEnd( nodeRecoveredParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', parameterPosition, 'checking' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeRecoveredParameter );

	// Node - CheckParameter
	nodeName4 <- LiteralConcat( 'checkparameter', suffix );	
	nodeCheckParameter <- createScriptNode( nodeName4, 'execute', priorityLevel );
	BatchInsertEnd( nodeCheckParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', parameterPosition, 'checking' ));
	BatchInsertEnd( nodeCheckParameter.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', nodeName4, 'correct' ));
	BatchInsertEnd( nodeCheckParameter.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', nodeName4, 'pending' ));
	BatchInsertEnd( nodeCheckParameter.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', nodeName4, 'incorrect' ));
	BatchInsertEnd( nodeCheckParameter.ScriptNodePostconditions, createDialogueAction1Arguments( 'check_parameter', parameterPosition ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeCheckParameter );

	// Node - IncorrectParameter
	nodeName5 <- LiteralConcat( 'incorrectparameter', suffix );	
	nodeIncorrectParameter <- createScriptNode( nodeName5, 'execute', priorityLevel );
	nodeIncorrectParameter.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'incorrect', 'parameter' );
	BatchInsertEnd( nodeIncorrectParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName4, 'incorrect' ));
	BatchInsertEnd( nodeIncorrectParameter.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', parameterPosition ));
	BatchInsertEnd( nodeIncorrectParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', parameterPosition, 'empty' ));
	BatchInsertEnd( nodeIncorrectParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName4, 'notfinalized' ));
	BatchInsertEnd( nodeIncorrectParameter.ScriptNodePostconditions, createDialogueAction0Arguments( 'reset_next_level' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeIncorrectParameter );

	// Node - PendingParameter
	nodeName13 <- LiteralConcat( 'pendingparameter', suffix );	
	nodePendingParameter <- createScriptNode( nodeName13, 'execute', priorityLevel );
	BatchInsertEnd( nodePendingParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName4, 'pending' ));
	BatchInsertEnd( nodePendingParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', parameterPosition, 'empty' ));
	BatchInsertEnd( nodePendingParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName4, 'notfinalized' ));
	BatchInsertEnd( nodePendingParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'push_script_1', 'capture_intersentential_parameter', parameterPosition ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodePendingParameter );

	// Node - CorrectParameter
	nodeName6 <- LiteralConcat( 'correctparameter', suffix );	
	nodeCorrectParameter <- createScriptNode( nodeName6, 'execute', priorityLevel );
	nodeCorrectParameter.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'correct', 'parameter' );
	BatchInsertEnd( nodeCorrectParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName4, 'correct' ));
	BatchInsertEnd( nodeCorrectParameter.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', parameterPosition ));
	BatchInsertEnd( nodeCorrectParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', parameterPosition, 'echoed' ));
	BatchInsertEnd( nodeCorrectParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName4, 'notfinalized' ));
	BatchInsertEnd( nodeCorrectParameter.ScriptNodePostconditions, createDialogueAction0Arguments( 'reset_next_level' ));
	BatchInsertEnd( nodeCorrectParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_counter', nodeName1, '0' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeCorrectParameter );

	// Node - ImplicitDisagreement
	nodeName7 <- LiteralConcat( 'implicitdisagreement', suffix );	
	nodeImplicitDisagreement <- createScriptNode( nodeName7, 'execute', priorityLevel);
	BatchInsertEnd( nodeImplicitDisagreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', parameterPosition, 'rejected' ));
	BatchInsertEnd( nodeImplicitDisagreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', parameterPosition, 'empty' ));
	BatchInsertEnd( nodeImplicitDisagreement.ScriptNodePostconditions, createDialogueAction0Arguments( 'delete_disagreement' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeImplicitDisagreement );

	// Node - ChangedFromGrounded
	nodeName8 <- LiteralConcat( 'changedfromgrounded', suffix );	
	nodeChanged <- createScriptNode( nodeName8, 'wait', priorityLevel);
	nodeChanged.ScriptNodeState.ScriptNodeResetStateName <- 'notfinalized';
	nodeChanged.ScriptNodeContent <- setNodeContent( 'question', 'propositional', 'confirmchanged', 'parameter' );
	BatchInsertEnd( nodeChanged.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', nodeName8, 'finalized' ));
	BatchInsertEnd( nodeChanged.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', parameterPosition, 'changed' ));
	BatchInsertEnd( nodeChanged.ScriptNodePostconditions, createDialogueAction1Arguments( 'swap_history', parameterPosition ));	
	BatchInsertEnd( nodeChanged.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', parameterPosition ));
	BatchInsertEnd( nodeChanged.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName8, 'finalized' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeChanged );

	// Node - ExplicitAgreement
	nodeName9 <- LiteralConcat( 'explicitagreement', suffix );	
	nodeExplicitAgreement <- createScriptNode( nodeName9, 'execute', priorityLevel);
	BatchInsertEnd( nodeExplicitAgreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName8, 'finalized' ));
	BatchInsertEnd( nodeExplicitAgreement.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'digested_core', 'basicanswer', 'disagreement' ));
	BatchInsertEnd( nodeExplicitAgreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', parameterPosition, 'grounded' ));
	BatchInsertEnd( nodeExplicitAgreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName8, 'notfinalized' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeExplicitAgreement );

	// Node - ExplicitDisagreement
	nodeName10 <- LiteralConcat( 'explicitdisagreement', suffix );	
	nodeExplicitDisagreement <- createScriptNode( nodeName10, 'execute', priorityLevel);
	BatchInsertEnd( nodeExplicitDisagreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName8, 'finalized' ));
	BatchInsertEnd( nodeExplicitDisagreement.ScriptNodePreconditions, createPrecondition2Arguments( 'digested_core', 'basicanswer', 'disagreement' ));
	BatchInsertEnd( nodeExplicitDisagreement.ScriptNodePostconditions, createDialogueAction1Arguments( 'swap_history', parameterPosition ));	
	BatchInsertEnd( nodeExplicitDisagreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', parameterPosition, 'captured' ));
	BatchInsertEnd( nodeExplicitDisagreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName8, 'notfinalized' ));
	BatchInsertEnd( nodeExplicitDisagreement.ScriptNodePostconditions, createDialogueAction0Arguments( 'delete_disagreement' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeExplicitDisagreement );

	return dialogueScript;
}

DialogueScript captureOptionalParameter(DialogueScript dialogueScript, int priorityLevel, ParameterType parameterType)
{
	ScriptNode nodeImplicitParameter;
	ScriptNode nodeRecoveredParameter;
	ScriptNode nodeCheckParameter;
	ScriptNode nodeIncorrectParameter;
	ScriptNode nodeCorrectParameter;
	ScriptNode nodeImplicitDisagreement;
	ScriptNode nodeChanged;
	ScriptNode nodeExplicitAgreement;
	ScriptNode nodeExplicitDisagreement;

	string suffix = '_captureoptionalparameter_';
	suffix <- LiteralConcat( suffix, ShapeToString(parameterType) );
	suffix <- LiteralConcat( suffix, '_' );
	suffix <- LiteralConcat( suffix, ShapeToString(priorityLevel) );
	string nodeName3, nodeName4, nodeName5, nodeName6, nodeName7, nodeName8, nodeName9, nodeName10, nodeName11;
	string parameterPosition <- recoverParameterPosition(dialogueScript, parameterType);

	// Node - ImplicitParameter
	nodeName3 <- LiteralConcat( 'implicitparameter', suffix );	
	nodeImplicitParameter <- createScriptNode( nodeName3, 'execute', priorityLevel);
	nodeImplicitParameter.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'implicit', 'parameter' );
	BatchInsertEnd( nodeImplicitParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', parameterPosition, 'captured' ));
	BatchInsertEnd( nodeImplicitParameter.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', parameterPosition ));
	BatchInsertEnd( nodeImplicitParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', parameterPosition, 'checking' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeImplicitParameter );

	// Node - RecoveredParameter
	nodeName11 <- LiteralConcat( 'recoveredparameter', suffix );	
	nodeRecoveredParameter <- createScriptNode( nodeName11, 'execute', priorityLevel);
	nodeRecoveredParameter.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'recovered', 'parameter' );
	BatchInsertEnd( nodeRecoveredParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', parameterPosition, 'recovered' ));
	BatchInsertEnd( nodeRecoveredParameter.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', parameterPosition ));
	BatchInsertEnd( nodeRecoveredParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', parameterPosition, 'checking' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeRecoveredParameter );

	// Node - CheckParameter
	nodeName4 <- LiteralConcat( 'checkparameter', suffix );	
	nodeCheckParameter <- createScriptNode( nodeName4, 'execute', priorityLevel );
	BatchInsertEnd( nodeCheckParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', parameterPosition, 'checking' ));
	BatchInsertEnd( nodeCheckParameter.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', nodeName4, 'correct' ));
	BatchInsertEnd( nodeCheckParameter.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', nodeName4, 'incorrect' ));
	BatchInsertEnd( nodeCheckParameter.ScriptNodePostconditions, createDialogueAction1Arguments( 'check_parameter', parameterPosition ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeCheckParameter );

	// Node - IncorrectParameter
	nodeName5 <- LiteralConcat( 'incorrectparameter', suffix );	
	nodeIncorrectParameter <- createScriptNode( nodeName5, 'execute', priorityLevel );
	nodeIncorrectParameter.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'incorrect', 'parameter' );
	BatchInsertEnd( nodeIncorrectParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName4, 'incorrect' ));
	BatchInsertEnd( nodeIncorrectParameter.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', parameterPosition ));
	BatchInsertEnd( nodeIncorrectParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', parameterPosition, 'empty' ));
	BatchInsertEnd( nodeIncorrectParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName4, 'notfinalized' ));
	BatchInsertEnd( nodeIncorrectParameter.ScriptNodePostconditions, createDialogueAction0Arguments( 'reset_next_level' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeIncorrectParameter );

	// Node - CorrectParameter
	nodeName6 <- LiteralConcat( 'correctparameter', suffix );	
	nodeCorrectParameter <- createScriptNode( nodeName6, 'execute', priorityLevel );
	nodeCorrectParameter.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'correct', 'parameter' );
	BatchInsertEnd( nodeCorrectParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName4, 'correct' ));
	BatchInsertEnd( nodeCorrectParameter.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', parameterPosition ));
	BatchInsertEnd( nodeCorrectParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', parameterPosition, 'echoed' ));
	BatchInsertEnd( nodeCorrectParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName4, 'notfinalized' ));
	BatchInsertEnd( nodeCorrectParameter.ScriptNodePostconditions, createDialogueAction0Arguments( 'reset_next_level' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeCorrectParameter );

	// Node - ImplicitDisagreement
	nodeName7 <- LiteralConcat( 'implicitdisagreement', suffix );	
	nodeImplicitDisagreement <- createScriptNode( nodeName7, 'execute', priorityLevel);
	BatchInsertEnd( nodeImplicitDisagreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', parameterPosition, 'rejected' ));
	BatchInsertEnd( nodeImplicitDisagreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', parameterPosition, 'empty' ));
	BatchInsertEnd( nodeImplicitDisagreement.ScriptNodePostconditions, createDialogueAction0Arguments( 'reset_next_level' ));
	BatchInsertEnd( nodeImplicitDisagreement.ScriptNodePostconditions, createDialogueAction0Arguments( 'delete_disagreement' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeImplicitDisagreement );

	// Node - ChangedFromGrounded
	nodeName8 <- LiteralConcat( 'changedfromgrounded', suffix );	
	nodeChanged <- createScriptNode( nodeName8, 'wait', priorityLevel);
	nodeChanged.ScriptNodeState.ScriptNodeResetStateName <- 'notfinalized';
	nodeChanged.ScriptNodeContent <- setNodeContent( 'question', 'propositional', 'confirmchanged', 'parameter' );
	BatchInsertEnd( nodeChanged.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', nodeName8, 'finalized' ));
	BatchInsertEnd( nodeChanged.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', parameterPosition, 'changed' ));
	BatchInsertEnd( nodeChanged.ScriptNodePostconditions, createDialogueAction1Arguments( 'swap_history', parameterPosition ));	
	BatchInsertEnd( nodeChanged.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', parameterPosition ));
	BatchInsertEnd( nodeChanged.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName8, 'finalized' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeChanged );

	// Node - ExplicitAgreement
	nodeName9 <- LiteralConcat( 'explicitagreement', suffix );	
	nodeExplicitAgreement <- createScriptNode( nodeName9, 'execute', priorityLevel);
	BatchInsertEnd( nodeExplicitAgreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName8, 'finalized' ));
	BatchInsertEnd( nodeExplicitAgreement.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'digested_core', 'basicanswer', 'disagreement' ));
	BatchInsertEnd( nodeExplicitAgreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', parameterPosition, 'grounded' ));
	BatchInsertEnd( nodeExplicitAgreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName8, 'notfinalized' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeExplicitAgreement );

	// Node - ExplicitDisagreement
	nodeName10 <- LiteralConcat( 'explicitdisagreement', suffix );	
	nodeExplicitDisagreement <- createScriptNode( nodeName10, 'execute', priorityLevel);
	BatchInsertEnd( nodeExplicitDisagreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName8, 'finalized' ));
	BatchInsertEnd( nodeExplicitDisagreement.ScriptNodePreconditions, createPrecondition2Arguments( 'digested_core', 'basicanswer', 'disagreement' ));
	BatchInsertEnd( nodeExplicitDisagreement.ScriptNodePostconditions, createDialogueAction1Arguments( 'swap_history', parameterPosition ));	
	BatchInsertEnd( nodeExplicitDisagreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', parameterPosition, 'captured' ));
	BatchInsertEnd( nodeExplicitDisagreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName8, 'notfinalized' ));
	BatchInsertEnd( nodeExplicitDisagreement.ScriptNodePostconditions, createDialogueAction0Arguments( 'delete_disagreement' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeExplicitDisagreement );

	return dialogueScript;
}

DialogueScript proposeInfoItem1(DialogueScript dialogueScript, int priorityLevel, ParameterType targetParameterType, string backOfficeFunctionName, ParameterType arg1ParameterType)
{
	ScriptNode nodePropose, nodeIncorrect;

	string suffix = '_';
	suffix <- LiteralConcat( suffix, ShapeToString(targetParameterType) );
	suffix <- LiteralConcat( suffix, '_' );
	suffix <- LiteralConcat( suffix, backOfficeFunctionName );
	suffix <- LiteralConcat( suffix, '_' );
	suffix <- LiteralConcat( suffix, ShapeToString(arg1ParameterType) );
	suffix <- LiteralConcat( suffix, '_' );
	suffix <- LiteralConcat( suffix, ShapeToString(priorityLevel) );
	string nodeName1, nodeName2;
	string targetParameterPosition <- recoverParameterPosition(dialogueScript, targetParameterType);
	string arg1ParameterPosition <- recoverParameterPosition(dialogueScript, arg1ParameterType);

	// Node - ProposeInfoItem1
	nodeName1 <- LiteralConcat( 'proposeinfoitem1', suffix );	
	nodePropose <- createScriptNode(nodeName1 , 'execute', priorityLevel );
	nodePropose.ScriptNodeState.ScriptNodeResetStateName <- 'notfinalized';
	BatchInsertEnd( nodePropose.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName1, 'notfinalized' ));
	BatchInsertEnd( nodePropose.ScriptNodePostconditions, createDialogueAction3Arguments( 'propose_info_item1', targetParameterPosition, backOfficeFunctionName, arg1ParameterPosition ));
	BatchInsertEnd( nodePropose.ScriptNodePostconditions, createDialogueAction0Arguments( 'reset_next_level' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodePropose );
	
	// Node - Incorrect
	nodeName2 <- LiteralConcat( 'proposeinfoitem1_incorrect', suffix );	
	nodeIncorrect <- createScriptNode(nodeName2 , 'execute', priorityLevel );
	nodeIncorrect.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'incorrect', 'backoffice' );
	BatchInsertEnd( nodeIncorrect.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName1, 'incorrect' ));
	BatchInsertEnd( nodeIncorrect.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeIncorrect.ScriptNodePostconditions, createDialogueAction0Arguments( 'pull_script' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeIncorrect );

	return dialogueScript;
}

DialogueScript executeBackOffice1(DialogueScript dialogueScript, int priorityLevel, string backOfficeFunctionName, ParameterType arg1ParameterType)
{
	ScriptNode nodePropose, nodeIncorrect;

	string suffix = '_';
	suffix <- LiteralConcat( suffix, backOfficeFunctionName );
	suffix <- LiteralConcat( suffix, '_' );
	suffix <- LiteralConcat( suffix, ShapeToString(arg1ParameterType) );
	suffix <- LiteralConcat( suffix, '_' );
	suffix <- LiteralConcat( suffix, ShapeToString(priorityLevel) );
	string nodeName1, nodeName2;
	string arg1ParameterPosition <- recoverParameterPosition(dialogueScript, arg1ParameterType);

	// Node - ExecuteBackOffice1
	nodeName1 <- LiteralConcat( 'executebackoffice1', suffix );	
	nodePropose <- createScriptNode(nodeName1 , 'execute', priorityLevel );
	nodePropose.ScriptNodeState.ScriptNodeResetStateName <- 'notfinalized';
	BatchInsertEnd( nodePropose.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName1, 'notfinalized' ));
	BatchInsertEnd( nodePropose.ScriptNodePostconditions, createDialogueAction2Arguments( 'execute_backoffice_1', backOfficeFunctionName, arg1ParameterPosition ));
	BatchInsertEnd( nodePropose.ScriptNodePostconditions, createDialogueAction0Arguments( 'reset_next_level' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodePropose );
	
	// Node - Incorrect
	nodeName2 <- LiteralConcat( 'executebackoffice1_incorrect', suffix );	
	nodeIncorrect <- createScriptNode(nodeName2 , 'execute', priorityLevel );
	nodeIncorrect.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'incorrect', 'backoffice' );
	BatchInsertEnd( nodeIncorrect.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName1, 'incorrect' ));
	BatchInsertEnd( nodeIncorrect.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeIncorrect.ScriptNodePostconditions, createDialogueAction0Arguments( 'pull_script' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeIncorrect );
	
	return dialogueScript;
}

DialogueScript executeBackOffice2(DialogueScript dialogueScript, int priorityLevel, string backOfficeFunctionName, ParameterType arg1ParameterType, ParameterType arg2ParameterType)
{
	ScriptNode nodePropose, nodeIncorrect;

	string suffix = '_';
	suffix <- LiteralConcat( suffix, backOfficeFunctionName );
	suffix <- LiteralConcat( suffix, '_' );
	suffix <- LiteralConcat( suffix, ShapeToString(arg1ParameterType) );
	suffix <- LiteralConcat( suffix, '_' );
	suffix <- LiteralConcat( suffix, ShapeToString(arg2ParameterType) );
	suffix <- LiteralConcat( suffix, '_' );
	suffix <- LiteralConcat( suffix, ShapeToString(priorityLevel) );
	string nodeName1, nodeName2;
	string arg1ParameterPosition <- recoverParameterPosition(dialogueScript, arg1ParameterType);
	string arg2ParameterPosition <- recoverParameterPosition(dialogueScript, arg2ParameterType);

	// Node - ExecuteBackOffice2
	nodeName1 <- LiteralConcat( 'executebackoffice2', suffix );	
	nodePropose <- createScriptNode(nodeName1 , 'execute', priorityLevel );
	nodePropose.ScriptNodeState.ScriptNodeResetStateName <- 'notfinalized';
	BatchInsertEnd( nodePropose.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName1, 'notfinalized' ));
	BatchInsertEnd( nodePropose.ScriptNodePostconditions, createDialogueAction3Arguments( 'execute_backoffice_2', backOfficeFunctionName, arg1ParameterPosition, arg2ParameterPosition ));
	BatchInsertEnd( nodePropose.ScriptNodePostconditions, createDialogueAction0Arguments( 'reset_next_level' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodePropose );
	
	// Node - Incorrect
	nodeName2 <- LiteralConcat( 'executebackoffice2_incorrect', suffix );	
	nodeIncorrect <- createScriptNode(nodeName2 , 'execute', priorityLevel );
	nodeIncorrect.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'incorrect', 'backoffice' );
	BatchInsertEnd( nodeIncorrect.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName1, 'incorrect' ));
	BatchInsertEnd( nodeIncorrect.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeIncorrect.ScriptNodePostconditions, createDialogueAction0Arguments( 'pull_script' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeIncorrect );
	
	return dialogueScript;
}

DialogueScript informExplicitParameter( DialogueScript dialogueScript, int priorityLevel, ParameterType parameterType)
{
	ScriptNode nodeInform;

	string suffix = '_';
	suffix <- LiteralConcat( suffix, ShapeToString(parameterType) );
	suffix <- LiteralConcat( suffix, '_' );
	suffix <- LiteralConcat( suffix, ShapeToString(priorityLevel) );
	string nodeName1;
	string parameterPosition <- recoverParameterPosition(dialogueScript, parameterType);

	// Node - InformExplicit
	nodeName1 <- LiteralConcat( 'informexplicitparameter', suffix );	
	nodeInform <- createScriptNode( nodeName1 , 'execute', priorityLevel );
	nodeInform.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'explicit', 'parameter' );
	nodeInform.ScriptNodeState.ScriptNodeResetStateName <- 'notfinalized';
	BatchInsertEnd( nodeInform.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName1, 'notfinalized' ));
	BatchInsertEnd( nodeInform.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', parameterPosition ));
	BatchInsertEnd( nodeInform.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName1, 'finalized' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeInform );

	return dialogueScript;
}

DialogueScript endScript(DialogueScript dialogueScript, int priorityLevel)
{
	ScriptNode nodeEnd;

	// Node - End
	string nodeName1;
	nodeEnd <- createScriptNode('end_node' , 'execute', priorityLevel );

	BatchInsertEnd( nodeEnd.ScriptNodePostconditions, createDialogueAction0Arguments( 'pull_script' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeEnd );

	return dialogueScript;
}

DialogueScript informExplicit(DialogueScript dialogueScript, int priorityLevel, string dimension, string function, string action, string scope)
{
	ScriptNode nodeInform;

	string suffix = '_';
	suffix <- LiteralConcat( suffix, dimension );
	suffix <- LiteralConcat( suffix, '_' );
	suffix <- LiteralConcat( suffix, function );
	suffix <- LiteralConcat( suffix, '_' );
	suffix <- LiteralConcat( suffix, action );
	suffix <- LiteralConcat( suffix, '_' );
	suffix <- LiteralConcat( suffix, scope );
	suffix <- LiteralConcat( suffix, '_' );
	suffix <- LiteralConcat( suffix, ShapeToString(priorityLevel) );

	string nodeName1;

	// Node - InformExplicit
	nodeName1 <- LiteralConcat( 'informexplicit', suffix );	
	nodeInform <- createScriptNode( nodeName1 , 'execute', priorityLevel );
	nodeInform.ScriptNodeContent <- setNodeContent( dimension, function, action, scope );
	nodeInform.ScriptNodeState.ScriptNodeResetStateName <- 'notfinalized';
	BatchInsertEnd( nodeInform.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName1, 'notfinalized' ));
	BatchInsertEnd( nodeInform.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeInform.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName1, 'finalized' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeInform );

	return dialogueScript;
}

string recoverParameterPosition(DialogueScript dialogueScript, ParameterType parameterType)
{
	ScriptInfoItem scriptInfoItem;

	int size <- BatchSize( dialogueScript.ScriptInfoItems );
	for( int position <- 1; position <= size; position++)
	{
		BatchRecoverPosition(dialogueScript.ScriptInfoItems, position, scriptInfoItem);
		if( scriptInfoItem.InfoItemParameterType == parameterType )
		{
			return ShapeToString( position );
		}
	}
}

DialogueScript negotiateParameter3(DialogueScript dialogueScript, int priorityLevel, ParameterType targetParameterType, string backOfficeFunctionName, ParameterType arg1ParameterType, ParameterType arg2ParameterType, ParameterType arg3ParameterType)
{
	ScriptNode nodeNegotiate, nodeIncorrect, nodeCorrect, nodeAgreement, nodeNotAgreement, nodeDisagreement, nodeOverCounter;

	string suffix = '_';
	suffix <- LiteralConcat( suffix, ShapeToString(targetParameterType) );
	suffix <- LiteralConcat( suffix, '_' );
	suffix <- LiteralConcat( suffix, backOfficeFunctionName );
	suffix <- LiteralConcat( suffix, '_' );
	suffix <- LiteralConcat( suffix, ShapeToString(arg1ParameterType) );
	suffix <- LiteralConcat( suffix, '_' );
	suffix <- LiteralConcat( suffix, ShapeToString(arg2ParameterType) );
	suffix <- LiteralConcat( suffix, '_' );
	suffix <- LiteralConcat( suffix, ShapeToString(arg3ParameterType) );
	suffix <- LiteralConcat( suffix, '_' );
	suffix <- LiteralConcat( suffix, ShapeToString(priorityLevel) );

	string nodeName1, nodeName2, nodeName3, nodeName4, nodeName5, nodeName6, nodeName7;
	string targetParameterPosition <- recoverParameterPosition(dialogueScript, targetParameterType);
	string arg1ParameterPosition <- recoverParameterPosition(dialogueScript, arg1ParameterType);
	string arg2ParameterPosition <- recoverParameterPosition(dialogueScript, arg2ParameterType);
	string arg3ParameterPosition <- recoverParameterPosition(dialogueScript, arg3ParameterType);

	// Node - NegotiateInfoItem3
	nodeName1 <- LiteralConcat( 'negotiateinfoitem3', suffix );	
	nodeNegotiate <- createScriptNode(nodeName1 , 'execute', priorityLevel );
	nodeNegotiate.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'negotiate', 'parameter' );
	nodeNegotiate.ScriptNodeState.ScriptNodeResetStateName <- 'notfinalized';
	BatchInsertEnd( nodeNegotiate.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', nodeName1, 'correct' ));
	BatchInsertEnd( nodeNegotiate.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', nodeName1, 'incorrect' ));
	BatchInsertEnd( nodeNegotiate.ScriptNodePostconditions, createDialogueAction0Arguments( 'reset_echoed_items' ));
	BatchInsertEnd( nodeNegotiate.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', targetParameterPosition ));
	BatchInsertEnd( nodeNegotiate.ScriptNodePostconditions, createDialogueAction5Arguments( 'negotiate_info_item3', targetParameterPosition, backOfficeFunctionName, arg1ParameterPosition, arg2ParameterPosition, arg3ParameterPosition ));
	BatchInsertEnd( nodeNegotiate.ScriptNodePostconditions, createDialogueAction0Arguments( 'reset_next_level' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeNegotiate );
	
	// Node - Incorrect
	nodeName2 <- LiteralConcat( 'negotiateinfoitem3_incorrect', suffix );	
	nodeIncorrect <- createScriptNode(nodeName2 , 'execute', priorityLevel );
	nodeIncorrect.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'incorrect', 'backoffice' );
	BatchInsertEnd( nodeIncorrect.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName1, 'incorrect' ));
	BatchInsertEnd( nodeIncorrect.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeIncorrect.ScriptNodePostconditions, createDialogueAction0Arguments( 'pull_script' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeIncorrect );

	// Node - Correct
	nodeName3 <- LiteralConcat( 'negotiateinfoitem3_correct', suffix );	
	nodeCorrect <- createScriptNode(nodeName3 , 'wait', priorityLevel );
	nodeCorrect.ScriptNodeState.ScriptNodeResetStateName <- 'notfinalized';
	nodeCorrect.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'explicit', 'parameter' );
	BatchInsertEnd( nodeCorrect.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', nodeName3, 'finalized' ));
	BatchInsertEnd( nodeCorrect.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName1, 'correct' ));
	BatchInsertEnd( nodeCorrect.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_counter_leq', nodeName3, ShapeToString(NUMBER_OF_QUESTIONS_BEFORE_ABORTING - 1) ));
	BatchInsertEnd( nodeCorrect.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', targetParameterPosition ));
	BatchInsertEnd( nodeCorrect.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName3, 'finalized' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeCorrect );

	// Node - OverCounterParameter
	nodeName7 <- LiteralConcat( 'overcounternegotiate', suffix );	
	nodeOverCounter <- createScriptNode( nodeName7, 'execute', priorityLevel );
	nodeOverCounter.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'cancel', 'task' );
	BatchInsertEnd( nodeOverCounter.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_counter_leq', nodeName3, ShapeToString(NUMBER_OF_QUESTIONS_BEFORE_ABORTING - 1) ));
	BatchInsertEnd( nodeOverCounter.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeOverCounter.ScriptNodePostconditions, createDialogueAction0Arguments( 'delete_disagreement' ));
	BatchInsertEnd( nodeOverCounter.ScriptNodePostconditions, createDialogueAction0Arguments( 'pull_script' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeOverCounter );

	// Node - ExplicitAgreement
	nodeName4 <- LiteralConcat( 'explicitagreement', suffix );	
	nodeAgreement <- createScriptNode( nodeName4, 'execute', priorityLevel );
	nodeAgreement.ScriptNodeState.ScriptNodeResetStateName <- 'notfinalized';
	nodeAgreement.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'confirm', 'agreement' );
	BatchInsertEnd( nodeAgreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName3, 'finalized' ));
	BatchInsertEnd( nodeAgreement.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', nodeName4, 'finalized' ));
	BatchInsertEnd( nodeAgreement.ScriptNodePreconditions, createPrecondition2Arguments( 'digested_core', 'basicanswer', 'agreement' ));
	BatchInsertEnd( nodeAgreement.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeAgreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName4, 'finalized' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeAgreement );

	// Node - NotExplicitAgreement
	nodeName5 <- LiteralConcat( 'explicitnotagreement', suffix );	
	nodeNotAgreement <- createScriptNode( nodeName5, 'execute', priorityLevel );
	nodeNotAgreement.ScriptNodeState.ScriptNodeResetStateName <- 'notfinalized';
	nodeNotAgreement.ScriptNodeContent <- setNodeContent( 'social', 'apology', 'not', 'understand' );
	BatchInsertEnd( nodeNotAgreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName3, 'finalized' ));
	BatchInsertEnd( nodeNotAgreement.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', nodeName4, 'finalized' ));
	BatchInsertEnd( nodeNotAgreement.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'digested_core', 'basicanswer', 'agreement' ));
	BatchInsertEnd( nodeNotAgreement.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'digested_core', 'basicanswer', 'disagreement' ));
	BatchInsertEnd( nodeNotAgreement.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeNotAgreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName3, 'notfinalized' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeNotAgreement );

	// Node - ExplicitDisagreement
	nodeName6 <- LiteralConcat( 'explicitdisagreement', suffix );	
	nodeDisagreement <- createScriptNode( nodeName6, 'execute', priorityLevel );
	nodeDisagreement.ScriptNodeState.ScriptNodeResetStateName <- 'notfinalized';
	nodeDisagreement.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'confirm', 'disagreement' );
	BatchInsertEnd( nodeDisagreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName3, 'finalized' ));
	BatchInsertEnd( nodeDisagreement.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', nodeName4, 'finalized' ));
	BatchInsertEnd( nodeDisagreement.ScriptNodePreconditions, createPrecondition2Arguments( 'digested_core', 'basicanswer', 'disagreement' ));
	BatchInsertEnd( nodeDisagreement.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeDisagreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName3, 'notfinalized' ));
	BatchInsertEnd( nodeDisagreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', targetParameterPosition, 'empty' ));
	BatchInsertEnd( nodeDisagreement.ScriptNodePostconditions, createDialogueAction0Arguments( 'reset_current_level' ));
	BatchInsertEnd( nodeDisagreement.ScriptNodePostconditions, createDialogueAction0Arguments( 'delete_disagreement' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeDisagreement );

	return dialogueScript;
}


DialogueScript informExplicitParameters3(DialogueScript dialogueScript, int priorityLevel, ParameterType arg1ParameterType, ParameterType arg2ParameterType, ParameterType arg3ParameterType)
{
	ScriptNode nodeInform;

	string suffix = '_';
	suffix <- LiteralConcat( suffix, ShapeToString(priorityLevel) );

	string nodeName1;
	string arg1ParameterPosition <- recoverParameterPosition(dialogueScript, arg1ParameterType);
	string arg2ParameterPosition <- recoverParameterPosition(dialogueScript, arg2ParameterType);
	string arg3ParameterPosition <- recoverParameterPosition(dialogueScript, arg3ParameterType);

	// Node - InformExplicit
	nodeName1 <- LiteralConcat( 'informexplicitparameters', suffix );	
	nodeInform <- createScriptNode( nodeName1 , 'execute', priorityLevel );
	nodeInform.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'explicit', 'parameters' );
	nodeInform.ScriptNodeState.ScriptNodeResetStateName <- 'notfinalized';
	BatchInsertEnd( nodeInform.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName1, 'notfinalized' ));
	BatchInsertEnd( nodeInform.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName1, 'finalized' ));
	BatchInsertEnd( nodeInform.ScriptNodePostconditions, createDialogueAction3Arguments( 'generate_3_parameter', arg1ParameterPosition, arg2ParameterPosition, arg3ParameterPosition ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeInform );

	return dialogueScript;
}


