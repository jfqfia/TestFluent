// **************************************************
//
//	
//
// **************************************************
//
//	PROJECT	:	
//	MODULE  :	
//	PACKAGE :	
//	FILE	:	
//
// **************************************************

procedure executeProcedureDialogueAction( DialogueAction dialogueAction )
{
	if(dialogueAction.DialogueActionName == 'set_node_state')
	{
		string node, state;
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, node );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 2, state );
		setNodeStateToCurrent(node, state);
	}
	else if(dialogueAction.DialogueActionName == 'pull_script')
	{
		pullScript();
	}
	else if(dialogueAction.DialogueActionName == 'propose_info_item3')
	{
		string targetInfoItem, backOfficeFunction, argumentInfoItem1, argumentInfoItem2, argumentInfoItem3;
		DialogueActionArguments arguments;		

		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, targetInfoItem );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 2, backOfficeFunction );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 3, argumentInfoItem1 );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 4, argumentInfoItem2 );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 5, argumentInfoItem3 );

		BatchInsertEnd( arguments, argumentInfoItem1 );
		BatchInsertEnd( arguments, argumentInfoItem2 );
		BatchInsertEnd( arguments, argumentInfoItem3 );

		proposeInfoItem(targetInfoItem, backOfficeFunction, arguments);
	}
	else if(dialogueAction.DialogueActionName == 'propose_info_item1')
	{
		string targetInfoItem, backOfficeFunction, argumentInfoItem1;
		DialogueActionArguments arguments;		

		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, targetInfoItem );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 2, backOfficeFunction );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 3, argumentInfoItem1 );

		BatchInsertEnd( arguments, argumentInfoItem1 );

		proposeInfoItem(targetInfoItem, backOfficeFunction, arguments);
	}
	else if(dialogueAction.DialogueActionName == 'generate')
	{
		generate();
	}
	else if(dialogueAction.DialogueActionName == 'generate_parameter')
	{
		string parameterString;
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, parameterString );
		generateParameter(parameterString);
	}
	else if(dialogueAction.DialogueActionName == 'check_parameter')
	{
		string parameterString;
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, parameterString );
		checkParameter(parameterString);
	}
	else if(dialogueAction.DialogueActionName == 'set_info_state')
	{
		string infoString, state;
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, infoString );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 2, state );
		setInfoState(infoString, state);
	}
	else if(dialogueAction.DialogueActionName == 'set_expectative_dimension')
	{
		string state;
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, state );
		setExpectativeDimension( state );
	}
	else if(dialogueAction.DialogueActionName == 'set_expectative_parameter')
	{
		string state;
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, state );
		setExpectativeParameter( state );
	}
	else
	{
		SpyMessage("");
		SpyMessage("");
		SpyMessage("Dialogue Action ", dialogueAction.DialogueActionName, "not implemented (Procedure)");
		SpyMessage("");
		SpyMessage("");
	}
}

procedure setExpectativeDimension( string dimensionString )
{
	Dimension dimension <- ShapeToRange( dimensionString );
	DialogueScript script <- getCurrentScript();
	script.ScriptExpectative.ProferenceChunk.CoreDialogueAct.Dimension <- dimension;
	Function emptyFunction;
	script.ScriptExpectative.ProferenceChunk.CoreDialogueAct.Function <- emptyFunction;
	script.ScriptExpectative.ProferenceChunk.TaskDialogueAct.Scope <- 'unknown';
	script.ScriptExpectative.ProferenceChunk.Parameter.ParameterType <- 'unknown';

	setScript(script);
}

procedure setExpectativeParameter( string parameterType )
{
	DialogueScript script <- getCurrentScript();
	script.ScriptExpectative.ParameterType <- parameterType;

	setScript(script);
}

procedure setNodeStateToCurrent(string nodeDescriptor, string state)
{
	setNodeState( $MINDBOARD@DialogueState.CurrentScriptDescriptor, nodeDescriptor, state );
}

procedure setNodeState(string scriptDescriptor, string nodeDescriptor, string state)
{
	DialogueScript script;
	ScriptNode node;

	script <- getScript(scriptDescriptor);
	node <- getNodeFromScript(script, nodeDescriptor );	
	node.ScriptNodeState.ScriptNodeStateName <- ShapeToRange(state);

	setNodeToScript(script, node);
}

procedure proposeInfoItem(string targetInfoItem, string backOfficeFunction, DialogueActionArguments arguments)
{
	DialogueScript script;
	int argumentNumber, returnNumber;
	ScriptInfoItem scriptInfoItem;
	Parameters parameters;
	Parameter returnedParameter, parameter;
	string argumentInfoItem;

	// Extract parameters
	script <- getCurrentScript();
	int size <- BatchSize( arguments );
	for( int position <- 1; position <= size; position++ )
	{
		BatchRecoverPosition( arguments, position, argumentInfoItem );
		argumentNumber <- ShapeToInt( argumentInfoItem );
		BatchRecoverPosition( script.ScriptInfoItems, argumentNumber, scriptInfoItem );
		parameter <- scriptInfoItem.InfoItemValue.Parameter;
		BatchInsertEnd( parameters, parameter );
	}

	// Execute backoffice function
	returnedParameter <- executeBackOfficeFunction(backOfficeFunction, parameters);

	// Set the returned parameter
	returnNumber <- ShapeToInt( targetInfoItem );
	BatchRecoverPosition( script.ScriptInfoItems, returnNumber, scriptInfoItem );
	scriptInfoItem.InfoItemValue.Parameter <- returnedParameter;

	// TODO Si no estaba vacío cambiar al history
	scriptInfoItem.InfoItemState <- 'proposed';

	BatchAssignPosition( script.ScriptInfoItems, returnNumber, scriptInfoItem );
	setScript( script );
}

procedure generate()
{
	ScriptNode currentNode;
	
	currentNode <- getCurrentNode();
	BatchInsertEnd( $MINDBOARD@DialogueOutput.DialogueActs, currentNode.ScriptNodeContent.DialogueAct );
}

procedure generateParameter(string parameterString)
{
	ScriptNode currentNode <- getCurrentNode();
	DialogueAct dialogueAct <- currentNode.ScriptNodeContent.DialogueAct;

	int infoNumber <- ShapeToInt( parameterString );
	DialogueScript script <- getCurrentScript();
	ScriptInfoItem scriptInfoItem;
	BatchRecoverPosition( script.ScriptInfoItems, infoNumber , scriptInfoItem );
	Parameter parameter <- scriptInfoItem.InfoItemValue.Parameter; 

	BatchInsertEnd( dialogueAct.Parameters, parameter );
	BatchInsertEnd( $MINDBOARD@DialogueOutput.DialogueActs, dialogueAct );
}

procedure checkParameter(string parameterString)
{
	ScriptNode currentNode <- getCurrentNode();
	int infoNumber <- ShapeToInt( parameterString );
	DialogueScript script <- getCurrentScript();
	ScriptInfoItem scriptInfoItem;
	BatchRecoverPosition( script.ScriptInfoItems, infoNumber , scriptInfoItem );
	Parameter parameter <- scriptInfoItem.InfoItemValue.Parameter; 

	// TODO Aquí hay más, debería ir dentro del dominio?
	bool correct;
	if(parameter.ParameterType == 'accountnumber')
	{
		correct <- checkAccountNumberValidity( parameter );
	}
	if(parameter.ParameterType == 'countryplace')
	{
		correct <- checkCountryPlaceValidity( parameter );
	}

	if( correct )
	{
		setNodeState( script.ScriptDescriptor, currentNode.ScriptNodeDescriptor, 'correct' );		
	}
	else
	{
		setNodeState( script.ScriptDescriptor, currentNode.ScriptNodeDescriptor, 'incorrect' );		
	}
}

procedure setInfoState(string infoString, string state)
{
	DialogueScript script;
	int infoNumber;
	InfoItemState infoItemState;
	ScriptInfoItem scriptInfoItem;

	script <- getCurrentScript();
	infoNumber <- ShapeToInt( infoString );
	infoItemState <- ShapeToRange( state );
	BatchRecoverPosition( script.ScriptInfoItems, infoNumber, scriptInfoItem );

	scriptInfoItem.InfoItemState <- infoItemState;

	BatchAssignPosition( script.ScriptInfoItems, infoNumber, scriptInfoItem );
	setScript( script );
}

procedure pullScript()
{
	string descriptor;
	
	BatchExtractEnd( $MINDBOARD@DialogueState.ActivatedScriptsStack, descriptor );

	DialogueScript recoveredDialogueScript <- removeFromWorkingDialogueScheme( descriptor );
	BatchInsertEnd( $MINDBOARD@DoneDialogueScheme.DialogueScripts, recoveredDialogueScript );

	recoveredDialogueScript <- getFromOriginalDialogueScheme( descriptor );
	BatchInsertEnd( $MINDBOARD@WorkingDialogueScheme.DialogueScripts, recoveredDialogueScript );
}





