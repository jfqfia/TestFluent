// ****************************************************************************
//
//	Functions related with scripts nodes activation ans its postconditions
//
// ****************************************************************************
//
//	PROJECT	: Fluency
// 	DOMAIN  : Kernel
//	MODULE  : DialogueManager
//	PACKAGE	: Functions
// 	FOLDER  : -
// 	FILE	: ProcedureDialogueAction
//
// ****************************************************************************

procedure executeProcedureDialogueAction( DialogueAction dialogueAction )
{
	if(dialogueAction.DialogueActionName == 'set_node_state')
	{
		string node, state;
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, node );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 2, state );
		setNodeStateToCurrent(node, state);
	}
	else if(dialogueAction.DialogueActionName == 'set_node_state_of_script')
	{
		string script, node, state;
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, script );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 2, node );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 3, state );
		setNodeState(script, node, state);
	}
	else if(dialogueAction.DialogueActionName == 'set_info_value_of_script')
	{
		string script, info, value;
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, script );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 2, info );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 3, value );
		setInfoValueScript(script, info, value);
	}
	else if(dialogueAction.DialogueActionName == 'clear_info_value_of_script')
	{
		string script, info;
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, script );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 2, info );
		clearInfoValueScript(script, info);
	}
	else if(dialogueAction.DialogueActionName == 'set_info_state_of_script')
	{
		string script, info, state;
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, script );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 2, info );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 3, state );
		setInfoStateScript(script, info, state);
	}
	else if(dialogueAction.DialogueActionName == 'set_counter')
	{
		string node, number;
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, node );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 2, number );
		setNodeCounter(node, number);
	}
	else if(dialogueAction.DialogueActionName == 'push_script_1')
	{
		string script, parameter;
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, script );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 2, parameter );
		pushScript1(script, parameter);
	}
	else if(dialogueAction.DialogueActionName == 'pull_script')
	{
		pullScript();
	}
	else if(dialogueAction.DialogueActionName == 'pull_script_fast')
	{
		pullScriptFast();
	}
	else if(dialogueAction.DialogueActionName == 'generate_wd_choices')
	{
		generateWeakDisambiguatorChoices();
	}
	else if(dialogueAction.DialogueActionName == 'make_wd_choices')
	{
		makeWeakDisambiguatorChoices();
	}
	else if(dialogueAction.DialogueActionName == 'generate_sd_choices')
	{
		generateStrongDisambiguatorChoices();
	}
	else if(dialogueAction.DialogueActionName == 'make_sd_choices')
	{
		makeStrongDisambiguatorChoices();
	}
	else if(dialogueAction.DialogueActionName == 'delete_disagreement')
	{
		deleteDisagreement();
	}
	else if(dialogueAction.DialogueActionName == 'negotiate_info_item3')
	{
		string targetInfoItem, backOfficeFunction, argumentInfoItem1, argumentInfoItem2, argumentInfoItem3;
		DialogueActionArguments arguments;		

		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, targetInfoItem );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 2, backOfficeFunction );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 3, argumentInfoItem1 );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 4, argumentInfoItem2 );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 5, argumentInfoItem3 );

		BatchInsertEnd( arguments, argumentInfoItem1 );
		BatchInsertEnd( arguments, argumentInfoItem2 );
		BatchInsertEnd( arguments, argumentInfoItem3 );

		negotiateInfoItem(targetInfoItem, backOfficeFunction, arguments);
	}
	else if(dialogueAction.DialogueActionName == 'propose_info_item3')
	{
		string targetInfoItem, backOfficeFunction, argumentInfoItem1, argumentInfoItem2, argumentInfoItem3;
		DialogueActionArguments arguments;		

		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, targetInfoItem );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 2, backOfficeFunction );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 3, argumentInfoItem1 );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 4, argumentInfoItem2 );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 5, argumentInfoItem3 );

		BatchInsertEnd( arguments, argumentInfoItem1 );
		BatchInsertEnd( arguments, argumentInfoItem2 );
		BatchInsertEnd( arguments, argumentInfoItem3 );

		proposeInfoItem(targetInfoItem, backOfficeFunction, arguments);
	}
	else if(dialogueAction.DialogueActionName == 'propose_info_item1')
	{
		string targetInfoItem, backOfficeFunction, argumentInfoItem1;
		DialogueActionArguments arguments;		

		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, targetInfoItem );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 2, backOfficeFunction );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 3, argumentInfoItem1 );

		BatchInsertEnd( arguments, argumentInfoItem1 );

		proposeInfoItem(targetInfoItem, backOfficeFunction, arguments);
	}
	else if(dialogueAction.DialogueActionName == 'execute_backoffice_2')
	{
		string backOfficeFunction, argumentInfoItem1, argumentInfoItem2;
		DialogueActionArguments arguments;		

		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, backOfficeFunction );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 2, argumentInfoItem1 );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 3, argumentInfoItem2 );

		BatchInsertEnd( arguments, argumentInfoItem1 );
		BatchInsertEnd( arguments, argumentInfoItem2 );

		executeBackOffice(backOfficeFunction, arguments);
	}
	else if(dialogueAction.DialogueActionName == 'execute_backoffice_1')
	{
		string backOfficeFunction, argumentInfoItem1;
		DialogueActionArguments arguments;		

		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, backOfficeFunction );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 2, argumentInfoItem1 );

		BatchInsertEnd( arguments, argumentInfoItem1 );

		executeBackOffice(backOfficeFunction, arguments);
	}
	else if(dialogueAction.DialogueActionName == 'generate')
	{
		generate();
	}
	else if(dialogueAction.DialogueActionName == 'generate_parameter')
	{
		string parameterString;
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, parameterString );
		generateParameter(parameterString);
	}
	else if(dialogueAction.DialogueActionName == 'generate_history_parameter')
	{
		string parameterString;
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, parameterString );
		generateHistoryParameter(parameterString);
	}
	else if(dialogueAction.DialogueActionName == 'unroll_parameter')
	{
		string parameterString;
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, parameterString );
		unrollParameter(parameterString);
	}
	else if(dialogueAction.DialogueActionName == 'swap_history')
	{
		string parameterString;
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, parameterString );
		swapHistory(parameterString);
	}
	else if(dialogueAction.DialogueActionName == 'check_parameter')
	{
		string parameterString;
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, parameterString );
		checkParameter(parameterString);
	}
	else if(dialogueAction.DialogueActionName == 'check_parameter_intersentential')
	{
		string parameterString;
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, parameterString );
		checkParameterIntersentential(parameterString);
	}
	else if(dialogueAction.DialogueActionName == 'set_info_state')
	{
		string infoString, state;
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, infoString );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 2, state );
		setInfoState(infoString, state);
	}
	else if(dialogueAction.DialogueActionName == 'generate_2_parameter')
	{
		string parameterString1, parameterString2;
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, parameterString1 );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 2, parameterString2 );
		generate2Parameter(parameterString1, parameterString2);
	}
	else if(dialogueAction.DialogueActionName == 'generate_3_parameter')
	{
		string parameterString1, parameterString2, parameterString3;
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, parameterString1 );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 2, parameterString2 );
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 3, parameterString3 );
		generate3Parameter(parameterString1, parameterString2, parameterString3);
	}
	else if(dialogueAction.DialogueActionName == 'set_expectative_parameter')
	{
		string state;
		BatchRecoverPosition( dialogueAction.DialogueActionArguments, 1, state );
		setExpectativeParameter( state );
	}
	else if(dialogueAction.DialogueActionName == 'reset_next_level')
	{
		resetNextLevel();
	}
	else if(dialogueAction.DialogueActionName == 'reset_current_level')
	{
		resetCurrentLevel();
	}
	else if(dialogueAction.DialogueActionName == 'reset_echoed_items')
	{
		resetEchoedItems();
	}
	else
	{
		SpyMessage("");
		SpyMessage("");
		SpyMessage("Dialogue Action ", dialogueAction.DialogueActionName, " not implemented (Procedure)");
		SpyMessage("");
		SpyMessage("");
	}
}

procedure pushScript1(string scriptName, string parameter)
{
	if(scriptName == 'capture_intersentential_parameter')
	{
		pushCaptureIntersententialParameter(parameter);
	}
}

procedure setExpectativeParameter( string parameterType )
{
	DialogueScript script <- getCurrentScript();
	script.ScriptExpectative.ParameterType <- parameterType;

	setScript(script);
}

procedure setNodeStateToCurrent(string nodeDescriptor, string state)
{
	setNodeState( $MINDBOARD@DialogueState.CurrentScriptDescriptor, nodeDescriptor, state );
}

procedure setInfoValueScript(string scriptDescriptor, string infoString, string valueString)
{
	DialogueScript script, currentScript;
	ScriptInfoItem scriptInfoItem, recoveredScriptInfoItem;
	int infoNumber <- ShapeToInt(infoString);
	int valueNumber <- ShapeToInt(valueString);

	script <- getScript(scriptDescriptor);
	currentScript <- getCurrentScript();

	BatchRecoverPosition( script.ScriptInfoItems, infoNumber, scriptInfoItem );
	BatchRecoverPosition( currentScript.ScriptInfoItems, valueNumber, recoveredScriptInfoItem );
	scriptInfoItem.InfoItemValue <- recoveredScriptInfoItem.InfoItemValue;

	BatchAssignPosition( script.ScriptInfoItems, infoNumber, scriptInfoItem );
	setScript( script );
}

procedure clearInfoValueScript(string scriptDescriptor, string infoString)
{
	DialogueScript script;
	ScriptInfoItem scriptInfoItem;
	int infoNumber <- ShapeToInt(infoString);

	script <- getScript(scriptDescriptor);

	BatchRecoverPosition( script.ScriptInfoItems, infoNumber, scriptInfoItem );
	InfoItemValue emptyInfoItemValue;
	scriptInfoItem.InfoItemValue <- emptyInfoItemValue;

	BatchAssignPosition( script.ScriptInfoItems, infoNumber, scriptInfoItem );
	setScript( script );
}

procedure setInfoStateScript(string scriptDescriptor, string infoString, string stateString)
{
	DialogueScript script, currentScript;
	ScriptInfoItem scriptInfoItem, recoveredScriptInfoItem;
	int infoNumber <- ShapeToInt(infoString);

	script <- getScript(scriptDescriptor);

	BatchRecoverPosition( script.ScriptInfoItems, infoNumber, scriptInfoItem );

	scriptInfoItem.InfoItemState <- ShapeToRange(stateString);
	scriptInfoItem.InfoItemMoveState <- 'marked';

	BatchAssignPosition( script.ScriptInfoItems, infoNumber, scriptInfoItem );
	setScript( script );
}

procedure setNodeState(string scriptDescriptor, string nodeDescriptor, string state)
{
	DialogueScript script;
	ScriptNode node;

	script <- getScript(scriptDescriptor);
	node <- getNodeFromScript(script, nodeDescriptor );	
	node.ScriptNodeState.ScriptNodeStateName <- ShapeToRange(state);

	setNodeToScript(script, node);
}

procedure setNodeCounter(string nodeDescriptor, string number)
{
	DialogueScript script;
	ScriptNode node;

	script <- getScript($MINDBOARD@DialogueState.CurrentScriptDescriptor);
	node <- getNodeFromScript(script, nodeDescriptor );
	node.ScriptNodeCounter <- ShapeToInt(number);

	setNodeToScript(script, node);
}

procedure negotiateInfoItem(string targetInfoItem, string backOfficeFunction, DialogueActionArguments arguments)
{
	DialogueScript script;
	int argumentNumber, returnNumber;
	ScriptInfoItem scriptInfoItem;
	Parameters parameters;
	Parameter returnedParameter, parameter;
	string argumentInfoItem;

	script <- getCurrentScript();

	// Extract history of target parameter
	InfoItemHistory history;
	BatchRecoverPosition( script.ScriptInfoItems, ShapeToInt( targetInfoItem ), scriptInfoItem );
	history <- scriptInfoItem.InfoItemHistory;

	// Extract parameters

	int size <- BatchSize( arguments );
	for( int position <- 1; position <= size; position++ )
	{
		BatchRecoverPosition( arguments, position, argumentInfoItem );
		argumentNumber <- ShapeToInt( argumentInfoItem );
		BatchRecoverPosition( script.ScriptInfoItems, argumentNumber, scriptInfoItem );
		parameter <- scriptInfoItem.InfoItemValue.Parameter;
		BatchInsertEnd( parameters, parameter );
	}

	// Execute backoffice function
	returnedParameter <- executeBackOfficeNegotiateFunction(backOfficeFunction, history, parameters);
	
	// Empty response if it's not possible to find a good appointment for the given datetime
	if(returnedParameter)
	{
		// Set the returned parameter
		returnNumber <- ShapeToInt( targetInfoItem );
		BatchRecoverPosition( script.ScriptInfoItems, returnNumber, scriptInfoItem );
		// Move to History
		if( scriptInfoItem.InfoItemValue.Parameter )
		{
			BatchInsertEnd( scriptInfoItem.InfoItemHistory, scriptInfoItem.InfoItemValue.Parameter );
		}
		scriptInfoItem.InfoItemValue.Parameter <- returnedParameter;
	
		scriptInfoItem.InfoItemState <- 'proposed';
		scriptInfoItem.InfoItemMoveState <- 'marked';

		ScriptNode currentNode <- getCurrentNode();
		setNodeState( script.ScriptDescriptor, currentNode.ScriptNodeDescriptor, 'correct' );		

		script <- getCurrentScript();
		BatchAssignPosition( script.ScriptInfoItems, returnNumber, scriptInfoItem );
		setScript( script );
	}
	else
	{
		ScriptNode currentNode <- getCurrentNode();
		setNodeState( script.ScriptDescriptor, currentNode.ScriptNodeDescriptor, 'incorrect' );		
	}
}

procedure proposeInfoItem(string targetInfoItem, string backOfficeFunction, DialogueActionArguments arguments)
{
	DialogueScript script;
	int argumentNumber, returnNumber;
	ScriptInfoItem scriptInfoItem;
	Parameters parameters;
	Parameter returnedParameter, parameter;
	string argumentInfoItem;

	// Extract parameters
	script <- getCurrentScript();
	int size <- BatchSize( arguments );
	for( int position <- 1; position <= size; position++ )
	{
		BatchRecoverPosition( arguments, position, argumentInfoItem );
		argumentNumber <- ShapeToInt( argumentInfoItem );
		BatchRecoverPosition( script.ScriptInfoItems, argumentNumber, scriptInfoItem );
		parameter <- scriptInfoItem.InfoItemValue.Parameter;
		BatchInsertEnd( parameters, parameter );
	}

	// Execute backoffice function
	returnedParameter <- executeBackOfficeFunction(backOfficeFunction, parameters);

	if(returnedParameter)
	{
		// Set the returned parameter
		returnNumber <- ShapeToInt( targetInfoItem );
		BatchRecoverPosition( script.ScriptInfoItems, returnNumber, scriptInfoItem );
		// Move to History
		if( scriptInfoItem.InfoItemValue.Parameter )
		{
			BatchInsertEnd( scriptInfoItem.InfoItemHistory, scriptInfoItem.InfoItemValue.Parameter );
		}
		scriptInfoItem.InfoItemValue.Parameter <- returnedParameter;
	
		scriptInfoItem.InfoItemState <- 'proposed';
		scriptInfoItem.InfoItemMoveState <- 'marked';

		ScriptNode currentNode <- getCurrentNode();
		setNodeState( script.ScriptDescriptor, currentNode.ScriptNodeDescriptor, 'correct' );		

		script <- getCurrentScript();
		BatchAssignPosition( script.ScriptInfoItems, returnNumber, scriptInfoItem );
		setScript( script );
	}
	else
	{
		ScriptNode currentNode <- getCurrentNode();
		setNodeState( script.ScriptDescriptor, currentNode.ScriptNodeDescriptor, 'incorrect' );		
	}
}

procedure executeBackOffice(string backOfficeFunction, DialogueActionArguments arguments)
{
	bool ret;
	DialogueScript script;
	int argumentNumber, returnNumber;
	ScriptInfoItem scriptInfoItem;
	Parameters parameters;
	Parameter parameter;
	string argumentInfoItem;

	// Extract parameters
	script <- getCurrentScript();
	int size <- BatchSize( arguments );
	for( int position <- 1; position <= size; position++ )
	{
		BatchRecoverPosition( arguments, position, argumentInfoItem );
		argumentNumber <- ShapeToInt( argumentInfoItem );
		BatchRecoverPosition( script.ScriptInfoItems, argumentNumber, scriptInfoItem );
		parameter <- scriptInfoItem.InfoItemValue.Parameter;
		BatchInsertEnd( parameters, parameter );
	}

	// Execute backoffice function
	ret <- executeBackOfficeBooleanFunction(backOfficeFunction, parameters);
	ScriptNode scriptNode <- getCurrentNode(); 

	if( ret )
	{
		 setNodeState(script.ScriptDescriptor, scriptNode.ScriptNodeDescriptor, 'correct');
	}
	else
	{
		 setNodeState(script.ScriptDescriptor, scriptNode.ScriptNodeDescriptor, 'incorrect');
	}
}

procedure generate()
{
	ScriptNode currentNode;
	
	currentNode <- getCurrentNode();

	currentNode.ScriptNodeContent.DialogueAct.DialogueActCounter <- currentNode.ScriptNodeCounter;

	BatchInsertEnd( $MINDBOARD@DialogueOutput.DialogueActs, currentNode.ScriptNodeContent.DialogueAct );
}

procedure generateParameter(string parameterString)
{
	ScriptNode currentNode <- getCurrentNode();
	DialogueAct dialogueAct <- currentNode.ScriptNodeContent.DialogueAct;

	int infoNumber <- ShapeToInt( parameterString );
	DialogueScript script <- getCurrentScript();
	ScriptInfoItem scriptInfoItem;
	BatchRecoverPosition( script.ScriptInfoItems, infoNumber , scriptInfoItem );

	Parameter parameter;
	if( scriptInfoItem.InfoItemState == 'empty' )
	{
		parameter.ParameterType <- scriptInfoItem.InfoItemParameterType;
	}
	else
	{
		parameter <- scriptInfoItem.InfoItemValue.Parameter; 
	}

	BatchInsertEnd( dialogueAct.Parameters, parameter );
	dialogueAct.DialogueActCounter <- currentNode.ScriptNodeCounter;
	BatchInsertEnd( $MINDBOARD@DialogueOutput.DialogueActs, dialogueAct );
}

procedure generate2Parameter(string parameterString1, string parameterString2)
{
	ScriptNode currentNode <- getCurrentNode();
	DialogueAct dialogueAct <- currentNode.ScriptNodeContent.DialogueAct;

	DialogueScript script <- getCurrentScript();
	ScriptInfoItem scriptInfoItem;

	int infoNumber <- ShapeToInt( parameterString1 );
	BatchRecoverPosition( script.ScriptInfoItems, infoNumber , scriptInfoItem );
	Parameter parameter1 <- scriptInfoItem.InfoItemValue.Parameter; 

	infoNumber <- ShapeToInt( parameterString2 );
	BatchRecoverPosition( script.ScriptInfoItems, infoNumber , scriptInfoItem );
	Parameter parameter2 <- scriptInfoItem.InfoItemValue.Parameter; 

	BatchInsertEnd( dialogueAct.Parameters, parameter1 );
	BatchInsertEnd( dialogueAct.Parameters, parameter2 );
	dialogueAct.DialogueActCounter <- currentNode.ScriptNodeCounter;
	BatchInsertEnd( $MINDBOARD@DialogueOutput.DialogueActs, dialogueAct );
}

procedure generate3Parameter(string parameterString1, string parameterString2, string parameterString3)
{
	ScriptNode currentNode <- getCurrentNode();
	DialogueAct dialogueAct <- currentNode.ScriptNodeContent.DialogueAct;

	DialogueScript script <- getCurrentScript();
	ScriptInfoItem scriptInfoItem;

	int infoNumber <- ShapeToInt( parameterString1 );
	BatchRecoverPosition( script.ScriptInfoItems, infoNumber , scriptInfoItem );
	Parameter parameter1 <- scriptInfoItem.InfoItemValue.Parameter; 

	infoNumber <- ShapeToInt( parameterString2 );
	BatchRecoverPosition( script.ScriptInfoItems, infoNumber , scriptInfoItem );
	Parameter parameter2 <- scriptInfoItem.InfoItemValue.Parameter; 

	infoNumber <- ShapeToInt( parameterString3 );
	BatchRecoverPosition( script.ScriptInfoItems, infoNumber , scriptInfoItem );
	Parameter parameter3 <- scriptInfoItem.InfoItemValue.Parameter; 

	BatchInsertEnd( dialogueAct.Parameters, parameter1 );
	BatchInsertEnd( dialogueAct.Parameters, parameter2 );
	BatchInsertEnd( dialogueAct.Parameters, parameter3 );
	dialogueAct.DialogueActCounter <- currentNode.ScriptNodeCounter;
	BatchInsertEnd( $MINDBOARD@DialogueOutput.DialogueActs, dialogueAct );
}

procedure generateHistoryParameter(string parameterString)
{
	ScriptNode currentNode <- getCurrentNode();
	DialogueAct dialogueAct <- currentNode.ScriptNodeContent.DialogueAct;

	int infoNumber <- ShapeToInt( parameterString );
	DialogueScript script <- getCurrentScript();
	ScriptInfoItem scriptInfoItem;
	BatchRecoverPosition( script.ScriptInfoItems, infoNumber , scriptInfoItem );

	dialogueAct.Parameters <- scriptInfoItem.InfoItemHistory;
	BatchInsertEnd( dialogueAct.Parameters, scriptInfoItem.InfoItemValue.Parameter );

	dialogueAct.DialogueActCounter <- currentNode.ScriptNodeCounter;
	BatchInsertEnd( $MINDBOARD@DialogueOutput.DialogueActs, dialogueAct );
}

procedure unrollParameter(string parameterString)
{
	ScriptNode currentNode <- getCurrentNode();
	DialogueAct dialogueAct <- currentNode.ScriptNodeContent.DialogueAct;

	int infoNumber <- ShapeToInt( parameterString );
	DialogueScript script <- getCurrentScript();
	ScriptInfoItem scriptInfoItem;
	BatchRecoverPosition( script.ScriptInfoItems, infoNumber , scriptInfoItem );

	ParameterValue value <- concatenateHistory(scriptInfoItem.InfoItemHistory, scriptInfoItem.InfoItemValue.Parameter);
	InfoItemHistory emptyInfoItemHistory;
	scriptInfoItem.InfoItemHistory <- emptyInfoItemHistory;
	scriptInfoItem.InfoItemValue.Parameter.ParameterValue <- value;
	
	BatchAssignPosition( script.ScriptInfoItems, infoNumber, scriptInfoItem );
	setScript( script );
}

procedure setInfoState(string infoString, string state)
{
	DialogueScript script;
	int infoNumber;
	InfoItemState infoItemState;
	ScriptInfoItem scriptInfoItem;

	script <- getCurrentScript();
	infoNumber <- ShapeToInt( infoString );
	infoItemState <- ShapeToRange( state );
	BatchRecoverPosition( script.ScriptInfoItems, infoNumber, scriptInfoItem );

	scriptInfoItem.InfoItemState <- infoItemState;
	scriptInfoItem.InfoItemMoveState <- 'marked';

	BatchAssignPosition( script.ScriptInfoItems, infoNumber, scriptInfoItem );
	setScript( script );
}

procedure swapHistory(string infoString)
{
	DialogueScript script;
	int infoNumber;
	ScriptInfoItem scriptInfoItem;

	script <- getCurrentScript();
	infoNumber <- ShapeToInt( infoString );
	BatchRecoverPosition( script.ScriptInfoItems, infoNumber, scriptInfoItem );

	Parameter oldParameterValue <- scriptInfoItem.InfoItemValue.Parameter;
	Parameter newParameterValue;
	BatchExtractEnd(scriptInfoItem.InfoItemHistory, newParameterValue);
	BatchInsertEnd(scriptInfoItem.InfoItemHistory, oldParameterValue);
	scriptInfoItem.InfoItemValue.Parameter <- newParameterValue;

	BatchAssignPosition( script.ScriptInfoItems, infoNumber, scriptInfoItem );
	setScript( script );
}

procedure pullScript()
{
	string descriptor;
	
	BatchExtractEnd( $MINDBOARD@DialogueState.ActivatedScriptsStack, descriptor );

	saveScriptToMemory( descriptor );
	DialogueScript recoveredDialogueScript <- removeFromWorkingDialogueScheme( descriptor );
	BatchInsertEnd( $MINDBOARD@DoneDialogueScheme.DialogueScripts, recoveredDialogueScript );

	recoveredDialogueScript <- getFromOriginalDialogueScheme( descriptor );
	BatchInsertEnd( $MINDBOARD@WorkingDialogueScheme.DialogueScripts, recoveredDialogueScript );

	$MINDBOARD@DialogueState.PulledScript <- True;
}

procedure pullScriptFast()
{
	string descriptor;
	
	BatchExtractEnd( $MINDBOARD@DialogueState.ActivatedScriptsStack, descriptor );

	removeFromWorkingDialogueScheme( descriptor );
	if(!! LiteralIncluded('_', descriptor))
	{
		DialogueScript recoveredDialogueScript <- getFromOriginalDialogueScheme( descriptor );
		BatchInsertEnd( $MINDBOARD@WorkingDialogueScheme.DialogueScripts, recoveredDialogueScript );
	}
	else
	{
		removeFromOriginalDialogueScheme( descriptor );
	}
}

procedure resetNextLevel()
{
	ScriptNode currentScriptNode <- getCurrentNode();
	int level <- currentScriptNode.ScriptNodePriorityLevel + 1;
	resetLevel(level);
}

procedure resetCurrentLevel()
{
	ScriptNode currentScriptNode <- getCurrentNode();
	int level <- currentScriptNode.ScriptNodePriorityLevel;
	resetLevel(level);
}

procedure resetLevel(int level)
{
	ScriptNode currentScriptNode <- getCurrentNode();
	DialogueScript script <- getCurrentScript();
	ScriptNode scriptNode;

	int size <- BatchSize( script.ScriptNodes );
	for( int position <- 1; position <= size; position++ )
	{
		BatchRecoverPosition(script.ScriptNodes, position, scriptNode);

		if( scriptNode.ScriptNodeState.ScriptNodeResetStateName )
		{
			if( scriptNode.ScriptNodePriorityLevel == level )
			{
				setNodeCounter(scriptNode.ScriptNodeDescriptor, '0');
				setNodeState( script.ScriptDescriptor, scriptNode.ScriptNodeDescriptor, scriptNode.ScriptNodeState.ScriptNodeResetStateName );		
			}	
		}
	}	
}

procedure resetEchoedItems()
{
	DialogueScript script <- getCurrentScript();
	ScriptInfoItem scriptInfoItem;

	int size <- BatchSize( script.ScriptInfoItems );
	for( int position <- 1; position <= size; position++ )
	{
		BatchRecoverPosition(script.ScriptInfoItems, position, scriptInfoItem);

		if( scriptInfoItem.InfoItemState == 'echoed' )
		{
			setInfoState(ShapeToString(position), 'grounded');
		}
	}	
}

