// **************************************************
//
//	
//
// **************************************************
//
//	PROJECT	:	
//	MODULE  :	
//	PACKAGE :	
//	FILE	:	
//
// **************************************************

bool preconditionsValidated( ScriptNode node )
{
	int size;
	int position;	
	DialogueActionPrecondition precondition;

	size <- BatchSize( node.ScriptNodePreconditions );
	for(position <- 1; position <= size; position++) 
	{
		BatchRecoverPosition( node.ScriptNodePreconditions, position, precondition );
		if( !! preconditionValidated( precondition ) )
		{ 
			return False;
		}
	}

	return True;
}

bool preconditionValidated( DialogueActionPrecondition precondition )
{
	bool ret;

	ret <- executeBooleanDialogueAction( precondition.DialogueAction );

	if(precondition.NegatedPrecondition)
	{
		ret = !! ret;
	}

	return ret;
}

procedure executePostconditions( ScriptNode node )
{
	int size;
	int position;	
	DialogueAction dialogueAction;

	size <- BatchSize( node.ScriptNodePostconditions );
	for(position <- 1; position <= size; position++) 
	{
		BatchRecoverPosition( node.ScriptNodePostconditions, position, dialogueAction );
		executeProcedureDialogueAction( dialogueAction );
	}
}

ActivatedScriptNodes filterMinPriority(ActivatedScriptNodes activatedScriptNodes )
{
	int minPriority;
	int size;
	int position;
	ActivatedScriptNodes ret, emptyActivatedScriptNodes;
	ScriptNodeDescriptor scriptNodeDescriptor;
	ScriptNode scriptNode;

	BatchRecoverPosition(activatedScriptNodes, 1, scriptNodeDescriptor);
	scriptNode <- getNodeFromCurrentScript( scriptNodeDescriptor );
	minPriority <- scriptNode.ScriptNodePriorityLevel;
	size <- BatchSize( activatedScriptNodes );
	for( position <- 1; position <= size; position++ )
	{
		BatchRecoverPosition(activatedScriptNodes, position, scriptNodeDescriptor);
		scriptNode <- getNodeFromCurrentScript( scriptNodeDescriptor );
		
		if( scriptNode.ScriptNodePriorityLevel < minPriority )
		{
			minPriority <- scriptNode.ScriptNodePriorityLevel;
			ret <- emptyActivatedScriptNodes;
			BatchInsertEnd( ret, scriptNodeDescriptor );
		}
		else if( scriptNode.ScriptNodePriorityLevel == minPriority )
		{
			BatchInsertEnd( ret, scriptNodeDescriptor );
		}
	}

	return ret;
}

// Wait nodes must the last to be processed
ActivatedScriptNodes orderByType(ActivatedScriptNodes activatedScriptNodes )
{
	int size;
	int position;
	ActivatedScriptNodes executeNodes, waitNodes;
	ScriptNodeDescriptor scriptNodeDescriptor;
	ScriptNode scriptNode;

	size <- BatchSize( activatedScriptNodes );
	for( position <- 1; position <= size; position++ )
	{
		BatchRecoverPosition(activatedScriptNodes, position, scriptNodeDescriptor);
		scriptNode <- getNodeFromCurrentScript( scriptNodeDescriptor );
		
		if( scriptNode.ScriptNodeType == 'execute' )
		{
			BatchInsertEnd( executeNodes, scriptNodeDescriptor );
		}
		else if( scriptNode.ScriptNodeType == 'wait' )
		{
			BatchInsertEnd( waitNodes, scriptNodeDescriptor );
		}
	}

	if( BatchSize(executeNodes) > 0 )
	{
		return executeNodes;
	}
	else
	{
		return waitNodes;
	}
}


