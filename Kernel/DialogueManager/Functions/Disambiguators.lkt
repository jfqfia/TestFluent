// **************************************************
//
//	
//
// **************************************************
//
//	PROJECT	:	
//	MODULE  :	
//	PACKAGE :	
//	FILE	:	
//
// **************************************************

// Devuelve cierto si el actual es dialogueScript y además es un desambiguador
// Se llama desde DigestPhases (getCompatibleScriptTriggerComponent)
bool isCurrentAndDisambiguator(DialogueScript dialogueScript)
{
	DialogueScript current <- getCurrentScript();
	if(current.ScriptDescriptor == dialogueScript.ScriptDescriptor)
	{
		if( isDisambiguator(dialogueScript) )
		{
			return True;	
		}
	}

	return False;
}

bool isDisambiguator(DialogueScript dialogueScript)
{
	return SubLiteral(dialogueScript.ScriptDescriptor, 1, 14) == 'disambiguator_';
}

procedure pushWeakDisambiguator(int size)
{
	DialogueScript dialogueScript;
	
	dialogueScript <- createWeakDisambiaguator(size);

	BatchInsertEnd( $MINDBOARD@DialogueScheme.DialogueScripts, dialogueScript );
	BatchInsertEnd( $MINDBOARD@WorkingDialogueScheme.DialogueScripts, dialogueScript );
	BatchInsertEnd( $MINDBOARD@DialogueState.ActivatedScriptsStack, dialogueScript.ScriptDescriptor );
}

// TODO
DialogueScript createWeakDisambiaguator(int size)
{
	// TODO El scriptDescriptor debe empezar por 'disambiguator_'
}

/*

DialogueScript createDialogueScriptMedicalAppointment()
{
	// Script Descriptor
	DialogueScript dialogueScript;
	dialogueScript.ScriptDescriptor <- 'BookAppointment';

	// Trigger
	dialogueScript.ScriptTrigger.CoreDialogueAct.Dimension <- 'statement';
	dialogueScript.ScriptTrigger.CoreDialogueAct.Function <- 'request';
	dialogueScript.ScriptTrigger.ActionDomain <- 'book';
	dialogueScript.ScriptTrigger.Scope <- 'appointment';
	BatchInsertEnd( dialogueScript.ScriptTrigger.ParameterTypes , 'medicalspeciality' );
	BatchInsertEnd( dialogueScript.ScriptTrigger.ParameterTypes , 'countryplace' );
	BatchInsertEnd( dialogueScript.ScriptTrigger.ParameterTypes , 'datetime' );
	BatchInsertEnd( dialogueScript.ScriptTrigger.ParameterTypes , 'phonenumber' );
	BatchInsertEnd( dialogueScript.ScriptTrigger.ParameterTypes , 'peselnumber' );
	
	// Info
	ScriptInfoItem scriptInfoItem, emptyScriptInfoItem;

	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'core';	
	scriptInfoItem.InfoItemState <- 'empty';	
	scriptInfoItem.InfoItemValue.CoreDialogueAct.Dimension <- 'statement';
	scriptInfoItem.InfoItemValue.CoreDialogueAct.Function <- 'request';
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );
	
	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'action';	
	scriptInfoItem.InfoItemState <- 'empty';	
	scriptInfoItem.InfoItemValue.ActionDomain <- 'book';
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'scope';	
	scriptInfoItem.InfoItemState <- 'empty';	
	scriptInfoItem.InfoItemValue.Scope <- 'appointment';
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'parameter';	
	scriptInfoItem.InfoItemParameterType <- 'medicalspeciality';	
	scriptInfoItem.InfoItemState <- 'empty';	
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'parameter';	
	scriptInfoItem.InfoItemParameterType <- 'countryplace';	
	scriptInfoItem.InfoItemState <- 'empty';	
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'parameter';	
	scriptInfoItem.InfoItemParameterType <- 'datetime';	
	scriptInfoItem.InfoItemState <- 'empty';	
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'parameter';	
	scriptInfoItem.InfoItemParameterType <- 'phonenumber';	
	scriptInfoItem.InfoItemState <- 'empty';	
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	scriptInfoItem <- emptyScriptInfoItem;
	scriptInfoItem.InfoItemType <- 'parameter';	
	scriptInfoItem.InfoItemParameterType <- 'peselnumber';	
	scriptInfoItem.InfoItemState <- 'empty';	
	BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

	// Phases

	// Phase 1
	dialogueScript <- scriptActivation(dialogueScript, 1);

	// Phase 2
	dialogueScript <- captureCompulsoryParameter(dialogueScript, 2, 'medicalspeciality');
	dialogueScript <- captureCompulsoryParameter(dialogueScript, 2, 'countryplace');
	dialogueScript <- captureOptionalParameter(dialogueScript, 2, 'datetime');

	// Phase 3
	dialogueScript <- negotiateParameter3(dialogueScript, 3, 'datetime', 'negotiate_datetime_medical_appointment', 'datetime', 'medicalspeciality', 'countryplace');

	// TODO
	// Phase 3.5
	// Meter un nodo de comprobación para saber qué hacer si la fecha sigue vacía habiendo pasado la negociación.

	// Phase 4	
	dialogueScript <- captureCompulsoryParameter(dialogueScript, 4, 'phonenumber');
	dialogueScript <- captureCompulsoryParameter(dialogueScript, 4, 'peselnumber');

	// Phase 5	
	dialogueScript <- informExplicitParameters3(dialogueScript, 5, 'datetime', 'medicalspeciality', 'countryplace');

	// Phase 6
	dialogueScript <- endScript(dialogueScript, 6);
	
	return dialogueScript;
}

DialogueScript captureCompulsoryParameter(DialogueScript dialogueScript, int priorityLevel, ParameterType parameterType)
{
	ScriptNode nodeAskParameter;
	ScriptNode nodeIdontknowParameter;
	ScriptNode nodeImplicitParameter;
	ScriptNode nodeCheckParameter;
	ScriptNode nodeIncorrectParameter;
	ScriptNode nodeCorrectParameter;
	ScriptNode nodeImplicitDisagreement;
	ScriptNode nodeChanged;
	ScriptNode nodeExplicitAgreement;
	ScriptNode nodeExplicitDisagreement;

	string suffix = '_capturecompulsoryparameter_';
	suffix <- LiteralConcat( suffix, ShapeToString(parameterType) );
	suffix <- LiteralConcat( suffix, '_' );
	suffix <- LiteralConcat( suffix, ShapeToString(priorityLevel) );
	string task, nodeName1, nodeName2, nodeName3, nodeName4, nodeName5, nodeName6, nodeName7, nodeName8, nodeName9, nodeName10;
	string parameterPosition <- recoverParameterPosition(dialogueScript, parameterType);

	// Node - AskParameter
	nodeName1 <- LiteralConcat( 'askparameter', suffix );	
	nodeAskParameter <- createScriptNode( nodeName1, 'wait', priorityLevel );
	nodeAskParameter.ScriptNodeContent <- setNodeContent( 'question', 'whquestion', 'what', ShapeToString(parameterType) );
	BatchInsertEnd( nodeAskParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', parameterPosition, 'empty' ));
	BatchInsertEnd( nodeAskParameter.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeAskParameter.ScriptNodePostconditions, createDialogueAction1Arguments( 'set_expectative_parameter', ShapeToString(parameterType) ));
	BatchInsertEnd( nodeAskParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName1, 'finalized' ));	

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeAskParameter );

	// Node - IdontknowParameter
	nodeName2 <- LiteralConcat( 'idontknowparameter', suffix );	
	nodeIdontknowParameter <- createScriptNode( nodeName2, 'execute', priorityLevel );
	nodeIdontknowParameter.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'idontknow', 'parameter' );
	BatchInsertEnd( nodeIdontknowParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName1, 'finalized' ));
	BatchInsertEnd( nodeIdontknowParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', parameterPosition, 'empty' ));
	BatchInsertEnd( nodeIdontknowParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'digested_core', 'basicanswer', 'dontknow' ));
	BatchInsertEnd( nodeIdontknowParameter.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', parameterPosition ));
	BatchInsertEnd( nodeIdontknowParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName1, 'notfinalized' ));	

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeIdontknowParameter );

	// Node - ImplicitParameter
	nodeName3 <- LiteralConcat( 'implicitparameter', suffix );	
	nodeImplicitParameter <- createScriptNode( nodeName3, 'execute', priorityLevel);
	nodeImplicitParameter.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'implicit', 'parameter' );
	BatchInsertEnd( nodeImplicitParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', parameterPosition, 'captured' ));
	BatchInsertEnd( nodeImplicitParameter.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', parameterPosition ));
	BatchInsertEnd( nodeImplicitParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', parameterPosition, 'checking' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeImplicitParameter );

	// Node - CheckParameter
	nodeName4 <- LiteralConcat( 'checkparameter', suffix );	
	nodeCheckParameter <- createScriptNode( nodeName4, 'execute', priorityLevel );
	BatchInsertEnd( nodeCheckParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', parameterPosition, 'checking' ));
	BatchInsertEnd( nodeCheckParameter.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', nodeName4, 'correct' ));
	BatchInsertEnd( nodeCheckParameter.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', nodeName4, 'incorrect' ));
	BatchInsertEnd( nodeCheckParameter.ScriptNodePostconditions, createDialogueAction1Arguments( 'check_parameter', parameterPosition ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeCheckParameter );

	// Node - IncorrectParameter
	nodeName5 <- LiteralConcat( 'incorrectparameter', suffix );	
	nodeIncorrectParameter <- createScriptNode( nodeName5, 'execute', priorityLevel );
	nodeIncorrectParameter.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'incorrect', 'parameter' );
	BatchInsertEnd( nodeIncorrectParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName4, 'incorrect' ));
	BatchInsertEnd( nodeIncorrectParameter.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', parameterPosition ));
	BatchInsertEnd( nodeIncorrectParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', parameterPosition, 'empty' ));
	BatchInsertEnd( nodeIncorrectParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName4, 'notfinalized' ));
	BatchInsertEnd( nodeIncorrectParameter.ScriptNodePostconditions, createDialogueAction0Arguments( 'reset_next_level' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeIncorrectParameter );

	// Node - CorrectParameter
	nodeName6 <- LiteralConcat( 'correctparameter', suffix );	
	nodeCorrectParameter <- createScriptNode( nodeName6, 'execute', priorityLevel );
	nodeCorrectParameter.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'correct', 'parameter' );
	BatchInsertEnd( nodeCorrectParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName4, 'correct' ));
	BatchInsertEnd( nodeCorrectParameter.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', parameterPosition ));
	BatchInsertEnd( nodeCorrectParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', parameterPosition, 'echoed' ));
	BatchInsertEnd( nodeCorrectParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName4, 'notfinalized' ));
	BatchInsertEnd( nodeCorrectParameter.ScriptNodePostconditions, createDialogueAction0Arguments( 'reset_next_level' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeCorrectParameter );

	// Node - ImplicitDisagreement
	nodeName7 <- LiteralConcat( 'implicitdisagreement', suffix );	
	nodeImplicitDisagreement <- createScriptNode( nodeName7, 'execute', priorityLevel);
	BatchInsertEnd( nodeImplicitDisagreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', parameterPosition, 'rejected' ));
	BatchInsertEnd( nodeImplicitDisagreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', parameterPosition, 'empty' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeImplicitDisagreement );

	// Node - ChangedFromGrounded
	nodeName8 <- LiteralConcat( 'changedfromgrounded', suffix );	
	nodeChanged <- createScriptNode( nodeName8, 'wait', priorityLevel);
	nodeChanged.ScriptNodeState.ScriptNodeResetStateName <- 'notfinalized';
	nodeChanged.ScriptNodeContent <- setNodeContent( 'question', 'propositional', 'confirmchanged', 'parameter' );
	BatchInsertEnd( nodeChanged.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', nodeName8, 'finalized' ));
	BatchInsertEnd( nodeChanged.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', parameterPosition, 'changed' ));
	BatchInsertEnd( nodeChanged.ScriptNodePostconditions, createDialogueAction1Arguments( 'swap_history', parameterPosition ));	
	BatchInsertEnd( nodeChanged.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', parameterPosition ));
	BatchInsertEnd( nodeChanged.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName8, 'finalized' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeChanged );

	// Node - ExplicitAgreement
	nodeName9 <- LiteralConcat( 'explicitagreement', suffix );	
	nodeExplicitAgreement <- createScriptNode( nodeName9, 'execute', priorityLevel);
	BatchInsertEnd( nodeExplicitAgreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName8, 'finalized' ));
	BatchInsertEnd( nodeExplicitAgreement.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'digested_core', 'basicanswer', 'disagreement' ));
	BatchInsertEnd( nodeExplicitAgreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', parameterPosition, 'grounded' ));
	BatchInsertEnd( nodeExplicitAgreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName8, 'notfinalized' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeExplicitAgreement );

	// Node - ExplicitDisagreement
	nodeName10 <- LiteralConcat( 'explicitdisagreement', suffix );	
	nodeExplicitDisagreement <- createScriptNode( nodeName10, 'execute', priorityLevel);
	BatchInsertEnd( nodeExplicitDisagreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName8, 'finalized' ));
	BatchInsertEnd( nodeExplicitDisagreement.ScriptNodePreconditions, createPrecondition2Arguments( 'digested_core', 'basicanswer', 'disagreement' ));
	BatchInsertEnd( nodeExplicitDisagreement.ScriptNodePostconditions, createDialogueAction1Arguments( 'swap_history', parameterPosition ));	
	BatchInsertEnd( nodeExplicitDisagreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', parameterPosition, 'captured' ));
	BatchInsertEnd( nodeExplicitDisagreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName8, 'notfinalized' ));
	BatchInsertEnd( nodeExplicitDisagreement.ScriptNodePostconditions, createDialogueAction0Arguments( 'delete_disagreement' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeExplicitDisagreement );

	return dialogueScript;
}

*/

// TODO
// Aquí hay mucha más casuística:
//	Tener en cuenta puntuación.
// 	En caso de una racha de empates en puntos separar en dos grupos:
//		seleccionar los autocontenidos mediante un SD
//		seleccionar los no autocontenidos mediante un WD
procedure processNewActivatedScriptsWithNoScope(int size)
{

}

// TODO
DialogueScript createStrongDisambiaguator(int size)
{
	// TODO El scriptDescriptor debe empezar por 'disambiguator_'
}

