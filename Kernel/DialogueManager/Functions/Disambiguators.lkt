// **************************************************
//
//	
//
// **************************************************
//
//	PROJECT	:	
//	MODULE  :	
//	PACKAGE :	
//	FILE	:	
//
// **************************************************

// Devuelve cierto si el actual es dialogueScript y adem√°s es un desambiguador
// Se llama desde DigestPhases (getCompatibleScriptTriggerComponent)
bool isCurrentAndDisambiguator(DialogueScript dialogueScript)
{
	DialogueScript current <- getCurrentScript();
	if(current.ScriptDescriptor == dialogueScript.ScriptDescriptor)
	{
		if( isDisambiguator(dialogueScript) )
		{
			return True;	
		}
	}

	return False;
}

bool isDisambiguator(DialogueScript dialogueScript)
{
	return SubLiteral(dialogueScript.ScriptDescriptor, 1, 14) == 'disambiguator_';
}

procedure pushWeakDisambiguator(int size)
{
	DialogueScript dialogueScript;
	
	dialogueScript <- createWeakDisambiguator(size);

	BatchInsertEnd( $MINDBOARD@DialogueScheme.DialogueScripts, dialogueScript );
	BatchInsertEnd( $MINDBOARD@WorkingDialogueScheme.DialogueScripts, dialogueScript );
	BatchInsertEnd( $MINDBOARD@DialogueState.ActivatedScriptsStack, dialogueScript.ScriptDescriptor );
}

DialogueScript createWeakDisambiguator(int size)
{
	// Script Descriptor
	DialogueScript dialogueScript;
	string scriptDescriptor <- '';
	scriptDescriptor <- LiteralConcat(scriptDescriptor, 'disambiguator_' );
	scriptDescriptor <- LiteralConcat(scriptDescriptor, ShapeToString(size) );
	scriptDescriptor <- LiteralConcat(scriptDescriptor, '_' );
	scriptDescriptor <- LiteralConcat(scriptDescriptor, ShapeToString(BatchSize($MINDBOARD@DialogueState.ActivatedScriptsStack)) );
	dialogueScript.ScriptDescriptor <- scriptDescriptor;

	// Info
	ScriptInfoItem scriptInfoItem, emptyScriptInfoItem;

	int activatedSize <- BatchSize($MINDBOARD@DialogueState.ActivatedScriptsStack);
	for(int position <- activatedSize - size + 1; position <= activatedSize; position++)
	{	
		BatchRecoverPosition($MINDBOARD@DialogueState.ActivatedScriptsStack, position, scriptDescriptor);

		DialogueScript recoveredDialogueScript <- getScript( scriptDescriptor );

		scriptInfoItem <- emptyScriptInfoItem;
		scriptInfoItem.InfoItemType <- 'action';	
		scriptInfoItem.InfoItemState <- 'empty';	
		scriptInfoItem.InfoItemValue.ActionDomain <- searchActionDomainInTriggerScript(recoveredDialogueScript);
		BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );

		scriptInfoItem <- emptyScriptInfoItem;
		scriptInfoItem.InfoItemType <- 'scope';	
		scriptInfoItem.InfoItemState <- 'empty';	
		scriptInfoItem.InfoItemValue.Scope <- searchScopeInTriggerScript(recoveredDialogueScript);
		BatchInsertEnd( dialogueScript.ScriptInfoItems, scriptInfoItem );
	}

	// Node - AskChoices
	ScriptNode nodeAskChoices <- createScriptNode( 'askchoices', 'wait', 1 );
	nodeAskChoices.ScriptNodeContent <- setNodeContent( 'question', 'choice', '', '' );
	BatchInsertEnd( nodeAskChoices.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'askchoices', 'finalized' ));
	BatchInsertEnd( nodeAskChoices.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate_wd_choices' ));	
	BatchInsertEnd( nodeAskChoices.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'askchoices', 'finalized' ));	

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeAskChoices );

	// Node - MakeChoices
	ScriptNode nodeMakeChoices <- createScriptNode( 'makechoices', 'execute', 2 );
	BatchInsertEnd( nodeMakeChoices.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', 'makechoices', 'finalized' ));
	BatchInsertEnd( nodeMakeChoices.ScriptNodePostconditions, createDialogueAction0Arguments( 'make_wd_choices' ));	
	BatchInsertEnd( nodeMakeChoices.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', 'makechoices', 'finalized' ));	

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeMakeChoices );


	return dialogueScript;
}

procedure makeWeakDisambiguatorChoices()
{
	// TODO Detect ordinals in not digested proferences zone (when they are implemented)
	
}

procedure generateWeakDisambiguatorChoices()
{
	ScriptInfoItem scriptInfoItem1, scriptInfoItem2;
	DialogueAct dialogueAct, emptyDialogueAct;
	DialogueScript script <- getCurrentScript();
	
	dialogueAct <- emptyDialogueAct;
	BatchInsertEnd( dialogueAct.TaskDialogueAct.Action, 'tell' );
	dialogueAct.TaskDialogueAct.Scope <- 'What do you want to do first';
	BatchInsertEnd( $MINDBOARD@DialogueOutput.DialogueActs, dialogueAct );

	int size <- BatchSize(script.ScriptInfoItems);

	for(int position <- 1; position <= size - 2 ; position <- position + 2)
	{
		BatchRecoverPosition( script.ScriptInfoItems, position , scriptInfoItem1 );
		BatchRecoverPosition( script.ScriptInfoItems, position + 1, scriptInfoItem2 );				

		dialogueAct <- emptyDialogueAct;
		BatchInsertEnd( dialogueAct.TaskDialogueAct.Action, 'tell' );
		dialogueAct.TaskDialogueAct.Scope <- ', ';
		BatchInsertEnd( $MINDBOARD@DialogueOutput.DialogueActs, dialogueAct );

		dialogueAct <- emptyDialogueAct;
		dialogueAct.CoreDialogueAct.Dimension <- 'question'; 
		dialogueAct.CoreDialogueAct.Function <- 'choice';
		BatchInsertEnd( dialogueAct.TaskDialogueAct.Action, scriptInfoItem1.InfoItemValue.ActionDomain );
		dialogueAct.TaskDialogueAct.Scope <- scriptInfoItem2.InfoItemValue.Scope;
		BatchInsertEnd( $MINDBOARD@DialogueOutput.DialogueActs, dialogueAct );
	}

	BatchRecoverPosition( script.ScriptInfoItems, size - 1 , scriptInfoItem1 );
	BatchRecoverPosition( script.ScriptInfoItems, size, scriptInfoItem2 );				

	dialogueAct <- emptyDialogueAct;
	BatchInsertEnd( dialogueAct.TaskDialogueAct.Action, 'tell' );
	dialogueAct.TaskDialogueAct.Scope <- ' or ';
	BatchInsertEnd( $MINDBOARD@DialogueOutput.DialogueActs, dialogueAct );

	dialogueAct <- emptyDialogueAct;
	dialogueAct.CoreDialogueAct.Dimension <- 'question'; 
	dialogueAct.CoreDialogueAct.Function <- 'choice';
	BatchInsertEnd( dialogueAct.TaskDialogueAct.Action, scriptInfoItem1.InfoItemValue.ActionDomain );
	dialogueAct.TaskDialogueAct.Scope <- scriptInfoItem2.InfoItemValue.Scope;
	BatchInsertEnd( $MINDBOARD@DialogueOutput.DialogueActs, dialogueAct );

	dialogueAct <- emptyDialogueAct;
	BatchInsertEnd( dialogueAct.TaskDialogueAct.Action, 'tell' );
	dialogueAct.TaskDialogueAct.Scope <- '? ';
	BatchInsertEnd( $MINDBOARD@DialogueOutput.DialogueActs, dialogueAct );
}

ActionDomain searchActionDomainInTriggerScript( DialogueScript dialogueScript )
{
	ScriptInfoItems scriptInfoItems;
	int infoSize;
	int infoPosition;
	ScriptInfoItem scriptInfoItem;

	scriptInfoItems <- dialogueScript.ScriptInfoItems;
	infoSize <- BatchSize( scriptInfoItems );

	for (infoPosition <- 1; infoPosition <= infoSize; infoPosition ++) 
	{
		BatchRecoverPosition( scriptInfoItems, infoPosition, scriptInfoItem );

		if (scriptInfoItem.InfoItemType == 'action') 
		{
			return scriptInfoItem.InfoItemValue.ActionDomain;
		}
	}
}

Scope searchScopeInTriggerScript( DialogueScript dialogueScript )
{
	ScriptInfoItems scriptInfoItems;
	int infoSize;
	int infoPosition;
	ScriptInfoItem scriptInfoItem;

	scriptInfoItems <- dialogueScript.ScriptInfoItems;
	infoSize <- BatchSize( scriptInfoItems );

	for (infoPosition <- 1; infoPosition <= infoSize; infoPosition ++) 
	{
		BatchRecoverPosition( scriptInfoItems, infoPosition, scriptInfoItem );

		if (scriptInfoItem.InfoItemType == 'scope') 
		{
			return scriptInfoItem.InfoItemValue.Scope;
		}
	}
}

/*
DialogueScript captureCompulsoryParameter(DialogueScript dialogueScript, int priorityLevel, ParameterType parameterType)
{
	ScriptNode nodeAskParameter;
	ScriptNode nodeIdontknowParameter;
	ScriptNode nodeImplicitParameter;
	ScriptNode nodeCheckParameter;
	ScriptNode nodeIncorrectParameter;
	ScriptNode nodeCorrectParameter;
	ScriptNode nodeImplicitDisagreement;
	ScriptNode nodeChanged;
	ScriptNode nodeExplicitAgreement;
	ScriptNode nodeExplicitDisagreement;

	string suffix = '_capturecompulsoryparameter_';
	suffix <- LiteralConcat( suffix, ShapeToString(parameterType) );
	suffix <- LiteralConcat( suffix, '_' );
	suffix <- LiteralConcat( suffix, ShapeToString(priorityLevel) );
	string task, nodeName1, nodeName2, nodeName3, nodeName4, nodeName5, nodeName6, nodeName7, nodeName8, nodeName9, nodeName10;
	string parameterPosition <- recoverParameterPosition(dialogueScript, parameterType);

	// Node - AskParameter
	nodeName1 <- LiteralConcat( 'askparameter', suffix );	
	nodeAskParameter <- createScriptNode( nodeName1, 'wait', priorityLevel );
	nodeAskParameter.ScriptNodeContent <- setNodeContent( 'question', 'whquestion', 'what', ShapeToString(parameterType) );
	BatchInsertEnd( nodeAskParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', parameterPosition, 'empty' ));
	BatchInsertEnd( nodeAskParameter.ScriptNodePostconditions, createDialogueAction0Arguments( 'generate' ));
	BatchInsertEnd( nodeAskParameter.ScriptNodePostconditions, createDialogueAction1Arguments( 'set_expectative_parameter', ShapeToString(parameterType) ));
	BatchInsertEnd( nodeAskParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName1, 'finalized' ));	

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeAskParameter );

	// Node - IdontknowParameter
	nodeName2 <- LiteralConcat( 'idontknowparameter', suffix );	
	nodeIdontknowParameter <- createScriptNode( nodeName2, 'execute', priorityLevel );
	nodeIdontknowParameter.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'idontknow', 'parameter' );
	BatchInsertEnd( nodeIdontknowParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName1, 'finalized' ));
	BatchInsertEnd( nodeIdontknowParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', parameterPosition, 'empty' ));
	BatchInsertEnd( nodeIdontknowParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'digested_core', 'basicanswer', 'dontknow' ));
	BatchInsertEnd( nodeIdontknowParameter.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', parameterPosition ));
	BatchInsertEnd( nodeIdontknowParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName1, 'notfinalized' ));	

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeIdontknowParameter );

	// Node - ImplicitParameter
	nodeName3 <- LiteralConcat( 'implicitparameter', suffix );	
	nodeImplicitParameter <- createScriptNode( nodeName3, 'execute', priorityLevel);
	nodeImplicitParameter.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'implicit', 'parameter' );
	BatchInsertEnd( nodeImplicitParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', parameterPosition, 'captured' ));
	BatchInsertEnd( nodeImplicitParameter.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', parameterPosition ));
	BatchInsertEnd( nodeImplicitParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', parameterPosition, 'checking' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeImplicitParameter );

	// Node - CheckParameter
	nodeName4 <- LiteralConcat( 'checkparameter', suffix );	
	nodeCheckParameter <- createScriptNode( nodeName4, 'execute', priorityLevel );
	BatchInsertEnd( nodeCheckParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', parameterPosition, 'checking' ));
	BatchInsertEnd( nodeCheckParameter.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', nodeName4, 'correct' ));
	BatchInsertEnd( nodeCheckParameter.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', nodeName4, 'incorrect' ));
	BatchInsertEnd( nodeCheckParameter.ScriptNodePostconditions, createDialogueAction1Arguments( 'check_parameter', parameterPosition ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeCheckParameter );

	// Node - IncorrectParameter
	nodeName5 <- LiteralConcat( 'incorrectparameter', suffix );	
	nodeIncorrectParameter <- createScriptNode( nodeName5, 'execute', priorityLevel );
	nodeIncorrectParameter.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'incorrect', 'parameter' );
	BatchInsertEnd( nodeIncorrectParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName4, 'incorrect' ));
	BatchInsertEnd( nodeIncorrectParameter.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', parameterPosition ));
	BatchInsertEnd( nodeIncorrectParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', parameterPosition, 'empty' ));
	BatchInsertEnd( nodeIncorrectParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName4, 'notfinalized' ));
	BatchInsertEnd( nodeIncorrectParameter.ScriptNodePostconditions, createDialogueAction0Arguments( 'reset_next_level' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeIncorrectParameter );

	// Node - CorrectParameter
	nodeName6 <- LiteralConcat( 'correctparameter', suffix );	
	nodeCorrectParameter <- createScriptNode( nodeName6, 'execute', priorityLevel );
	nodeCorrectParameter.ScriptNodeContent <- setNodeContent( 'statement', 'inform', 'correct', 'parameter' );
	BatchInsertEnd( nodeCorrectParameter.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName4, 'correct' ));
	BatchInsertEnd( nodeCorrectParameter.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', parameterPosition ));
	BatchInsertEnd( nodeCorrectParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', parameterPosition, 'echoed' ));
	BatchInsertEnd( nodeCorrectParameter.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName4, 'notfinalized' ));
	BatchInsertEnd( nodeCorrectParameter.ScriptNodePostconditions, createDialogueAction0Arguments( 'reset_next_level' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeCorrectParameter );

	// Node - ImplicitDisagreement
	nodeName7 <- LiteralConcat( 'implicitdisagreement', suffix );	
	nodeImplicitDisagreement <- createScriptNode( nodeName7, 'execute', priorityLevel);
	BatchInsertEnd( nodeImplicitDisagreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', parameterPosition, 'rejected' ));
	BatchInsertEnd( nodeImplicitDisagreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', parameterPosition, 'empty' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeImplicitDisagreement );

	// Node - ChangedFromGrounded
	nodeName8 <- LiteralConcat( 'changedfromgrounded', suffix );	
	nodeChanged <- createScriptNode( nodeName8, 'wait', priorityLevel);
	nodeChanged.ScriptNodeState.ScriptNodeResetStateName <- 'notfinalized';
	nodeChanged.ScriptNodeContent <- setNodeContent( 'question', 'propositional', 'confirmchanged', 'parameter' );
	BatchInsertEnd( nodeChanged.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'is_node_state', nodeName8, 'finalized' ));
	BatchInsertEnd( nodeChanged.ScriptNodePreconditions, createPrecondition2Arguments( 'is_info_state', parameterPosition, 'changed' ));
	BatchInsertEnd( nodeChanged.ScriptNodePostconditions, createDialogueAction1Arguments( 'swap_history', parameterPosition ));	
	BatchInsertEnd( nodeChanged.ScriptNodePostconditions, createDialogueAction1Arguments( 'generate_parameter', parameterPosition ));
	BatchInsertEnd( nodeChanged.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName8, 'finalized' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeChanged );

	// Node - ExplicitAgreement
	nodeName9 <- LiteralConcat( 'explicitagreement', suffix );	
	nodeExplicitAgreement <- createScriptNode( nodeName9, 'execute', priorityLevel);
	BatchInsertEnd( nodeExplicitAgreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName8, 'finalized' ));
	BatchInsertEnd( nodeExplicitAgreement.ScriptNodePreconditions, createNegatedPrecondition2Arguments( 'digested_core', 'basicanswer', 'disagreement' ));
	BatchInsertEnd( nodeExplicitAgreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', parameterPosition, 'grounded' ));
	BatchInsertEnd( nodeExplicitAgreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName8, 'notfinalized' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeExplicitAgreement );

	// Node - ExplicitDisagreement
	nodeName10 <- LiteralConcat( 'explicitdisagreement', suffix );	
	nodeExplicitDisagreement <- createScriptNode( nodeName10, 'execute', priorityLevel);
	BatchInsertEnd( nodeExplicitDisagreement.ScriptNodePreconditions, createPrecondition2Arguments( 'is_node_state', nodeName8, 'finalized' ));
	BatchInsertEnd( nodeExplicitDisagreement.ScriptNodePreconditions, createPrecondition2Arguments( 'digested_core', 'basicanswer', 'disagreement' ));
	BatchInsertEnd( nodeExplicitDisagreement.ScriptNodePostconditions, createDialogueAction1Arguments( 'swap_history', parameterPosition ));	
	BatchInsertEnd( nodeExplicitDisagreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_info_state', parameterPosition, 'captured' ));
	BatchInsertEnd( nodeExplicitDisagreement.ScriptNodePostconditions, createDialogueAction2Arguments( 'set_node_state', nodeName8, 'notfinalized' ));
	BatchInsertEnd( nodeExplicitDisagreement.ScriptNodePostconditions, createDialogueAction0Arguments( 'delete_disagreement' ));

	BatchInsertEnd( dialogueScript.ScriptNodes, nodeExplicitDisagreement );

	return dialogueScript;
}

*/

// TODO
// Aqu√≠ hay mucha m√°s casu√≠stica:
//	Tener en cuenta puntuaci√≥n.
// 	En caso de una racha de empates en puntos separar en dos grupos:
//		seleccionar los autocontenidos mediante un SD
//		seleccionar los no autocontenidos mediante un WD
procedure processNewActivatedScriptsWithNoScope(int size)
{

}

// TODO
DialogueScript createStrongDisambiaguator(int size)
{
	// TODO El scriptDescriptor debe empezar por 'disambiguator_'
}

