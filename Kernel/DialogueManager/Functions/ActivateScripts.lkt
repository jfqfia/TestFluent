// **************************************************
//
//	
//
// **************************************************
//
//	PROJECT	:	
//	MODULE  :	
//	PACKAGE :	
//	FILE	:	
//
// **************************************************

DigestScheme selectMinScoreDigestScheme()
{
	DigestScheme minDigestScheme, recoveredDigestScheme;
	BatchRecoverPosition( $MINDBOARD@DialogueDigest.DigestSchemes, 1, minDigestScheme);
	int size <- BatchSize( $MINDBOARD@DialogueDigest.DigestSchemes);
	for( int position <- 2; position <= size; position++ )
	{
		BatchRecoverPosition( $MINDBOARD@DialogueDigest.DigestSchemes, position, recoveredDigestScheme);
		if( recoveredDigestScheme.DigestSchemeScore < minDigestScheme.DigestSchemeScore )
		{
			minDigestScheme <- recoveredDigestScheme;
		}
	}
	
	return minDigestScheme;
}

int getMaxScore()
{
	DigestScheme maxDigestScheme, recoveredDigestScheme;
	BatchRecoverPosition( $MINDBOARD@DialogueDigest.DigestSchemes, 1, maxDigestScheme);
	int size <- BatchSize( $MINDBOARD@DialogueDigest.DigestSchemes);
	for( int position <- 2; position <= size; position++ )
	{
		BatchRecoverPosition( $MINDBOARD@DialogueDigest.DigestSchemes, position, recoveredDigestScheme);
		if( recoveredDigestScheme.DigestSchemeScore > maxDigestScheme.DigestSchemeScore )
		{
			maxDigestScheme <- recoveredDigestScheme;
		}
	}

	return maxDigestScheme.DigestSchemeScore;
}

bool filterDialogueDigest(bool currentFlag, bool activeFlag)
{
	bool ret <- False;

	if(oneWithScope())
	{	
		ret <- True;
		while(oneWithoutScope())
		{
			DigestScheme digestScheme <- getFirstWithoutScope();
			removeDigestScheme( digestScheme );
		}
		int max <- getMaxScore();
		while(oneWithBigDifferenceFromMax(max))
		{
			DigestScheme digestScheme <- getFirstWithBigDifferenceFromMax(max);
			removeDigestScheme( digestScheme );
		}
	}
	else
	{
		if( currentFlag || activeFlag )
		{
			DigestSchemes emptyDigestSchemes;
			$MINDBOARD@DialogueDigest.DigestSchemes <- emptyDigestSchemes;
		}
		else
		{
			int max <- getMaxScore();
			int size <- BatchSize( $MINDBOARD@DialogueDigest.DigestSchemes );
			DigestScheme digestScheme;
			for(int position <- 1; position <= size; position++ )
			{
				BatchRecoverPosition( $MINDBOARD@DialogueDigest.DigestSchemes, position, digestScheme );
				if( digestScheme.DigestSchemeScore != max && allDigestChunksCovered($MINDBOARD@DialogueDigest.DigestSchemes, digestScheme, position))
				{
					removeDigestScheme( digestScheme );					
				}
			}
		}
	}
	
	return ret;
}

bool allDigestChunksCovered(DigestSchemes schemes, DigestScheme scheme, int posOfScheme)
{
	bool ret <- True;
	DigestChunk digestChunk;

	int size <- BatchSize( scheme.DigestChunks );
	for(int position <- 1; position <= size; position++)
	{
		BatchRecoverPosition(scheme.DigestChunks, position, digestChunk);
		if( !! digestChunkCovered(schemes, digestChunk, posOfScheme))
		{
			ret <- False;
			position <- size + 1;
		}
	}

	return ret;
}

bool digestChunkCovered(DigestSchemes schemes, DigestChunk digestChunkToFind, int forbiddenPos)
{
	bool ret <- False;
	DigestScheme digestScheme;
	DigestScheme originalDigestScheme;

	BatchRecoverPosition(schemes, forbiddenPos, originalDigestScheme);

	int size <- BatchSize( schemes );
	for(int position <- 1; position <= size; position++)
	{
		BatchRecoverPosition(schemes, position, digestScheme);
		if(position != forbiddenPos)
		{
			if( containsDigestChunk(digestScheme.DigestChunks, digestChunkToFind) && digestScheme.DigestSchemeScore > originalDigestScheme.DigestSchemeScore)
			{
				ret <- True;
				position <- size + 1;
			}
		}
	}
	
	return ret;
}

bool allDigestChunksCoveredWithEqualPriority(DigestSchemes schemes, DigestScheme scheme, int posOfScheme)
{
	bool ret <- True;
	DigestChunk digestChunk;

	int size <- BatchSize( scheme.DigestChunks );
	for(int position <- 1; position <= size; position++)
	{
		BatchRecoverPosition(scheme.DigestChunks, position, digestChunk);
		if( !! digestChunkCoveredWithEqualPriority(schemes, digestChunk, posOfScheme))
		{
			ret <- False;
			position <- size + 1;
		}
	}

	return ret;
}

bool digestChunkCoveredWithEqualPriority(DigestSchemes schemes, DigestChunk digestChunkToFind, int forbiddenPos)
{
	bool ret <- False;
	DigestScheme digestScheme;
	DigestScheme originalDigestScheme;

	BatchRecoverPosition(schemes, forbiddenPos, originalDigestScheme);

	int size <- BatchSize( schemes );
	for(int position <- 1; position <= size; position++)
	{
		BatchRecoverPosition(schemes, position, digestScheme);
		if(position != forbiddenPos)
		{
			if( containsDigestChunk(digestScheme.DigestChunks, digestChunkToFind) )
			{
				ret <- True;
				position <- size + 1;
			}
		}
	}
	
	return ret;
}

bool containsDigestChunk(DigestChunks chunks, DigestChunk digestChunkToFind)
{
	bool ret <- False;
	DigestChunk recoveredDigestChunk;

	int size <- BatchSize( chunks );
	for(int position <- 1; position <= size; position++)
	{
		BatchRecoverPosition(chunks, position, recoveredDigestChunk);
		if( recoveredDigestChunk == digestChunkToFind )
		{
			ret <- True;
			position <- size + 1;
		}
	}

	return ret;
}

bool hasScope(DigestScheme digestScheme)
{
	DigestChunk digestChunk;

	int size <- BatchSize( digestScheme.DigestChunks );
	for( int position <- 1; position <= size; position++ )
	{
		BatchRecoverPosition( digestScheme.DigestChunks, position, digestChunk );
		if( digestChunk.ScriptTriggerComponent == 'scope' )
		{
			return True;
		}
	}

	return False;	

}

bool oneWithScope()
{
	DigestScheme digestScheme;

	int size <- BatchSize( $MINDBOARD@DialogueDigest.DigestSchemes );
	for( int position <- 1; position <= size; position++ )
	{
		BatchRecoverPosition( $MINDBOARD@DialogueDigest.DigestSchemes, position, digestScheme );
		if( hasScope(digestScheme) )
		{
			return True;
		}
	}

	return False;	
}

bool oneWithoutScope()
{
	DigestScheme digestScheme;

	int size <- BatchSize( $MINDBOARD@DialogueDigest.DigestSchemes );
	for( int position <- 1; position <= size; position++ )
	{
		BatchRecoverPosition( $MINDBOARD@DialogueDigest.DigestSchemes, position, digestScheme );
		if( !! hasScope(digestScheme) )
		{
			return True;
		}
	}

	return False;	
}

bool oneWithBigDifferenceFromMax(int max)
{
	DigestScheme digestScheme;

	int size <- BatchSize( $MINDBOARD@DialogueDigest.DigestSchemes );
	for( int position <- 1; position <= size; position++ )
	{
		BatchRecoverPosition( $MINDBOARD@DialogueDigest.DigestSchemes, position, digestScheme );
		if( Abs(digestScheme.DigestSchemeScore - max) >=100 )
		{
			return True;
		}
	}

	return False;	
}

// Given a script descriptor contained in activated scripts stack we want to move it to the top stack position
procedure moveToTopStack( ScriptDescriptor scriptDescriptor )
{
	ScriptDescriptor recoveredScriptDescriptor;
	ActivatedScriptsStack newActivatedStack;

	int size <- BatchSize($MINDBOARD@DialogueState.ActivatedScriptsStack );
	for( int position <- 1; position <= size; position++ )
	{
		BatchRecoverPosition( $MINDBOARD@DialogueState.ActivatedScriptsStack, position, recoveredScriptDescriptor );
		if( !! recoveredScriptDescriptor == scriptDescriptor)
		{
			BatchInsertEnd( newActivatedStack, recoveredScriptDescriptor );
		}
	}

	BatchInsertEnd( newActivatedStack, scriptDescriptor );
	$MINDBOARD@DialogueState.ActivatedScriptsStack <- newActivatedStack;
}

DigestScheme getFirstWithoutScope()
{
	DigestScheme digestScheme, emptyDigestScheme;
	int size <- BatchSize( $MINDBOARD@DialogueDigest.DigestSchemes );
	for( int position <- 1; position <= size; position++ )
	{
		BatchRecoverPosition( $MINDBOARD@DialogueDigest.DigestSchemes, position, digestScheme );
		if( !! hasScope(digestScheme) )
		{
			return digestScheme;
		}
	}

	return emptyDigestScheme;	
}

DigestScheme getFirstWithBigDifferenceFromMax(int max)
{
	DigestScheme digestScheme, emptyDigestScheme;
	int size <- BatchSize( $MINDBOARD@DialogueDigest.DigestSchemes );
	for( int position <- 1; position <= size; position++ )
	{
		BatchRecoverPosition( $MINDBOARD@DialogueDigest.DigestSchemes, position, digestScheme );
		if( Abs(digestScheme.DigestSchemeScore - max) >= 100 )
		{
			return digestScheme;
		}
	}

	return emptyDigestScheme;	
}

procedure digestScriptInfo( DigestScheme digestScheme )
{
	DigestChunks digestChunks;
	int digestSize;
	int digestPosition;
	DigestChunk digestChunk;

	digestChunks <- digestScheme.DigestChunks;
	digestSize <- BatchSize( digestChunks );

	for (digestPosition <- 1; digestPosition <= digestSize; digestPosition ++ ) 
	{
		BatchRecoverPosition( digestChunks, digestPosition, digestChunk );

		switch (digestChunk.ScriptTriggerComponent) 
		{
			case 'core' 
			{ 
				assignScriptInfoItemCore( digestScheme.ScriptDescriptor, digestChunk.ProferenceChunk.CoreDialogueAct );
			}
			case 'action' 
			{
				assignScriptInfoItemAction( digestScheme.ScriptDescriptor, digestChunk.ProferenceChunk.TaskDialogueAct.Action );
			}
			case 'scope' 
			{
				assignScriptInfoItemScope( digestScheme.ScriptDescriptor, digestChunk.ProferenceChunk.TaskDialogueAct.Scope );
			}
			case 'parameter' 
			{
				assignScriptInfoItemParameter( digestScheme.ScriptDescriptor, digestChunk.ProferenceChunk.Parameter );
			}
		}
	}

	DialogueScript dialogueScript <- getScript(digestScheme.ScriptDescriptor);
	dialogueScript.DigestScheme <- digestScheme;
	setScript( dialogueScript );
}

procedure assignScriptInfoItemCore( ScriptDescriptor scriptDescriptor, CoreDialogueAct coreDialogueAct )
{
	DialogueScript dialogueScript;
	ScriptInfoItems scriptInfoItems;
	int infoSize;
	int infoPosition;
	bool infoFound;
	ScriptInfoItem scriptInfoItem;

	dialogueScript <- getScript( scriptDescriptor );

	scriptInfoItems <- dialogueScript.ScriptInfoItems;
	infoSize <- BatchSize( scriptInfoItems );
	infoFound <- False;

	for (infoPosition <- 1; (infoPosition <= infoSize && (!! infoFound)); infoPosition ++) 
	{
		BatchRecoverPosition( scriptInfoItems, infoPosition, scriptInfoItem );

		if (scriptInfoItem.InfoItemType == 'core') 
		{
			if( scriptInfoItem.InfoItemValue.CoreDialogueAct == coreDialogueAct )
			{
				infoFound <- True;
				// TODO QUITAR
				//scriptInfoItem.InfoItemValue.CoreDialogueAct <- dialogueScript.ScriptTrigger.CoreDialogueAct;

				scriptInfoItem.InfoItemMoveState <- 'captured';
	
				BatchAssignPosition( scriptInfoItems, infoPosition, scriptInfoItem );
				dialogueScript.ScriptInfoItems <- scriptInfoItems;
			}
		}
	}

	setScript( dialogueScript );
}

procedure assignScriptInfoItemAction( ScriptDescriptor scriptDescriptor, Action action )
{
	DialogueScript dialogueScript;
	ScriptInfoItems scriptInfoItems;
	int infoSize;
	int infoPosition;
	bool infoFound;
	ScriptInfoItem scriptInfoItem;

	dialogueScript <- getScript( scriptDescriptor );

	scriptInfoItems <- dialogueScript.ScriptInfoItems;
	infoSize <- BatchSize( scriptInfoItems );
	infoFound <- False;

	for (infoPosition <- 1; (infoPosition <= infoSize && (!! infoFound)); infoPosition ++) 
	{
		BatchRecoverPosition( scriptInfoItems, infoPosition, scriptInfoItem );

		if (scriptInfoItem.InfoItemType == 'action') 
		{
			if( proferenceActionContains(action, scriptInfoItem.InfoItemValue.ActionDomain) )
			{
				infoFound <- True;
				// TODO QUITAR
				//scriptInfoItem.InfoItemValue.ActionDomain <- dialogueScript.ScriptTrigger.ActionDomain;

				scriptInfoItem.InfoItemMoveState <- 'captured';
	
				BatchAssignPosition( scriptInfoItems, infoPosition, scriptInfoItem );
				dialogueScript.ScriptInfoItems <- scriptInfoItems;
			}
		}
	}

	setScript( dialogueScript );
}

procedure assignScriptInfoItemScope( ScriptDescriptor scriptDescriptor, Scope scope )
{
	DialogueScript dialogueScript;
	ScriptInfoItems scriptInfoItems;
	int infoSize;
	int infoPosition;
	bool infoFound;
	ScriptInfoItem scriptInfoItem;

	dialogueScript <- getScript( scriptDescriptor );

	scriptInfoItems <- dialogueScript.ScriptInfoItems;
	infoSize <- BatchSize( scriptInfoItems );
	infoFound <- False;

	for (infoPosition <- 1; (infoPosition <= infoSize && (!! infoFound)); infoPosition ++) 
	{
		BatchRecoverPosition( scriptInfoItems, infoPosition, scriptInfoItem );

		if (scriptInfoItem.InfoItemType == 'scope') 
		{
			if(scriptInfoItem.InfoItemValue.Scope == scope)
			{
				infoFound <- True;
				// TODO QUITAR
				//scriptInfoItem.InfoItemValue.Scope <- dialogueScript.ScriptTrigger.Scope;

				scriptInfoItem.InfoItemMoveState <- 'captured';

				BatchAssignPosition( scriptInfoItems, infoPosition, scriptInfoItem );
				dialogueScript.ScriptInfoItems <- scriptInfoItems;
			}
		}
	}

	setScript( dialogueScript );
}

procedure assignScriptInfoItemParameter(ScriptDescriptor scriptDescriptor, Parameter parameter)
{
	DialogueScript dialogueScript;
	ScriptInfoItems scriptInfoItems;
	int infoSize;
	int infoPosition;
	bool infoFound;
	ScriptInfoItem scriptInfoItem;

	dialogueScript <- getScript( scriptDescriptor );

	scriptInfoItems <- dialogueScript.ScriptInfoItems;
	infoSize <- BatchSize( scriptInfoItems );
	infoFound <- False;

	for (infoPosition <- 1; (infoPosition <= infoSize && (!! infoFound)); infoPosition ++) 
	{
		BatchRecoverPosition( scriptInfoItems, infoPosition, scriptInfoItem );

		if (scriptInfoItem.InfoItemType == 'parameter') 
		{
			if (scriptInfoItem.InfoItemParameterType == parameter.ParameterType) 
			{
				infoFound <- True;

				// Move to History
				if( scriptInfoItem.InfoItemValue.Parameter )
				{
					BatchInsertEnd( scriptInfoItem.InfoItemHistory, scriptInfoItem.InfoItemValue.Parameter );
				}

				scriptInfoItem.InfoItemValue.Parameter <- parameter;

				scriptInfoItem.InfoItemMoveState <- 'captured';

				BatchAssignPosition( scriptInfoItems, infoPosition, scriptInfoItem );
				dialogueScript.ScriptInfoItems <- scriptInfoItems;
			}
		}
	}

	setScript( dialogueScript );
}

procedure recoveryMemoryCells( ScriptDescriptor scriptDescriptor )
{
	DialogueScript dialogueScript;

	dialogueScript <- getScript( scriptDescriptor );

	int size <- BatchSize( dialogueScript.ScriptInfoItems );		
	for(int position <- 1; position <= size; position++)
	{
		ScriptInfoItem scriptInfoItem;
		BatchRecoverPosition( dialogueScript.ScriptInfoItems, position, scriptInfoItem );

		if( scriptInfoItem.MemoryCellName )
 		{
			Parameter recoveredParameter <- recoverMemoryCell( scriptInfoItem.MemoryCellName );
			if(recoveredParameter && scriptInfoItem.InfoItemState == 'empty' && !! scriptInfoItem.InfoItemMoveState == 'captured')
			{
				scriptInfoItem.InfoItemValue.Parameter <- recoveredParameter;
				scriptInfoItem.InfoItemMoveState <- 'captured';
				BatchAssignPosition( dialogueScript.ScriptInfoItems, position, scriptInfoItem );
				setScript( dialogueScript );
			}
		}
	}
}

Parameter recoverMemoryCell( MemoryCellName memoryCellName )
{
	int size <- BatchSize( $MINDBOARD@DialogueMemory.CapturedMemoryCells );
	for(int position <- 1; position <= size; position++)
	{
		CapturedMemoryCell memoryCell;
		BatchRecoverPosition($MINDBOARD@DialogueMemory.CapturedMemoryCells, position, memoryCell);

		if(memoryCellName == memoryCell.MemoryCellName)
		{
			return memoryCell.MemoryContent;
		}
	}

	Parameter emptyParameter;
	return emptyParameter;
}

procedure saveScriptToMemory( ScriptDescriptor scriptDescriptor )
{
	DialogueScript dialogueScript;

	dialogueScript <- getScript( scriptDescriptor );

	int size <- BatchSize( dialogueScript.ScriptInfoItems );		
	for(int position <- 1; position <= size; position++)
	{
		ScriptInfoItem scriptInfoItem;
		BatchRecoverPosition( dialogueScript.ScriptInfoItems, position, scriptInfoItem );

		if( scriptInfoItem.MemoryCellName && scriptInfoItem.InfoItemValue.Parameter)
 		{
			saveMemoryCell( scriptInfoItem.MemoryCellName, scriptInfoItem.InfoItemValue.Parameter );
		}
	}	
}

procedure saveMemoryCell( MemoryCellName memoryCellName, Parameter parameter )
{
	bool found <- False;
	int size <- BatchSize( $MINDBOARD@DialogueMemory.CapturedMemoryCells );
	CapturedMemoryCell memoryCell;
	for(int position <- 1; position <= size; position++)
	{
		BatchRecoverPosition($MINDBOARD@DialogueMemory.CapturedMemoryCells, position, memoryCell);

		if(memoryCellName == memoryCell.MemoryCellName)
		{
			memoryCell.MemoryContent <- parameter;
			BatchAssignPosition($MINDBOARD@DialogueMemory.CapturedMemoryCells, position, memoryCell);
			found <- True;
		}
	}

	if(!! found)
	{
		memoryCell.MemoryCellName <- memoryCellName;
		memoryCell.MemoryContent <- parameter;
		BatchInsertEnd($MINDBOARD@DialogueMemory.CapturedMemoryCells, memoryCell);
	}

	// TODO QUITAR
	SpyMessage($MINDBOARD@DialogueMemory.CapturedMemoryCells);
}

