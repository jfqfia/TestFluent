// ****************************************************************************
//
//	Utility functions related with the extraction or update of information
// 	in batches sited in mindboard memory
//
// ****************************************************************************
//
//	PROJECT	: Fluency
// 	DOMAIN  : Kernel
//	MODULE  : DialogueManager
//	PACKAGE	: Functions
// 	FOLDER  : -
// 	FILE	: DialogueScheme
//
// ****************************************************************************

// Given the script descriptor, returns the position in the working scheme.
int indexOfScript(string scriptDescriptor)
{
	DialogueScript dialogueScript;

	int schemeSize <- BatchSize( $MINDBOARD@WorkingDialogueScheme.DialogueScripts);
	for ( int position <- 1; position <= schemeSize; position ++) 
	{
		BatchRecoverPosition( $MINDBOARD@WorkingDialogueScheme.DialogueScripts, position, dialogueScript );

		if (scriptDescriptor == dialogueScript.ScriptDescriptor)
		{
			return position;
		}
	}

	return 0;
}


// Given the script descriptor, returns the script. 
DialogueScript getScript(string scriptDescriptor)
{
	DialogueScript dialogueScript;

	int schemeSize <- BatchSize( $MINDBOARD@WorkingDialogueScheme.DialogueScripts);
	for ( int position <- 1; position <= schemeSize; position ++) 
	{
		BatchRecoverPosition( $MINDBOARD@WorkingDialogueScheme.DialogueScripts, position, dialogueScript );

		if (scriptDescriptor == dialogueScript.ScriptDescriptor)
		{
			return dialogueScript;
		}
	}

	DialogueScript nullDialogueScript;
	return nullDialogueScript;
}

// Returns de current script.
DialogueScript getCurrentScript()
{
	return getScript( $MINDBOARD@DialogueState.CurrentScriptDescriptor );
}

// Given the script and a node descriptor, returns the node
ScriptNode getNodeFromScript(DialogueScript dialogueScript, string nodeDescriptor)
{
	ScriptNode scriptNode;

	int scriptSize <- BatchSize( dialogueScript.ScriptNodes );
	for ( int position <- 1; position <= scriptSize; position ++) 
	{
		BatchRecoverPosition( dialogueScript.ScriptNodes, position, scriptNode );

		if (nodeDescriptor == scriptNode.ScriptNodeDescriptor)
		{
			return scriptNode;
		}
	}

	ScriptNode nullScriptNode;
	return nullScriptNode;
}

// Given a node descriptor, returns the node inside current script.
ScriptNode getNodeFromCurrentScript( ScriptNodeDescriptor nodeDescriptor )
{
	DialogueScript dialogueScript;

	dialogueScript <- getCurrentScript();

	return getNodeFromScript( dialogueScript, nodeDescriptor ); 
}

// Returns the current node from current script.
ScriptNode getCurrentNode()
{
	DialogueScript dialogueScript;

	dialogueScript <- getCurrentScript();

	return getNodeFromCurrentScript( dialogueScript.CurrentNodeDescriptor );
}

// Returns the type of the current node from current script.
ScriptNodeType getCurrentNodeType()
{
	ScriptNode scriptNode;

	scriptNode <- getCurrentNode();

	return scriptNode.ScriptNodeType;
}

// Returns de DigestScheme corresponding to the given ScriptDescriptor
DigestScheme getDigestScheme(ScriptDescriptor scriptDescriptor)
{
	DigestScheme recoveredDigestScheme, emptyDigestScheme;

	int size <- BatchSize( $MINDBOARD@DialogueDigest.DigestSchemes );
	for ( int position <- 1; position <= size; position ++) 
	{
		BatchRecoverPosition( $MINDBOARD@DialogueDigest.DigestSchemes, position, recoveredDigestScheme );

		if ( recoveredDigestScheme.ScriptDescriptor == scriptDescriptor)
		{
			return recoveredDigestScheme;
		}
	}

	return emptyDigestScheme;
}

// Saves DigestScheme into DialogueDigest structure
procedure setDigestScheme( DigestScheme digestScheme )
{
	DigestScheme recoveredDigestScheme;
	
	int size <- BatchSize( $MINDBOARD@DialogueDigest.DigestSchemes );
	for ( int position <- 1; position <= size; position ++) 
	{
		BatchRecoverPosition( $MINDBOARD@DialogueDigest.DigestSchemes, position, recoveredDigestScheme );

		if (recoveredDigestScheme.ScriptDescriptor == digestScheme.ScriptDescriptor)
		{
			BatchAssignPosition( $MINDBOARD@DialogueDigest.DigestSchemes, position, digestScheme);
		}
	}
}

// Removes a digest scheme from the batch belonging to mindboard structure
procedure removeDigestScheme( DigestScheme digestScheme )
{
	DigestSchemes digestSchemes;
	DigestScheme recoveredDigestScheme;

	int size <- BatchSize($MINDBOARD@DialogueDigest.DigestSchemes );
	for( int position <- 1; position <= size; position++ )
	{
		BatchRecoverPosition( $MINDBOARD@DialogueDigest.DigestSchemes, position, recoveredDigestScheme );
		if( !! recoveredDigestScheme.ScriptDescriptor == digestScheme.ScriptDescriptor)
		{
			BatchInsertEnd( digestSchemes, recoveredDigestScheme );
		}
	}
	$MINDBOARD@DialogueDigest.DigestSchemes <- digestSchemes;
}

// Saves script into working scheme (if it exists).
procedure setScript(DialogueScript dialogueScript)
{
	DialogueScript recDialogueScript;

	int schemeSize <- BatchSize( $MINDBOARD@WorkingDialogueScheme.DialogueScripts);
	for ( int position <- 1; position <= schemeSize; position ++) 
	{
		BatchRecoverPosition( $MINDBOARD@WorkingDialogueScheme.DialogueScripts, position, recDialogueScript );

		if (dialogueScript.ScriptDescriptor == recDialogueScript.ScriptDescriptor)
		{
			BatchAssignPosition( $MINDBOARD@WorkingDialogueScheme.DialogueScripts, position, dialogueScript);
		}
	}
}

// Saves node into script (if it exists).
procedure setNodeToScript(DialogueScript dialogueScript, ScriptNode scriptNode)
{
	ScriptNode recScriptNode;

	int scriptSize <- BatchSize( dialogueScript.ScriptNodes );
	for ( int position <- 1; position <= scriptSize; position++ ) 
	{
		BatchRecoverPosition( dialogueScript.ScriptNodes, position, recScriptNode );

		if (scriptNode.ScriptNodeDescriptor == recScriptNode.ScriptNodeDescriptor)
		{
			BatchAssignPosition( dialogueScript.ScriptNodes, position, scriptNode);
		}
	}
	setScript(dialogueScript);
}

// Removes and returns a dialogue script from the working dialogue scheme
DialogueScript removeFromWorkingDialogueScheme( ScriptDescriptor scriptDescriptor )
{
	DialogueScripts dialogueScripts;
	DialogueScript ret, recoveredDialogueScript;

	int size <- BatchSize( $MINDBOARD@WorkingDialogueScheme.DialogueScripts );
	for( int position <- 1; position <= size; position++ )
	{
		BatchRecoverPosition( $MINDBOARD@WorkingDialogueScheme.DialogueScripts, position, recoveredDialogueScript );
		if( recoveredDialogueScript.ScriptDescriptor == scriptDescriptor )
		{
			ret <- recoveredDialogueScript;
		}
		else
		{
			BatchInsertEnd( dialogueScripts, recoveredDialogueScript );
		}
	}
	$MINDBOARD@WorkingDialogueScheme.DialogueScripts <- dialogueScripts;	

	return ret;
}

// Removes and returns a dialogue script from the original dialogue scheme
DialogueScript removeFromOriginalDialogueScheme( ScriptDescriptor scriptDescriptor )
{
	DialogueScripts dialogueScripts;
	DialogueScript ret, recoveredDialogueScript;

	int size <- BatchSize( $MINDBOARD@DialogueScheme.DialogueScripts );
	for( int position <- 1; position <= size; position++ )
	{
		BatchRecoverPosition( $MINDBOARD@DialogueScheme.DialogueScripts, position, recoveredDialogueScript );
		if( recoveredDialogueScript.ScriptDescriptor == scriptDescriptor )
		{
			ret <- recoveredDialogueScript;
		}
		else
		{
			BatchInsertEnd( dialogueScripts, recoveredDialogueScript );
		}
	}
	$MINDBOARD@DialogueScheme.DialogueScripts <- dialogueScripts;	

	return ret;
}


// Looks for a given script in the original dialogue scheme
DialogueScript getFromOriginalDialogueScheme( ScriptDescriptor scriptDescriptor )
{
	DialogueScript recoveredDialogueScript;

	int size <- BatchSize( $MINDBOARD@DialogueScheme.DialogueScripts );
	for( int position <- 1; position <= size; position++ )
	{
		BatchRecoverPosition( $MINDBOARD@DialogueScheme.DialogueScripts, position, recoveredDialogueScript );
		if( recoveredDialogueScript.ScriptDescriptor == scriptDescriptor )
		{
			return recoveredDialogueScript;
		}
	}

	DialogueScript emptyDialogueScript;
	return emptyDialogueScript;
}













