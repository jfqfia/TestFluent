// **************************************************
//
//	
//
// **************************************************
//
//	PROJECT	:	
//	MODULE  :	
//	PACKAGE :	
//	FILE	:	
//
// **************************************************

procedure startTalkingTurn()
{
	initMindBoardOutput();
}

procedure digestSearchScripts()
{
	ProferenceChunk proference;
	DialogueDigest emptyDialogueDigest;
	DialogueScripts dialogueScripts;
	DialogueScript dialogueScript;
	ScriptComponent scriptComponent;

	$MINDBOARD@DialogueDigest <-emptyDialogueDigest;

	SpyMessage("===============================================");
	SpyMessage("XXXX: digestSearchScripts");

	int profSize <- BatchSize( $MINDBOARD@DialogueInput.ProferenceChunks );
	for( int profPosition <- 1; profPosition <= profSize; profPosition++ ) 
	{
		BatchRecoverPosition( $MINDBOARD@DialogueInput.ProferenceChunks, profPosition, proference );

		SpyMessage("XXXX: Proference");
		SpyMessage(proference);
		SpyMessage("****************************************");

		dialogueScripts <- $MINDBOARD@DialogueScheme.DialogueScripts;

		int scriptSize <- BatchSize( dialogueScripts );
		for (int scriptPosition <- 1; scriptPosition <= scriptSize; scriptPosition ++ ) 
		{
			BatchRecoverPosition( dialogueScripts, scriptPosition, dialogueScript );
			SpyMessage("XXXX:       ScriptDescriptor: ",dialogueScript.ScriptDescriptor);

			scriptComponent <- getCompatibleScriptComponent( dialogueScript, proference );

			SpyMessage("XXXX:                getCompatible ",dialogueScript.ScriptDescriptor," => ",scriptComponent);
			
		}

		
		// BatchInsertEnd( $MINDBOARD@DialogueState.ActivatedScriptsStack, 'BookAppointment' ); 
	}

}

ScriptComponent getCompatibleScriptComponent(DialogueScript dialogueScript, ProferenceChunk proference)
{
	ScriptComponent scriptComponent;

	if (proference.CoreDialogueAct) 
	{
		if (dialogueScript.DialogueTrigger.CoreDialogueAct)
		{
			if (proference.CoreDialogueAct == dialogueScript.DialogueTrigger.CoreDialogueAct) 
			{
				return 'core';
			}
		}
	}

	/*
	if (proference.TaskDialogueAct) 
	{
		if (dialogueScript.DialogueTrigger.TaskDialogueAct)
		{
			if (proference.TaskDialogueAct.Action == dialogueScript.DialogueTrigger.TaskDialogueAct.Action) 
			{
				return 'action';
			}
		}
	}
	*/

	return scriptComponent;
}

procedure activateScripts()
{
	// TODO
	// Actually we only set, as current script, the last of the ActivatedScriptsStack batch

	int size;
	string scriptDescriptor;

	size <- BatchSize( $MINDBOARD@DialogueState.ActivatedScriptsStack );
	BatchRecoverPosition( $MINDBOARD@DialogueState.ActivatedScriptsStack, size, scriptDescriptor );

	$MINDBOARD@DialogueState.CurrentScriptDescriptor <- scriptDescriptor;
}

procedure selectCurrentNode()
{
	DialogueScript dialogueScript;
	ScriptNodeDescriptor nodeDescriptor;
	int size;
	int position;
	ActivatedScriptNodes activatedScriptNodes;
	ScriptNode node;

	dialogueScript <- getCurrentScript( );
	size <- BatchSize( dialogueScript.ScriptNodes );
	for(position <- 1; position <= size; position++) 
	{
		BatchRecoverPosition( dialogueScript.ScriptNodes, position, node );
		if( preconditionsValidated(node) )
		{ 
			BatchInsertEnd( activatedScriptNodes, node.ScriptNodeDescriptor );
		}
	}

	dialogueScript.ActivatedScriptNodes <- activatedScriptNodes;

	// TODO
	// Define activated nodes policy
	// Here we select last node as current
	// It would be better to select randomly the next node

	size <- BatchSize( activatedScriptNodes );
	if( size > 0 )
	{
		BatchRecoverPosition( activatedScriptNodes, size, nodeDescriptor );
		dialogueScript.CurrentNodeDescriptor <- nodeDescriptor;
	}
	else
	{
		dialogueScript.CurrentNodeDescriptor <- '';
	}

	setScript( dialogueScript );
}

procedure processTellNode()
{
	ScriptNode currentNode;

	currentNode <- getCurrentNode();

	BatchInsertEnd( $MINDBOARD@DialogueOutput.DialogueActs, 
			currentNode.ScriptNodeContent.DialogueAct );

	executePostconditions( currentNode );
}

procedure processExecuteNode()
{
	ScriptNode currentNode;

	currentNode <- getCurrentNode();

	executePostconditions( currentNode );
}

procedure processWaitNode()
{
	ScriptNode currentNode;

	currentNode <- getCurrentNode();

	BatchInsertEnd( $MINDBOARD@DialogueOutput.DialogueActs, 
			currentNode.ScriptNodeContent.DialogueAct );

	executePostconditions( currentNode );
}

procedure closeTalkingTurn()
{
	initMindBoardInput();
}




