// **************************************************
//
//	
//
// **************************************************
//
//	PROJECT	:	
//	MODULE  :	
//	PACKAGE :	
//	FILE	:	
//
// **************************************************

procedure startTalkingTurn()
{
	initMindBoardOutput();
}

procedure digestExpectatives()
{
	ProferenceChunk proference;

	DialogueScript dialogueScript;
	dialogueScript <- getCurrentScript();
	
	if( dialogueScript )
	{
		if( dialogueScript.ScriptExpectative )
		{
			int profSize <- BatchSize( $MINDBOARD@DialogueInput.ProferenceChunks );
			for( int profPosition <- 1; profPosition <= profSize; profPosition++ ) 
			{
				BatchRecoverPosition( $MINDBOARD@DialogueInput.ProferenceChunks, profPosition, proference );

				ParameterType paramType <- dialogueScript.ScriptExpectative.ParameterType;
				if(paramType && proference.Parameter.ParameterType)
				{
					if( compatibleExpectativeTypes(paramType, proference.Parameter.ParameterType) )
					{
						ProferenceChunk convertedProference;
						convertedProference <- convertProferenceToExpectative(paramType, proference); 
						BatchAssignPosition( $MINDBOARD@DialogueInput.ProferenceChunks, profPosition, convertedProference );
					}
				}
			}
		}
	}
}

procedure digestSearchScripts()
{
	ProferenceChunk proference;

	DigestSchemes emptyDigestSchemes;
	ProferenceChunks emptyProferenceChunks;
	DialogueScripts dialogueScripts;
	DialogueScript dialogueScript;
	ScriptTriggerComponent scriptComponent;
	bool digested;

	$MINDBOARD@DialogueDigest.DigestSchemes <- emptyDigestSchemes;
	$MINDBOARD@DialogueState.NotDigestedProferenceChunks <- emptyProferenceChunks;

	int profSize <- BatchSize( $MINDBOARD@DialogueInput.ProferenceChunks );
	for( int profPosition <- 1; profPosition <= profSize; profPosition++ ) 
	{
		BatchRecoverPosition( $MINDBOARD@DialogueInput.ProferenceChunks, profPosition, proference );

		dialogueScripts <- $MINDBOARD@DialogueScheme.DialogueScripts;
		int scriptSize <- BatchSize( dialogueScripts );
		digested <- False;
		for (int scriptPosition <- 1; scriptPosition <= scriptSize; scriptPosition ++ ) 
		{
			BatchRecoverPosition( dialogueScripts, scriptPosition, dialogueScript );
			
			scriptComponent <- getCompatibleScriptTriggerComponent( dialogueScript, proference );
			if( Filled(scriptComponent) )
			{
				insertDigestScheme(dialogueScript.ScriptDescriptor, proference, scriptComponent);
				digested <- True;	
			}
		}
		if( !! digested )
		{
			BatchInsertEnd( $MINDBOARD@DialogueState.NotDigestedProferenceChunks, proference );
		}
	} 

	scoreDigestSchemes();
}

/*

Primera estrategia para activación de Scripts

1. Si el script activo está en DialogueDigest, 
	1.1 Mover sus parámetros 
	1.2 Eliminarlo de DialogueDigest 
	1.3 currentFlag <- True

2. Procesar los scripts activos y por cada uno de ellos
	2.1 Si esté en DialogueDigest
		2.1.1 Mover sus parámetros 
		2.1.2 Eliminarlo de DialogueDigest 
		2.1.3 activeFlag <- True
		2.1.4 Si !! currentFlag
			2.1.4.1 Moverlo a la cabeza

3. De los que queden en DialogueDigest
	3.1 Si hay uno o varios con scope
		3.1.1 Eliminar los demás de DialogueDigest
		3.1.2 Eliminar aquellos cuya puntuación difiera más de 100 puntos del máximo
	3.2 Si no
		3.2.1 Si currentFlag || activeFlag		
			3.2.1.1 Eliminar todos de DialogueDigest
		3.2.2 Si no
			3.2.2.1 Eliminar todos los scripts cuyos triggers ya están cubiertos por otros scripts con puntuación mayor (excepto los de mayor puntuación que se mantienen siempre)

4. Si queda alguno
	4.1 Ordenar DialogueDigest según puntuación
	4.2 Insertar al final de los activos según puntuación
	4.3 Mover cada uno de sus parámetros a cada uno de ellos

5. Meter scripts de desambiguación si hemos metido alguno en el paso anterior
	5.1 Introducir WD: "Weak Desambiguator" Elegir el orden entre los nuevos que hemos metido que empaten en puntuación o que sean scopes
	5.2 Introducir SD: "Strong Desambiguator" Elegir cuál ejecutar para descartar uno de ellos (sin scope y empatando en puntuación)

*/

procedure activateScripts()
{
	bool activeFlag;
	bool currentFlag;
	DigestScheme digestScheme;
	int digestSize;

	activeFlag <- False;
	currentFlag <- False;		
	digestSize <- BatchSize( $MINDBOARD@DialogueDigest.DigestSchemes );

	if(digestSize > 0)
	{
		// 1.
		digestScheme <- getDigestScheme( $MINDBOARD@DialogueState.CurrentScriptDescriptor);
		if(digestScheme)
		{
			digestScriptInfo( digestScheme );
			removeDigestScheme( digestScheme );
			currentFlag <- True;
		}

		// 2.
		int activeSize <- BatchSize( $MINDBOARD@DialogueState.ActivatedScriptsStack );
		for( int position <- 1; position <= activeSize; position++ )
		{
			ScriptDescriptor scriptDescriptor;
			BatchRecoverPosition( $MINDBOARD@DialogueState.ActivatedScriptsStack, position, scriptDescriptor );
	
			digestScheme <- getDigestScheme( scriptDescriptor );
			if(digestScheme)
			{
				digestScriptInfo( digestScheme );
				removeDigestScheme( digestScheme );
				activeFlag <- True;
				if(!! currentFlag)
				{	
					moveToTopStack( digestScheme.ScriptDescriptor );	
				}
			}
		}

		// 3.
		bool scopeFlag <- filterDialogueDigest(currentFlag, activeFlag);

		// 4.
		digestSize <- BatchSize( $MINDBOARD@DialogueDigest.DigestSchemes );
		for( int i <- 1; i <= digestSize; i++ )
		{
			digestScheme <- selectMinScoreDigestScheme();
			digestScriptInfo( digestScheme );
			BatchInsertEnd( $MINDBOARD@DialogueState.ActivatedScriptsStack, digestScheme.ScriptDescriptor);
			removeDigestScheme( digestScheme );
		}

		// 5.
		if(digestSize > 1)
		{
			if(scopeFlag)
			{
				// Meter un WD(digestSize) al final
				pushWeakDisambiguator(digestSize, True);
			}
			else
 			{
				// Aquí hay mucha más casuística: mirar en Disambiguators.lkt
				processNewActivatedScriptsWithNoScope(digestSize);
			}
		}
	}
}

procedure selectCurrentScript()
{
	ScriptDescriptor scriptDescriptor;	
	int numberActives <- BatchSize( $MINDBOARD@DialogueState.ActivatedScriptsStack );
	BatchRecoverPosition( $MINDBOARD@DialogueState.ActivatedScriptsStack, numberActives, scriptDescriptor ); 

	$MINDBOARD@DialogueState.CurrentScriptDescriptor <- scriptDescriptor;
	recoveryMemoryCells( scriptDescriptor );
}

procedure reviewScriptInfoItemStates()
{
	DialogueScript script;
	int size;
	int position;
	ScriptInfoItem scriptInfoItem;

	script <- getCurrentScript();
	size <- BatchSize( script.ScriptInfoItems );

	bool ret <- False;
	for( position <- 1; position <= size; position++ )
	{
		BatchRecoverPosition(script.ScriptInfoItems, position, scriptInfoItem);

		ret <- reviewState(script.ScriptDescriptor, position, scriptInfoItem ) || ret;
	}

	if(ret)
	{
		deleteDisagreement();
	}
}

procedure selectCurrentNode()
{
	DialogueScript dialogueScript;
	ScriptNodeDescriptor nodeDescriptor;
	int size;
	int position;
	ActivatedScriptNodes activatedScriptNodes;
	ScriptNode node;

	dialogueScript <- getCurrentScript();
	size <- BatchSize( dialogueScript.ScriptNodes );
	for(position <- 1; position <= size; position++) 
	{
		BatchRecoverPosition( dialogueScript.ScriptNodes, position, node );
		if( preconditionsValidated(node) )
		{ 
			BatchInsertEnd( activatedScriptNodes, node.ScriptNodeDescriptor );
		}
	}
	
	if( dialogueScript.DefaultNodeDescriptor && $MINDBOARD@DialogueState.PulledScript )
	{
		BatchInsertEnd( activatedScriptNodes, dialogueScript.DefaultNodeDescriptor );
	}
	$MINDBOARD@DialogueState.PulledScript <- False;

	activatedScriptNodes <- filterMinPriority( activatedScriptNodes );
	activatedScriptNodes <- orderByType( activatedScriptNodes );
	dialogueScript.ActivatedScriptNodes <- activatedScriptNodes;
	
	size <- BatchSize( activatedScriptNodes );
	if( size > 0 )
	{
		int rand <- Random(1, size);
		BatchRecoverPosition( activatedScriptNodes, rand, nodeDescriptor );
		dialogueScript.CurrentNodeDescriptor <- nodeDescriptor;
		ScriptNode currentNode <- getNodeFromScript(dialogueScript, nodeDescriptor);
		currentNode.ScriptNodeCounter <- currentNode.ScriptNodeCounter + 1;	
		setNodeToScript(dialogueScript, currentNode);
		dialogueScript <- getCurrentScript();
	}
	else
	{
		// If we get here there is an error in the script program
		dialogueScript.CurrentNodeDescriptor <- '';
		SpyMessage("ERROR in script program");
	}

	setScript( dialogueScript );
}

procedure processNode()
{
	ScriptNode currentNode;

	currentNode <- getCurrentNode();

	executePostconditions( currentNode );
}

procedure closeTalkingTurn()
{
	initMindBoardInput();
	resetMoveStates();
}




