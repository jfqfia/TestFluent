// **************************************************
//
//	
//
// **************************************************
//
//	PROJECT	:	
//	MODULE  :	
//	PACKAGE :	
//	FILE	:	
//
// **************************************************

procedure startTalkingTurn()
{
	initMindBoardOutput();
}

procedure digestExpectatives()
{
	ProferenceChunk proference;

	DialogueScript dialogueScript;
	dialogueScript <- getCurrentScript();
	
	if( dialogueScript )
	{
		if( dialogueScript.ScriptExpectative )
		{
			int profSize <- BatchSize( $MINDBOARD@DialogueInput.ProferenceChunks );
			for( int profPosition <- 1; profPosition <= profSize; profPosition++ ) 
			{
				ProferenceChunk expectative <- dialogueScript.ScriptExpectative.ProferenceChunk;
				BatchRecoverPosition( $MINDBOARD@DialogueInput.ProferenceChunks, profPosition, proference );

				// CoreDialogueAct expectatives					
				expectative <& proference;
				if( expectative )
				{
					dialogueScript.ScriptExpectative.ProferenceChunk <- expectative; 
					dialogueScript.ScriptExpectative.InfoItemState <- 'captured';
					setScript(dialogueScript);
				}

				// ParameterType expectatives
				ParameterType paramType <- dialogueScript.ScriptExpectative.ParameterType;
				if(paramType && proference.Parameter.ParameterType)
				{
					if( compatibleExpectativeTypes(paramType, proference.Parameter.ParameterType) )
					{
						ProferenceChunk convertedProference;
						convertedProference <- convertProferenceToExpectative(paramType, proference); 
						BatchAssignPosition( $MINDBOARD@DialogueInput.ProferenceChunks, profPosition, convertedProference );
					}
				}
			}
		}
	}
}

procedure digestSearchScripts()
{
	ProferenceChunk proference;

	DigestSchemes emptyDigestSchemes;
	DialogueScripts dialogueScripts;
	DialogueScript dialogueScript;
	ScriptTriggerComponent scriptComponent;

	$MINDBOARD@DialogueDigest.DigestSchemes <- emptyDigestSchemes;

	// TODO QUITAR
	// SpyMessage("===============================================");
	// SpyMessage("XXXX: digestSearchScripts - START");

	int profSize <- BatchSize( $MINDBOARD@DialogueInput.ProferenceChunks );
	for( int profPosition <- 1; profPosition <= profSize; profPosition++ ) 
	{
		BatchRecoverPosition( $MINDBOARD@DialogueInput.ProferenceChunks, profPosition, proference );

		dialogueScripts <- $MINDBOARD@DialogueScheme.DialogueScripts;
		int scriptSize <- BatchSize( dialogueScripts );
		for (int scriptPosition <- 1; scriptPosition <= scriptSize; scriptPosition ++ ) 
		{
			BatchRecoverPosition( dialogueScripts, scriptPosition, dialogueScript );
			
			scriptComponent <- getCompatibleScriptTriggerComponent( dialogueScript, proference );
			if( Filled(scriptComponent) )
			{
				insertDigestScheme(dialogueScript.ScriptDescriptor, proference, scriptComponent);
			}
		}
	}

	scoreDigestSchemes();

	// TODO QUITAR
	// SpyMessage($MINDBOARD@DialogueDigest);
	// SpyMessage("XXXX: digestSearchScripts - END");
	// SpyMessage("===============================================");
}

/*

1. Si el script activo está en DialogueDigest, 
	1.1 Mover sus parámetros 
	1.2 Eliminarlo de DialogueDigest 
	1.3 currentFlag <- True

2. Procesar los scripts activos y por cada uno de ellos
	2.1 Si esté en DialogueDigest
		2.1.1 Mover sus parámetros 
		2.1.2 Eliminarlo de DialogueDigest 
		2.1.3 activeFlag <- True
		2.1.4 Si !! currentFlag
			2.1.4.1 ¿Moverlo a la cabeza?

3. De los que queden en DialogueDigest
	3.1 Si hay uno o varios con scope
		3.1.1 Eliminar los demás de DialogueDigest
	3.2 Si no
		3.2.1 Si currentFlag || activeFlag		
			3.2.1.1 Eliminar todos de DialogueDigest

4. Si queda alguno
	4.1 Ordenar DialogueDigest según puntuación
	4.2 Insertar al final de los activos según puntuación
	4.3 Mover cada uno de sus parámetros a cada uno de ellos

*/

procedure activateScripts()
{
	bool activeFlag;
	bool currentFlag;
	DigestScheme digestScheme;
	int digestSize;

	activeFlag <- False;
	currentFlag <- False;		
	digestSize <- BatchSize( $MINDBOARD@DialogueDigest.DigestSchemes );
	if(digestSize > 0)
	{
		// 1.
		digestScheme <- getDigestScheme( $MINDBOARD@DialogueState.CurrentScriptDescriptor);
		if(digestScheme)
		{
			digestScriptInfo( digestScheme );
			removeDigestScheme( digestScheme );
			currentFlag <- True;
		}

		// 2.
		int activeSize <- BatchSize( $MINDBOARD@DialogueState.ActivatedScriptsStack );
		for( int position <- 1; position <= activeSize; position++ )
		{
			ScriptDescriptor scriptDescriptor;
			BatchRecoverPosition( $MINDBOARD@DialogueState.ActivatedScriptsStack, position, scriptDescriptor );
	
			digestScheme <- getDigestScheme( $MINDBOARD@DialogueState.CurrentScriptDescriptor);
			if(digestScheme)
			{
				digestScriptInfo( digestScheme );
				removeDigestScheme( digestScheme );
				activeFlag <- True;
				if(!! currentFlag)
				{	
					moveToTopStack( digestScheme.ScriptDescriptor );
				}
			}
		}

		// 3.
		filterDialogueDigest(currentFlag, activeFlag);

		// 4.
		digestSize <- BatchSize( $MINDBOARD@DialogueDigest.DigestSchemes );
		for( int i <- 1; i <= digestSize; i++ )
		{
			digestScheme <- selectMinScoreDigestScheme();
			digestScriptInfo( digestScheme );
			BatchInsertEnd( $MINDBOARD@DialogueState.ActivatedScriptsStack, digestScheme.ScriptDescriptor);
			removeDigestScheme( digestScheme );
		}
	}
	else
	{
		// TODO: What to do if there is no scripts in this batch? (i.e. nothing has been recognized by the NLU system)
	}

	// SpyMessage("===============================================");
	// SpyMessage("XXXX: activateScripts - START");
	// SpyMessage($MINDBOARD@DialogueState.ActivatedScriptsStack);
	// SpyMessage("XXXX: activateScripts - END");
	// SpyMessage("===============================================");
}

procedure selectCurrentScript()
{
	// TODO
	// Seleccionar el script actual, cosas a tener en cuenta:
	// Si ha cambiado la cabeza de la pila de activos (hay cambio de script actual) 
	// ¿qué hay que hacer?
	
	// Por ahora implementada la estrategia básica: La cabeza de la pila de scripts
	// activos queda como script actual, es decir, cambia de script sin preguntar.

	ScriptDescriptor scriptDescriptor;	
	int numberActives <- BatchSize( $MINDBOARD@DialogueState.ActivatedScriptsStack );
	BatchRecoverPosition( $MINDBOARD@DialogueState.ActivatedScriptsStack, numberActives, scriptDescriptor ); 

	// Hay cambio de script activo
	if( !! $MINDBOARD@DialogueState.CurrentScriptDescriptor == scriptDescriptor )
	{
		$MINDBOARD@DialogueState.CurrentScriptDescriptor <- scriptDescriptor;
	}
	
	// TODO QUITAR
	// DialogueScript script <- getCurrentScript();
	// SpyMessage(script.ScriptInfoItems);
}

procedure selectCurrentNode()
{
	DialogueScript dialogueScript;
	ScriptNodeDescriptor nodeDescriptor;
	int size;
	int position;
	ActivatedScriptNodes activatedScriptNodes;
	ScriptNode node;

	dialogueScript <- getCurrentScript( );
	size <- BatchSize( dialogueScript.ScriptNodes );
	for(position <- 1; position <= size; position++) 
	{
		BatchRecoverPosition( dialogueScript.ScriptNodes, position, node );
		if( preconditionsValidated(node) )
		{ 
			BatchInsertEnd( activatedScriptNodes, node.ScriptNodeDescriptor );
		}
	}

	dialogueScript.ActivatedScriptNodes <- activatedScriptNodes;

	// TODO
	// Define activated nodes policy
	// Here we select last node as current
	// It would be better to select randomly the next node

	size <- BatchSize( activatedScriptNodes );
	if( size > 0 )
	{
		BatchRecoverPosition( activatedScriptNodes, size, nodeDescriptor );
		dialogueScript.CurrentNodeDescriptor <- nodeDescriptor;
	}
	else
	{
		dialogueScript.CurrentNodeDescriptor <- '';
	}

	setScript( dialogueScript );
}

procedure processNode()
{
	ScriptNode currentNode;

	currentNode <- getCurrentNode();

	executePostconditions( currentNode );

	// TODO QUITAR
	DialogueScript script <- getCurrentScript();
	SpyMessage(script.ScriptInfoItems);
}

procedure closeTalkingTurn()
{
	initMindBoardInput();
}




