// ******************************************************************
//
//	Grammar rules for english numbers
//
// ******************************************************************
// 
//	PROJECT	: Fluency
//	MODULE  : Kernel	
//	PACKAGE	: Number	
//	FILE	: English/Grammar/NumberEnglishGrammar.lkt
// 
// ******************************************************************

// Output rule for this package
(Number_Rule01 :
 	[ ParameterValue -> Number ]
	{
		^.Number <- #1;
	}
)

// zero
// four
// ten
// twenty-six
// ninety-nine
(Number_Rule02_1 :
 	[ Number -> lexNumberValue]
	{
		^.NumberValue <- #1;
	}
)

(Number_Rule02_2 :
 	[ Number -> lexNumberDigits]
	{
		^.NumberValue <- #1;
	}
)

// a hundred
// one hundred
// one hundred and six
// nine hundreds and ninety-nine
(Number_Rule03:
	[ Number -> Number? lexNumberValueHundred lexConjAnd? Number? ]
	{
		if((#1 && #1.NumberValue >= 10) || (#4 && #4.NumberValue >= 100))
		{
			Fail();
		}

		^.NumberValue <- #2;
		if(#1)
		{
	        	^.NumberValue <- ^.NumberValue * #1.NumberValue;
		}
	        if(#4) 
		{
			^.NumberValue <- ^.NumberValue + #4.NumberValue;
        	}
	}
)

// thousand
// a thousand
// a thousand and nine 
// two thousand and thirty
// two hundred and six thousand three hundred and seventy-four
// nine hundred and ninety-nine thousand nine hundred and ninety-nine
(Number_Rule04:
	[ Number -> Number? lexNumberValueThousand lexConjAnd? Number? ]
	{
		if((#1 && #1.NumberValue >= 1000) || (#4 && #4.NumberValue >= 1000))
		{
			Fail();
		}

		^.NumberValue <- #2;
		if(#1) 
		{
			^.NumberValue <- ^.NumberValue * #1.NumberValue;
		}
		if(#4) 
		{
			^.NumberValue <- ^.NumberValue + #4.NumberValue;
		}
	}
)

// million
// a million
// a million and nine 
// two millions and thirty
// thirty-six millions one hundred and fifty-one
// ninety-nine millions two thousand hundred and fifty-one
// one hundred and ninety-nine millions and three hundred thousand two hundred and fifty-one
// nine hundred and ninety-nine millions nine hundred and ninety-nine thousand nine hundred and ninety-nine
(Number_Rule05:
	[ Number -> Number? lexNumberValueMillion lexConjAnd? Number? ] 
	{
		if((#1 && #1.NumberValue >= 1000) || (#4 && #4.NumberValue >= 1000000))
		{
			Fail();
		}

		^.NumberValue <- #2;
		if(#1) 
		{
			^.NumberValue <- ^.NumberValue * #1.NumberValue;
		}
		if(#4) 
		{
			^.NumberValue <- ^.NumberValue + #4.NumberValue;
		}
	}
)

// one thousand eleven
// twenty-one thousand eleven
// seven hundred twenty-one thousand eleven
// one million two hundred fifty-six thousand seven hundred twenty-one
// thirty-one million two hundred fifty-six thousand seven hundred twenty-one
// six hundred thirty-one million two hundred fifty-six thousand seven hundred twenty-one

