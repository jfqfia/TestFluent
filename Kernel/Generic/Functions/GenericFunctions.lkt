// ****************************************************************************
//
//	Functions used for generic tasks mostly related with parameters
//
// ****************************************************************************
//
//	PROJECT	: Fluency
// 	DOMAIN  : Kernel
//	MODULE  : Generic
//	PACKAGE	: Functions
// 	FOLDER  : -
// 	FILE	: GenericFunctions
//
// ****************************************************************************

ParameterFormats getFormatsFromParameterTypeKernel(ParameterType parameterType)
{
	ParameterFormats ret;

	if(parameterType == 'phonenumber')
	{
		ret <- getParameterFormatsPhoneNumber();
	}

	return ret;
}

ParameterValue concatenateHistoryKernel(InfoItemHistory history, Parameter lastParameter)
{
	ParameterValue ret;

	if(lastParameter.ParameterType == 'phonenumber')
	{
		ret <- concatenateHistoryPhoneNumber(history, lastParameter);
	}

	return ret;
}

ScriptNodeStateName checkParameterIntersententialKernel(InfoItemHistory history, Parameter parameter)
{
	ScriptNodeStateName ret;
	
	if(parameter.ParameterType == 'phonenumber')
	{
		ret <- checkPhoneNumberIntersententialValidity(history, parameter );
	}

	return ret;
}

ScriptNodeStateName checkParameterKernel(Parameter parameter)
{
	ScriptNodeStateName ret;
	
	if(parameter.ParameterType == 'datetime')
	{
		ret <- checkDateTimeValidity( parameter );
	}
	if(parameter.ParameterType == 'countryplace')
	{
		ret <- checkCountryPlaceValidity( parameter );
	}
	if(parameter.ParameterType == 'moneyamount')
	{
		ret <- checkMoneyAmountValidity( parameter );
	}
	if(parameter.ParameterType == 'phonenumber')
	{
		ret <- checkPhoneNumberValidity( parameter );
	}

	return ret;
}

bool coherentActionScopeKernel(string action, string scope)
{
	bool ret;

	ret =   (action == 'back' && scope == 'task');

	return ret;	
}

string getActionDomainFromLemmaKernel(string lemma)
{
	switch (lemma) 
	{
		// Action back (scope: 'task')
		case 'close'		{ return 'back'; }
		case 'cancel'		{ return 'back'; }
		case 'back'		{ return 'back'; }
		case 'drop'		{ return 'back'; }
		case 'discard'		{ return 'back'; }
		case 'annul'		{ return 'back'; }
		case 'get rid of'	{ return 'back'; }
		case 'get back'		{ return 'back'; }
	}

	return 'unknown';
}

string firstUpper(string in)
{
	string head <- SubLiteral(in, 1, 1);		
	string tail <- SubLiteral(in, 2, LiteralSize(in));
	head <- LiteralConvertUpper(head);

	return LiteralConcat(head, tail);
}

