// **************************************************
//
//
//
// **************************************************
//
//	PROJECT	:	
//	MODULE  :	
//	PACKAGE	:	
//	FILE	:	
//
// **************************************************

ScriptNodeStateName checkFormats(ParameterFormats formats, string value)
{
	ScriptNodeStateName ret <- 'incorrect';	
	ScriptNodeStateName current;	

	ParameterFormat format;
	int size <- BatchSize(formats);
	bool end <- False;
	for(int position <- 1; position <= size && !! end; position++)
	{
		BatchRecoverPosition(formats, position, format);

		current <- checkFormat(format, value);
		if(current == 'correct')
		{
			ret <- 'correct';
			end <- True;
		}
		else if(current == 'pending')
		{
			ret <- 'pending';
		}
	}

	return ret;
}

ScriptNodeStateName checkFormat(ParameterFormat format, string value)
{
	ScriptNodeStateName ret;

	int formatSize = LiteralSize( format );
	int valueSize = LiteralSize ( value );
	if(valueSize < formatSize)
	{
		ret <- 'pending';
	}
	else if(valueSize == formatSize)
	{
		ret <- 'correct';
		int size <- LiteralSize( value );
		for(int position <- 1; position <= size; position ++)
		{
			string formatCaracter <- LiteralPositionValue(format, position);
			string valueCaracter <- LiteralPositionValue(value, position);
			if(!! correctFormatCaracter(formatCaracter, valueCaracter))
			{
				ret <- 'incorrect';
			}
		}
	}
	else
	{
		ret <- 'incorrect';
	}

	// TODO QUITAR	
	//SpyMessage("");
	//SpyMessage("");
	//SpyMessage(ret);
	//SpyMessage("");
	//SpyMessage("");

	return ret;	
}

bool correctFormatCaracter(string formatCaracter, string valueCaracter)
{
	bool ret <- False;	

	// #: Only numeric caracters: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
	if(!! ret && formatCaracter == '#' && isNumericCaracter(valueCaracter))
	{
		ret <- True;
	}
	// Specific signs
	if(!! ret && formatCaracter == valueCaracter )
	{
		ret <- True;
	}

	return ret;
}

bool isNumericCaracter(string caracter)
{
	bool ret <- False;
	if( caracter == '0' || caracter == '1' || caracter == '2' || caracter == '3' || caracter == '4' || caracter == '5' || caracter == '6' || caracter == '7' || caracter == '8' || caracter == '9' )
	{
		ret <- True;
	}
	
	return ret;
}

/* Possible mask formats
# 	Any valid number
U	Any letter 
A	Any letter or number
H 	Any hex caracter
*	Anything
*/





