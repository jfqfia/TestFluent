// ****************************************************************************
//
//	English grammar for CountryPlace parameter
//
// ****************************************************************************
//
//	PROJECT	: Fluency
// 	DOMAIN  : Kernel
//	MODULE  : CountryPlace
//	PACKAGE	: English
// 	FOLDER  : Grammar
// 	FILE	: CountryPlaceEnglishGrammar
//
// ****************************************************************************

(CountryPlace_Rule01 :
 	[ Parameter -> CountryPlace ]
	{
		^.ParameterCategory <- 'terminal';
		^.ParameterType <- 'countryplace';
		^.ParameterValue.CountryPlace <- #1;
	}
)

(CountryPlace_Rule02 :
 	[ CountryPlace -> < lexPrepIn | lexPrepAt | lexPrepNear | lexPrepFrom >? lexCountryPlace]
	{
		if(!! IsTokenSpelled(2))
		{
			^ <- #2;
		}
		else
		{
			Fail();		
		}
	}
)

(CountryPlace_Rule03 :
 	[ CountryPlace -> < lexPrepIn | lexPrepAt | lexPrepNear | lexPrepFrom >? lexCountryPlace lexCountryTownsSufixDK?]
	{
		if( #2.CountryName == 'denmark' && !! IsTokenSpelled(2))
		{
			^ <- #2;	
		}
		else
		{
			Fail();
		}
	}
)

(CountryPlace_Rule04 :
 	[ CountryPlace -> < lexPrepIn | lexPrepAt | lexPrepNear | lexPrepFrom >? lexCountryPlace lexCountryTownsSufixLT?]
	{
		if( #2.CountryName == 'lithuania' && !! IsTokenSpelled(2))
		{
			^ <- #2;	
		}
		else
		{
			Fail();
		}
	}
)

(CountryPlace_Rule05 :
 	[ CountryPlace -> < lexPrepIn | lexPrepAt | lexPrepNear | lexPrepFrom >? lexCountryPlace lexCountryTownsSufixLV?]
	{
		if( #2.CountryName == 'latvia' && !! IsTokenSpelled(2))
		{
			^ <- #2;	
		}
		else
		{
			Fail();
		}
	}
)

