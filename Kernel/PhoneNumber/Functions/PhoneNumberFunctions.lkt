// **************************************************
//
//	
// 
// **************************************************
//
//	PROJECT	:	
//	MODULE  :	
// 	PACKAGE	:	
//	FILE	:	
//
// **************************************************

bool canMergeWithSequentialPhoneNumber(Parameter parameter1, Parameter parameter2)
{
	return False;
}

bool canMergeWithOrPhoneNumber(Parameter parameter1, Parameter parameter2)
{
	return True;
}

bool canMergeWithAndPhoneNumber(Parameter parameter1, Parameter parameter2)
{
	return False;
}

ParameterFormats getParameterFormatsPhoneNumber()
{
	// A phone number is a 9 digits (0-9) string
	// TODO Be careful with +34
	ParameterFormats ret;
	ParameterFormat format;

	format <- '#########';
	BatchInsertEnd(ret, format);

	// TODO QUITAR: se supone que no hay teléfonos con 11 dígitos
	format <- '###########';
	BatchInsertEnd(ret, format);

	return ret;
}

PhoneNumber convertNumberToPhoneNumber(Parameter parameter)
{
	PhoneNumber ret;

	if(parameter.ParameterCategory == 'terminal' || parameter.ParameterCategory == 'negation')
	{
		Number number <- parameter.ParameterValue.Number;
		ret.PhoneNumberValue <- number.NumberLiteral;
	}
	if(parameter.ParameterCategory == 'sequential')
	{
		ret.PhoneNumberValue <- getConcatenatedNumber( parameter );
	}

	return ret;
}

ScriptNodeStateName checkPhoneNumberValidity( Parameter parameter )
{
	ScriptNodeStateName ret;

	ret <- validFormat( parameter.ParameterType, parameter.ParameterValue.PhoneNumber.PhoneNumberValue );

	// TODO Additional checks not related with mask format

	return ret;
}

ScriptNodeStateName checkPhoneNumberIntersententialValidity(InfoItemHistory history, Parameter lastParameter )
{
	ScriptNodeStateName ret;
	Parameter parameter;

	parameter.ParameterType <- lastParameter.ParameterType;
	parameter.ParameterValue <- concatenateHistoryPhoneNumber(history, lastParameter);

	ret <- checkPhoneNumberValidity( parameter );

	return ret;
}

ParameterValue concatenateHistoryPhoneNumber(InfoItemHistory history, Parameter lastParameter)
{
	ParameterValue ret;

	string concatenated <- '';
	int size <- BatchSize(history);
	for(int position <- 1; position <= size; position++)
	{
		Parameter recoveredParameter;
		BatchRecoverPosition(history, position, recoveredParameter);		

		concatenated <- LiteralConcat(concatenated, recoveredParameter.ParameterValue.PhoneNumber.PhoneNumberValue);		
	}

	ret.PhoneNumber.PhoneNumberValue <-  LiteralConcat(concatenated, lastParameter.ParameterValue.PhoneNumber.PhoneNumberValue);

	return ret;
}


