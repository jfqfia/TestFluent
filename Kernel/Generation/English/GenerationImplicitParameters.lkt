// ******************************************************
//      Lekta Application
// ***************************
//      PROJECT :       Alter
//      MODULE  :       Generate
//      FILE    :       Generate_Colloquial.lkth
// ******************************************************

(ScriboScheme ImplicitAccountNumberParameter: [ DialogueAct ]
	ScriboCapture 
	{
		GetHeadPropertyLanguage() == ENGLISH &&
		#OBJLOCUTIO-1.CoreDialogueAct.Dimension == 'statement' &&
        	#OBJLOCUTIO-1.CoreDialogueAct.Function == 'inform' &&
		containsActionDomain( #OBJLOCUTIO-1.TaskDialogueAct.Action, 'implicit') &&
		#OBJLOCUTIO-1.TaskDialogueAct.Scope == 'parameter' &&
		parametersContainsParameterType ( #OBJLOCUTIO-1.Parameters, 'accountnumber' )
	}
	ScriboAction 
	{
		Parameter parameter <- parametersRecoverParameterType ( #OBJLOCUTIO-1.Parameters, 'accountnumber' );

		SetMainAnswerStringRandom( 'I understood that the account number is ' );
		SetMainAnswerString(parameter.ParameterValue.AccountNumber.AccountNumberValue);
		SetMainAnswerString('. ');
    	}
)

(ScriboScheme ImplicitPeselNumberParameter: [ DialogueAct ]
	ScriboCapture 
	{
		GetHeadPropertyLanguage() == ENGLISH &&
		#OBJLOCUTIO-1.CoreDialogueAct.Dimension == 'statement' &&
        	#OBJLOCUTIO-1.CoreDialogueAct.Function == 'inform' &&
		containsActionDomain( #OBJLOCUTIO-1.TaskDialogueAct.Action, 'implicit') &&
		#OBJLOCUTIO-1.TaskDialogueAct.Scope == 'parameter' &&
		parametersContainsParameterType ( #OBJLOCUTIO-1.Parameters, 'peselnumber' )
	}
	ScriboAction 
	{
		Parameter parameter <- parametersRecoverParameterType ( #OBJLOCUTIO-1.Parameters, 'peselnumber' );

		SetMainAnswerStringRandom( 'So your PESEL number is ' );
		SetMainAnswerString(parameter.ParameterValue.PeselNumber.PeselNumberValue);
		SetMainAnswerString('. ');
    	}
)

(ScriboScheme ImplicitPhoneNumberParameter: [ DialogueAct ]
	ScriboCapture 
	{
		GetHeadPropertyLanguage() == ENGLISH &&
		#OBJLOCUTIO-1.CoreDialogueAct.Dimension == 'statement' &&
        	#OBJLOCUTIO-1.CoreDialogueAct.Function == 'inform' &&
		containsActionDomain( #OBJLOCUTIO-1.TaskDialogueAct.Action, 'implicit') &&
		#OBJLOCUTIO-1.TaskDialogueAct.Scope == 'parameter' &&
		parametersContainsParameterType ( #OBJLOCUTIO-1.Parameters, 'phonenumber' )
	}
	ScriboAction 
	{
		Parameter parameter <- parametersRecoverParameterType ( #OBJLOCUTIO-1.Parameters, 'phonenumber' );

		SetMainAnswerStringRandom( 'So your phone number is ' );
		SetMainAnswerString(parameter.ParameterValue.PhoneNumber.PhoneNumberValue);
		SetMainAnswerString('. ');
    	}
)

(ScriboScheme ImplicitMedicalSpecialityParameter: [ DialogueAct ]
	ScriboCapture 
	{
		GetHeadPropertyLanguage() == ENGLISH &&
		#OBJLOCUTIO-1.CoreDialogueAct.Dimension == 'statement' &&
        	#OBJLOCUTIO-1.CoreDialogueAct.Function == 'inform' &&
		containsActionDomain( #OBJLOCUTIO-1.TaskDialogueAct.Action, 'implicit') &&
		#OBJLOCUTIO-1.TaskDialogueAct.Scope == 'parameter' &&
		parametersContainsParameterType ( #OBJLOCUTIO-1.Parameters, 'medicalspeciality' )
	}
	ScriboAction 
	{
		Parameter parameter <- parametersRecoverParameterType ( #OBJLOCUTIO-1.Parameters, 'medicalspeciality' );

		SetMainAnswerStringRandom( 'I understood that you want a  ',
					   'So you need a ' );
		SetMainAnswerString( parameter.ParameterValue.MedicalSpeciality.MedicalSpecialityName );
		SetMainAnswerString(' doctor. ');
    	}
)

(ScriboScheme ImplicitAccountNumberParameter: [ DialogueAct ]
	ScriboCapture 
	{
		GetHeadPropertyLanguage() == ENGLISH &&
		#OBJLOCUTIO-1.CoreDialogueAct.Dimension == 'statement' &&
        	#OBJLOCUTIO-1.CoreDialogueAct.Function == 'inform' &&
		containsActionDomain( #OBJLOCUTIO-1.TaskDialogueAct.Action, 'implicit') &&
		#OBJLOCUTIO-1.TaskDialogueAct.Scope == 'parameter' &&
		parametersContainsParameterType ( #OBJLOCUTIO-1.Parameters, 'countryplace' )
	}
	ScriboAction 
	{
		Parameter parameter <- parametersRecoverParameterType ( #OBJLOCUTIO-1.Parameters, 'countryplace' );

		SetMainAnswerStringRandom( 'I understood that you are calling from ',
					   'So you are in ' );
		SetMainAnswerString( mostConcretePlace( parameter.ParameterValue.CountryPlace ) );
		SetMainAnswerString('. ');
    	}
)

(ScriboScheme ImplicitAccountNumberParameter: [ DialogueAct ]
	ScriboCapture 
	{
		GetHeadPropertyLanguage() == ENGLISH &&
		#OBJLOCUTIO-1.CoreDialogueAct.Dimension == 'statement' &&
        	#OBJLOCUTIO-1.CoreDialogueAct.Function == 'inform' &&
		containsActionDomain( #OBJLOCUTIO-1.TaskDialogueAct.Action, 'implicit') &&
		#OBJLOCUTIO-1.TaskDialogueAct.Scope == 'parameter' &&
		parametersContainsParameterType ( #OBJLOCUTIO-1.Parameters, 'moneyamount' )
	}
	ScriboAction 
	{
		Parameter parameter <- parametersRecoverParameterType ( #OBJLOCUTIO-1.Parameters, 'moneyamount' );
		int intAmount <- parameter.ParameterValue.MoneyAmount.IntegerAmount.NumberValue;
		int decAmount <- parameter.ParameterValue.MoneyAmount.DecimalAmount.NumberValue;
		string currency <- parameter.ParameterValue.MoneyAmount.Currency;

		SetMainAnswerStringRandom( 'The money amount is ',
					   'A total of ' );
		SetMainAnswerString( ShapeToString(intAmount) );
		SetMainAnswerString( '.' );
		if( !! decAmount )
		{
			SetMainAnswerString( '00' );
		}
		else if( decAmount < 10 )
		{
			SetMainAnswerString( '0' );
			SetMainAnswerString( ShapeToString(decAmount) );
		}
		else
		{
			SetMainAnswerString( ShapeToString(decAmount) );
		}
		SetMainAnswerString( ' ' );
		SetMainAnswerString( currency );
		SetMainAnswerString( '. ' );
    	}
)

(ScriboScheme ImplicitDateTimeParameter: [ DialogueAct ]
	ScriboCapture 
	{
		GetHeadPropertyLanguage() == ENGLISH &&
		#OBJLOCUTIO-1.CoreDialogueAct.Dimension == 'statement' &&
        	#OBJLOCUTIO-1.CoreDialogueAct.Function == 'inform' &&
		containsActionDomain( #OBJLOCUTIO-1.TaskDialogueAct.Action, 'implicit') &&
		#OBJLOCUTIO-1.TaskDialogueAct.Scope == 'parameter' &&
		parametersContainsParameterType ( #OBJLOCUTIO-1.Parameters, 'datetime' )
	}
	ScriboAction 
	{
		Parameter parameter <- parametersRecoverParameterType ( #OBJLOCUTIO-1.Parameters, 'datetime' );

		SetMainAnswerString( 'You said the date ' );

		SetMainAnswerString( dateTimeToString( parameter.ParameterValue.DateTime ) );
		SetMainAnswerString( '. ' );
    	}
)


