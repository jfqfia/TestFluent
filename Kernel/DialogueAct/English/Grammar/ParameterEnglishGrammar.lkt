// ****************************************************************************
//
//	English grammar for parameter field of DialogueAct 
//
// ****************************************************************************
//
//	PROJECT	: Fluency
// 	DOMAIN  : Kernel
//	MODULE  : DialogueAct
//	PACKAGE	: English
// 	FOLDER  : Grammar
// 	FILE	: ParameterEnglishGrammar
//
// ****************************************************************************

(Parameter_Rule01 :
	[ Parameter/1 -> lexNegation Parameter/0]
	{
		^ <- #2;
		^.ParameterCategory <- 'negation';
	}
)

(Parameter_Rule02 :
	[ Parameter/2 -> Parameter/2 lexComma? Parameter/1]
	{
		if( #1.ParameterType == #3.ParameterType )
		{
			if( canMergeWithSequential(#1, #3))
			{
				^.ParameterCategory <- 'sequential';
				^.ParameterType <- #1.ParameterType;
				^.ParameterOperand1 <- #1;
				^.ParameterOperand2 <- #3;
			}
			else
			{
				Fail();
			}
		}
		else 
		{
			Fail();
		}
	}
)

(Parameter_Rule03 :
	[ Parameter/2 -> Parameter/2 lexConjOr Parameter/1]
	{
		if(#1.ParameterType == #3.ParameterType && canMergeWithOr(#1, #3))
		{
			^.ParameterCategory <- 'disjunction';
			^.ParameterType <- #1.ParameterType;
			^.ParameterOperand1 <- #1;
			^.ParameterOperand2 <- #3;
			if(#1.ParameterCategory == 'sequential')
			{
				^.ParameterOperand1 <- changeParameterCategoryRecursive(#1,'disjunction');
			}
			if(#3.ParameterCategory == 'sequential')
			{
				^.ParameterOperand2 <- changeParameterCategoryRecursive(#3,'disjunction');
			}
		}
		else
		{
			Fail();
		}
	}
)

(Parameter_Rule04 :
	[ Parameter/2 -> Parameter/2 lexConjAnd Parameter/1]
	{
		if(#1.ParameterType == #3.ParameterType && canMergeWithAnd(#1, #3))
		{
			^.ParameterCategory <- 'conjunction';
			^.ParameterType <- #1.ParameterType;
			^.ParameterOperand1 <- #1;
			^.ParameterOperand2 <- #3;
			if(#1.ParameterCategory == 'sequential')
			{
				^.ParameterOperand1 <- changeParameterCategoryRecursive(#1,'conjunction');
			}
			if(#3.ParameterCategory == 'sequential')
			{
				^.ParameterOperand2 <- changeParameterCategoryRecursive(#3,'conjunction');
			}
		}
		else
		{
			Fail();
		}
	}
)

(Parameter_Rule05 :
	[ Parameter/2 -> Parameter/2 lexConjNor Parameter/1]
	{
		if(#1.ParameterType == #3.ParameterType && canMergeWithAnd(#1, #3))
		{
			^.ParameterCategory <- 'conjunction';
			^.ParameterType <- #1.ParameterType;
			^.ParameterOperand1 <- #1;
			^.ParameterOperand2 <- #3;
			^.ParameterOperand2.ParameterCategory <- 'negation';
			if(#1.ParameterCategory == 'sequential')
			{
				^.ParameterOperand1 <- changeParameterCategoryRecursive(#1,'conjunction');
			}
			if(#3.ParameterCategory == 'sequential')
			{
				^.ParameterOperand2 <- changeParameterCategoryRecursive(#3,'conjunction');
			}
		}
		else
		{
			Fail();
		}
	}
)

// To be included in the test corpus

// not today
// not today or not tomorrow
// today or tomorrow
// today tomorrow or the day after tomorrow
// today, tomorrow or 25th aug
// today tomorrow
// today, tomorrow, 25th aug
// today, tomorrow, 25th aug or 26th sep
// from today until tomorrow
// today at eleven
// at 4 o'clock in the afternoon
// early in the afternoon at 4 pm
// early in the afternoon, at 4 pm
// early in the afternoon, at 4 pm or at 5 pm
// today and tomorrow
// today and tomorrow and the day after tomorrow
// today, tomorrow and 25th aug
// neither today nor tomorrow
// not today nor tomorrow
// neither today nor tomorrow nor the day after tomorrow

// Too much ambiguities
// 1st aug and 2nd aug or 3rd aug and 4th aug
// today, tomorrow, 25th aug or from today until tomorrow
// from 1st aug until 2nd aug or from 3rd aug until 4th aug

