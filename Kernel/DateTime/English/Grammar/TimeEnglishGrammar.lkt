// **************************************************
//
//	Rules for times in english.
//
// **************************************************
// 
//	PROJECT	:	Fluency
//	MODULE  :	Kernel
//	PACKAGE	:	Understanding.English.Grammar
//	FILE	:	TimeEnglishGrammar.lkt
// 
// **************************************************

(TimeRule01_1 :
    	[ DateTime -> GeneralTime ] 
	{
		^.GeneralTime <- #1;
    	}
)

(TimeRule01_2 :
    	[ GeneralTime -> OffsetTime ] 
	{
		^.OffsetTime <- #1;
    	}
)

(TimeRule01_3 :
    	[ GeneralTime -> BaseTime ] 
	{
		^.BaseTime <- #1;
    	}
)

// at 11
// at 11 hour
// at 11 hours
// 11 hour
// 11 hours
// at 11 in the morning
(TimeRule05_1 :
    	[ BaseTime -> lexPrepAt Number lexHourTerm? ] 
	{
		^.Hour <- #2.NumberValue;
    	}
)

(TimeRule05_2 :
    	[ BaseTime -> lexPrepAt? Number lexHourTerm ] 
	{
		^.Hour <- #2.NumberValue;
    	}
)


// at hh:mm
// hh:mm
(TimeRule06_1 :
    	[ BaseTime -> lexPrepAt? Number lexColon Number ] 
	{
		^.Hour <- #2.NumberValue;
		^.Minute <- #4.NumberValue;
    	}
)

// at 10 o'clock
// 12 o'clock
(TimeRule06_2 :
    	[ BaseTime -> lexPrepAt? Number lexMinuteOClock ] 
	{
		^.Hour <- #2.NumberValue;
		^.Minute <- #3;
    	}
)

// a quarter past nine
// quarter past nine
// half past nine
(TimeRule06_3 :
    	[ BaseTime -> lexPrepAt? lexMinuteValue lexPrepPast Number] 
	{
		^.Minute <- #2;
		^.Hour <- #4.NumberValue;
    	}
)

// a quarter to nine
// quarter to nine
(TimeRule06_4 :
    	[ BaseTime -> lexPrepAt? lexMinuteValue lexPrepTo Number] 
	{
		^.Minute <- 60 - #2;
		^.Hour <- #4.NumberValue - 1;
		if(^.Hour < 0)
		{
			^.Hour <- 23;
		}
    	}
)

// at six oh five
// six oh five
(TimeRule06_5_a :
    	[ BaseTime -> lexPrepAt? Number lexZeroTerm Number] 
	{
		if(#2.NumberValue < 24 && #4.NumberValue < 10)
		{
			^.Hour <- #2.NumberValue;
			^.Minute <- #4.NumberValue;
		}
		else
		{
			Fail();
		}
    	}
)

// at six twenty-five
// six twenty-five
(TimeRule06_5_b :
    	[ BaseTime -> lexPrepAt? Number Number] 
	{
		if(#2.NumberValue < 24 && #3.NumberValue < 60)
		{
			^.Hour <- #2.NumberValue;
			^.Minute <- #3.NumberValue;
		}
		else
		{
			Fail();
		}
    	}
)


// at six past nine
// six past nine
(TimeRule06_6 :
    	[ BaseTime -> lexPrepAt? Number lexMinuteTerm? lexPrepPast Number] 
	{
		^.Hour <- #5.NumberValue;
		^.Minute <- #2.NumberValue;
    	}
)

// at six to nine
// six to nine
(TimeRule06_7 :
    	[ BaseTime -> lexPrepAt? Number lexMinuteTerm? lexPrepTo Number] 
	{
		^.Hour <- #5.NumberValue - 1;
		if(^.Hour < 0)
		{
			^.Hour <- 23;
		}
		^.Minute <- 60 - #2.NumberValue;
    	}
)

// BaseTime AM
(TimeRule08_1 :
    	[ BaseTime -> BaseTime lexAMTerm] 
	{
		^ <- #1;
    	}
)

// BaseTime PM
(TimeRule08_2 :
    	[ BaseTime -> BaseTime lexPMTerm] 
	{
		^ <- #1;
		^.Hour <- ^.Hour + 12;
    	}
)

// now
// now on
// just now
// this moment
// this time
// this point in time
// nowadays
// present
// in the morning
// in the afternoon
// in the evening
// at night
(TimeRule09 :
	[ BaseTime -> lexPrepAt? lexPrepIn? lexDetThe? lexPartOfTheDay ]
	{	
		^.PartOfTheDay.PartOfTheDayName <- #4; 
	}
)

// early in the morning
// late in the evening
// in the middle of the night
// in the middle of the afternoon
(TimeRule10 :
	[ BaseTime -> lexPrepIn? lexDetThe? lexTemporalModifierForPartOfTheDay lexPrepOf? lexPrepAt? lexPrepIn? lexDetThe? lexPartOfTheDay ]
	{	
		^.PartOfTheDay.PartOfTheDayName <- #8;
		^.PartOfTheDay.PartOfTheDayInterval <- #3;  
	}
)

// in 5 minutes
// within 5 minutes
(TimeRule11_1 :
    	[ OffsetTime -> < lexPrepIn? | lexPrepWithin?> Number lexMinuteTerm ] 
	{
		^.Time.Minute <- #2.NumberValue;
		^.DirectionOfTime <- 'forward';	
    	}
)

// half an hour
// in a quarter hour
(TimeRule11_2 :
    	[ OffsetTime -> < lexPrepIn? | lexPrepWithin? > lexDetUndef? lexMinuteValue lexDetUndef? lexHourTerm ] 
	{
		^.Time.Minute <- #3;
		^.DirectionOfTime <- 'forward';	
    	}
)

// in 3 hours
// within 3 hours
(TimeRule12 :
    	[ OffsetTime -> < lexPrepIn? | lexPrepWithin? > Number lexHourTerm ] 
	{
		^.Time.Hour <- #2.NumberValue;
		^.DirectionOfTime <- 'forward';	
    	}
)

// in 10 hours and a quarter
// in 10 hours and a half
(TimeRule13 :
	[ OffsetTime -> < lexPrepIn? | lexPrepWithin? > Number lexHourTerm lexConjAnd? lexDetUndef? lexMinuteValue ]
	{	
		^.Time.Hour <- #2.NumberValue;
		^.Time.Minute <- #6;
		^.DirectionOfTime <- 'forward';	
	}
)

// in 10 hours and 11 minutes
// in 10 hours 11 minutes
(TimeRule14 :
	[ OffsetTime/1 -> OffsetTime/0 lexConjAnd? OffsetTime/0 ]
	{	
		^ <- #1;
		^ <| #3;
	}
)

// 10 minutes ago
// 10 minutes before
(TimeRule15 :
    	[ OffsetTime -> OffsetTime lexDirectionOfTimeModifier ] 
	{
		^ <- #1;
		^.DirectionOfTime <- #2;
    	}
)

// 5 minutes before noon
// 5 minutes after noon
// 1 hour and a half before midnight
// 15 minutes after 5 pm
(TimeRule16 :
    	[ GeneralTime -> OffsetTime BaseTime ] 
	{
		^.OffsetTime <- #1;
		^.BaseTime <- #2;
    	}
)

// after 8 pm
// from 8 pm
// beginning from 8 pm
// starting from 8 pm
// starting from 5 minutes after midnight
// after 5 minutes ago
(TimeRule17 :
    	[ GeneralTime/1 -> lexTimeIntervalMin? lexTimeIntervalMin GeneralTime/0 ] 
	{
		^.MinTime <- #3;
    	}
)

// before 8 pm
// until 8 pm
// till 8 pm
// ending at 8 pm
// finishing at 8 pm
// until 5 minutes after midnight
(TimeRule18 :
    	[ GeneralTime/1 -> lexTimeIntervalMax? lexTimeIntervalMax GeneralTime/0 ] 
	{
		^.MaxTime <- #3;
    	}
)

// from 8am until noon
// from now until 8pm
// from 2 hours ago until 5 minutes after six o'clock in the afternoon
(TimeRule19 :
    	[ GeneralTime/2 -> GeneralTime/1 GeneralTime/1 ] 
	{
		if((#1.MinTime && #2.MaxTime) || (#1.MaxTime && #2.MinTime))
		{
			^ <- #1;
			^ <| #2;
		}
		else
		{
			Fail();
		}
    	}
)






