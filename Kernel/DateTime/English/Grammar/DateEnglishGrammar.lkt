// **************************************************
//
//	Rules for dates in english.
//
// **************************************************
// 
//	PROJECT	:	Fluency
//	MODULE  :	Kernel
//	PACKAGE	:	Understanding.English.Grammar
//	FILE	:	DateEnglishGrammar.lkt
// 
// **************************************************

(DateRule01_1 :
    	[ Parameter -> DateTime ] 
	{
		^.ParameterCategory <- 'terminal';
		^.ParameterType <- 'datetime';
		^.ParameterValue.DateTime <- #1;
    	}
)

(DateRule01_2 :
    	[ DateTime -> OffsetDate ] 
	{
		^.OffsetDate <- #1;
    	}
)

(DateRule01_3 :
    	[ DateTime -> BaseDate ] 
	{
		^.BaseDate <- #1;
    	}
)

// august the 1st 1999
// august 1st 1999
// august the 1st
// august 1st
// august 1st, 2016
(DateRule02_1 :
	[ BaseDate -> lexBaseMonth lexDetThe? lexBaseDay lexComma? Number? ]
	{
	        ^.Day <- #3;
        	^.Month <- #1;
       		^.Year <- #5.NumberValue;
	}
)

// august the 1 1999
// august 1 1999
// august the 1
// august 1
// august 1, 2016
(DateRule02_2 :
	[ BaseDate -> lexBaseMonth lexDetThe? Number lexComma? Number? ]
	{
		SpyMessage("La del dia");

	        ^.Day <- #3.NumberValue;
        	^.Month <- #1;
       		^.Year <- #5.NumberValue;
	}
)

// the 1st of august 2016
// the 1st of august 
// the 1st august 2016
// the 1st august 
// 1st of august 2016
// 1st of august 
// 1st august 2016
// 1st august 
(DateRule03_1 :
	[ BaseDate -> lexDetThe? lexBaseDay lexPrepOf? lexBaseMonth Number? ]
	{
	        ^.Day <- #2;
        	^.Month <- #4;
        	^.Year <- #5.NumberValue;
    	}
)

// the 1 of august 2016
// the 1 of august 
// the 1 august 2016
// the 1 august 
// 1 of august 2016
// 1 of august 
// 1 august 2016
// 1 august 
(DateRule03_2 :
	[ BaseDate -> lexDetThe? Number lexPrepOf? lexBaseMonth Number? ]
	{
	        ^.Day <- #2.NumberValue;
        	^.Month <- #4;
        	^.Year <- #5.NumberValue;
    	}
)

// in march 2010
// in march
// march
// march 2010
(DateRule03_3 :
	[ BaseDate -> lexPrepIn? lexBaseMonth Number?]
	{
	
		SpyMessage("La del a침o");

		^.Month <- #2;
		^.Year <- #3.NumberValue;
	}
)

// today
// tomorrow
// yesterday
// this day
// now
// after tomorrow
(DateRule04_1 :
    	[ OffsetDate -> lexOffsetDay ] 
	{
		if(#1 < 0)
		{
			^.Date.Day <- -#1;
			^.DirectionOfTime <- 'backward';
		}
		else if(#1 >= 0)
		{
			^.Date.Day <- #1;
			^.DirectionOfTime <- 'forward';	
		}
    	}
)

// in 4 days
// in one day
// 4 days
// 1 day
// within two days
(DateRule04_2 :
    	[ OffsetDate -> < lexPrepIn? | lexPrepWithin? > Number lexDayTerm ] 
	{
		^.Date.Day <- #2.NumberValue;
		^.DirectionOfTime <- 'forward';
    	}
)

// in 2 mondays
(DateRule04_3 :
    	[ OffsetDate -> < lexPrepIn? | lexPrepWithin? > Number lexDayInWeek ] 
	{
		^.Date.DayInWeek <- #3;
		^.DayInWeekOffset <- #2.NumberValue;
		^.DirectionOfTime <- 'forward';    	
	}
)

// in 2 weeks
(DateRule04_4 :
    	[ OffsetDate -> < lexPrepIn? | lexPrepWithin > Number lexWeekTerm ] 
	{
		^.Date.Week <- #2.NumberValue;
		^.DirectionOfTime <- 'forward';    	
	}

)

// in 2 months
(DateRule04_5 :
    	[ OffsetDate -> < lexPrepIn? | lexPrepWithin > Number lexMonthTerm ] 
	{
		^.Date.Month <- #2.NumberValue;
		^.DirectionOfTime <- 'forward';    	
	}
)

// in 2 years
(DateRule04_6 :
    	[ OffsetDate -> < lexPrepIn? | lexPrepWithin > Number lexYearTerm ] 
	{
		^.Date.Year <- #2.NumberValue;
		^.DirectionOfTime <- 'forward';    	
	}
)

// next day
// following day
(DateRule05_1 :
    	[ OffsetDate -> lexDirectionOfTimeModifier lexDayTerm ] 
	{
		^.Date.Day <- 1;
		^.DirectionOfTime <- #1;    	
    	}
)

// on monday
// next monday
// last monday
// following monday
// previous monday
(DateRule05_2 :
    	[ OffsetDate -> lexDirectionOfTimeModifier lexDayInWeek ] 
	{
		^.Date.DayInWeek <- #2;
		^.DayInWeekOffset <- 1;
		^.DirectionOfTime <- #1;    			
    	}
)

// next week
// last week
(DateRule05_3 :
    	[ OffsetDate -> lexDirectionOfTimeModifier lexWeekTerm ] 
	{
		^.Date.Week <- 1;
		^.DirectionOfTime <- #1;    	    	
	}
)

// next month
// last month
(DateRule05_4 :
    	[ OffsetDate -> lexDirectionOfTimeModifier lexMonthTerm ] 
	{
		^.Date.Month <- 1;
		^.DirectionOfTime <- #1;    	    	
    	}
)

// next year
// last year
(DateRule05_5 :
    	[ OffsetDate -> lexDirectionOfTimeModifier lexYearTerm ] 
	{
		^.Date.Year <- 1;
		^.DirectionOfTime <- #1;    	    	
    	}
)

// in 1 year and 2 months
// 1 year, 2 months and 3 days
// one year, two months and a couple of days
(DateRule06 :
    	[ OffsetDate/1 -> OffsetDate/1 lexConjAnd? lexComma? OffsetDate/0 ] 
	{
		^ <- #1;
		^ <& #4;
    	}
)

// 2 days ago
// in 2 mondays
// 3 tuesdays ago
// 2 days before
(DateRule07 :
    	[ OffsetDate -> OffsetDate lexDirectionOfTimeModifier ] 
	{
		^ <- #1;
		^.DirectionOfTime <- #2;
    	}
)

// after a couple of weeks
// after next week
// after today
// before yesterday
// before tomorrow
// after yesterday
(DateRule08 :
    	[ OffsetDate -> lexDirectionOfTimeModifier OffsetDate ] 
	{
		^ <- #2;
		int signOffset;
		if(#1 == ^.DirectionOfTime)
		{
			signOffset <- 1;
		}
		else
		{
			signOffset <- -1;
		}
		if(Filled(#2.Date.Day))
		{
			^.Date.Day <- signOffset + #2.Date.Day;
		}
		else if(Filled(#2.Date.DayInWeek))
		{
			^.Date.DayInWeek <- signOffset + #2.Date.DayInWeek;
		}
		else if(Filled(#2.Date.Week))
		{
			^.Date.Week <- signOffset + #2.Date.Week;
		}
		else if(Filled(#2.Date.Month))
		{
			^.Date.Month <- signOffset + #2.Date.Month;
		}
		else if(Filled(#2.Date.Year))
		{
			^.Date.Year <- signOffset + #2.Date.Year;
		}
		else
		{
			^.Date.Day <- signOffset;
		}
    	}
)

// this monday
(DateRule9 :
    	[ OffsetDate -> lexDetThis lexDayInWeek ] 
	{
		^.Date.DayInWeek <- #2;
		^.DayInWeekOffset <- 1;
		^.DirectionOfTime <- 'forward';    	
    	}
)

// next day from 25 of august
// previous day from 25 of august
// previous day of 25 of august
(DateRule10_1 :
	[ DateTime -> OffsetDate < lexPrepFrom | lexPrepOf >? BaseDate ]
	{
		^.OffsetDate <- #1;
		^.BaseDate <- #3;
	}
)

// TODO Hacer que el colligo s칩lo muestre la m치s l칩gica
// one after 25 of august
// one day after 25 of august
(DateRule10_2 :
	[ DateTime -> lexDirectionOfTimeModifier < lexPrepFrom | lexPrepOf >? BaseDate ]
	{
		^.OffsetDate.DirectionOfTime <- #1;
		^.BaseDate <- #3;
		if(#3.Day)
		{
			^.OffsetDate.Date.Day <- 1;
		}
		else if(#3.DayInWeek)
		{
			^.OffsetDate.Date.DayInWeek <- 1;
		}
		else if(#3.Week)
		{
			^.OffsetDate.Date.Week <- 1;
		}
		else if(#3.Month)
		{
			^.OffsetDate.Date.Month <- 1;
		}
		else if(#3.Year)
		{
			^.OffsetDate.Date.Year <- 1;
		}
	}
)

// from 25 of august
// starting the day after 25 of august
// beginning on monday	
(DateRule11 :
    	[ DateTime/1 -> lexDateIntervalMin? lexDateIntervalMin DateTime/1 ] 
	{	
		^.MinDate <- #3;
		if(!!Filled(#3.OffsetDate) && !!Filled(#3.BaseDate))
		{
			Fail();
		}		
    	}
)

// until 25 of august
// till 25 aug
// deadline 25 aug
// to 25 aug
// at most until the day before 25 of august 2016
// at most until the day before 25 of august 2016 at 8 pm
(DateRule12 :
    	[ DateTime/1 -> lexDateIntervalMax? lexDateIntervalMax DateTime/1 ] 
	{
		^.MaxDate <- #3;
		if(!!Filled(#3.OffsetDate) && !!Filled(#3.BaseDate))
		{
			Fail();
		}		
    	}
)

// next monday at 11:00
// until next monday at 11:00
// from tomorrow at 10 am
(DateRule13 :
    	[ DateTime/1 -> DateTime/0 GeneralTime ] 
	{
		^ <- #1;
		^.GeneralTime <| #2;
		if(Filled(^.MinDate) || Filled(^.MaxDate))
		{
			Fail();
		}
		if(Filled(#1.GeneralTime.BaseTime) && Filled(#2.BaseTime))
		{
			Fail();
		}
		if(Filled(#1.GeneralTime.OffsetTime) && Filled(#2.MinTime))
		{
			Fail();
		}
		if(Filled(#1.GeneralTime.OffsetTime) && Filled(#2.MaxTime))
		{
			Fail();
		}
		if(Filled(#1.GeneralTime.MinTime) && Filled(#2.BaseTime))
		{
			Fail();
		}
		if(Filled(#1.GeneralTime.MaxTime) && Filled(#2.BaseTime))
		{
			Fail();
		}
   	}
)

// from today until the day after 25 aug
// from next monday until the day after 25 of august
// from next monday at 12pm until the day after 25 of august at midnight
// starting next monday until 3pm to the day after 25 of august from 10am to a quarter to nine in the afternoon
// from today at noon until the day after tomorrow at 10pm
// from today at noon till tomorrow from 9pm to 10pm
(DateRule14 :
    	[ DateTime/2 -> DateTime/1 DateTime/1 ] 
	{
		if((#1.MinDate && #2.MaxDate) || (#1.MaxDate && #2.MinDate))
		{
			^ <- #1;
			^ <| #2;
		}
		else
		{
			Fail();
		}
    	}
)



